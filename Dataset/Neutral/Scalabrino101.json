{"!":"com.github.javaparser.ast.CompilationUnit","range":{"beginLine":1,"beginColumn":1,"endLine":25,"endColumn":2},"tokenRange":{"beginToken":{"kind":19,"text":"class"},"endToken":{"kind":0,"text":""}},"imports":[],"types":[{"!":"com.github.javaparser.ast.body.ClassOrInterfaceDeclaration","range":{"beginLine":1,"beginColumn":1,"endLine":25,"endColumn":2},"tokenRange":{"beginToken":{"kind":19,"text":"class"},"endToken":{"kind":100,"text":"}"}},"extendedTypes":[],"implementedTypes":[],"isInterface":"false","typeParameters":[],"members":[{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":2,"beginColumn":1,"endLine":23,"endColumn":2},"tokenRange":{"beginToken":{"kind":107,"text":"@"},"endToken":{"kind":100,"text":"}"}},"body":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":3,"beginColumn":27,"endLine":23,"endColumn":2},"tokenRange":{"beginToken":{"kind":99,"text":"{"},"endToken":{"kind":100,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.ExpressionStmt","range":{"beginLine":4,"beginColumn":3,"endLine":4,"endColumn":102},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":103,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":4,"beginColumn":3,"endLine":4,"endColumn":101},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":98,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.StringLiteralExpr","range":{"beginLine":4,"beginColumn":17,"endLine":4,"endColumn":99},"tokenRange":{"beginToken":{"kind":90,"text":"\"insert into Address (city, state, zip, \\\"from\\\") values (?, ?, ?, 'insert value')\""},"endToken":{"kind":90,"text":"\"insert into Address (city, state, zip, \\\"from\\\") values (?, ?, ?, 'insert value')\""}},"value":"insert into Address (city, state, zip, \\\"from\\\") values (?, ?, ?, 'insert value')"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":4,"beginColumn":3,"endLine":4,"endColumn":14},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":94,"text":"assertNoLoss"}},"identifier":"assertNoLoss"}}},{"!":"com.github.javaparser.ast.stmt.ExpressionStmt","range":{"beginLine":5,"beginColumn":3,"endLine":5,"endColumn":69},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":103,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":5,"beginColumn":3,"endLine":5,"endColumn":68},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":98,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.StringLiteralExpr","range":{"beginLine":5,"beginColumn":17,"endLine":5,"endColumn":66},"tokenRange":{"beginToken":{"kind":90,"text":"\"delete from Address where id = ? and version = ?\""},"endToken":{"kind":90,"text":"\"delete from Address where id = ? and version = ?\""}},"value":"delete from Address where id = ? and version = ?"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":5,"beginColumn":3,"endLine":5,"endColumn":14},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":94,"text":"assertNoLoss"}},"identifier":"assertNoLoss"}}},{"!":"com.github.javaparser.ast.stmt.ExpressionStmt","range":{"beginLine":6,"beginColumn":3,"endLine":6,"endColumn":106},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":103,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":6,"beginColumn":3,"endLine":6,"endColumn":105},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":98,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.StringLiteralExpr","range":{"beginLine":6,"beginColumn":17,"endLine":6,"endColumn":103},"tokenRange":{"beginToken":{"kind":90,"text":"\"update Address set city = ?, state=?, zip=?, version = ? where id = ? and version = ?\""},"endToken":{"kind":90,"text":"\"update Address set city = ?, state=?, zip=?, version = ? where id = ? and version = ?\""}},"value":"update Address set city = ?, state=?, zip=?, version = ? where id = ? and version = ?"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":6,"beginColumn":3,"endLine":6,"endColumn":14},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":94,"text":"assertNoLoss"}},"identifier":"assertNoLoss"}}},{"!":"com.github.javaparser.ast.stmt.ExpressionStmt","range":{"beginLine":7,"beginColumn":3,"endLine":7,"endColumn":114},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":103,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":7,"beginColumn":3,"endLine":7,"endColumn":113},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":98,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.StringLiteralExpr","range":{"beginLine":7,"beginColumn":17,"endLine":7,"endColumn":111},"tokenRange":{"beginToken":{"kind":90,"text":"\"update Address set city = ?, state=?, zip=?, version = ? where id in (select aid from Person)\""},"endToken":{"kind":90,"text":"\"update Address set city = ?, state=?, zip=?, version = ? where id in (select aid from Person)\""}},"value":"update Address set city = ?, state=?, zip=?, version = ? where id in (select aid from Person)"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":7,"beginColumn":3,"endLine":7,"endColumn":14},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":94,"text":"assertNoLoss"}},"identifier":"assertNoLoss"}}},{"!":"com.github.javaparser.ast.stmt.ExpressionStmt","range":{"beginLine":8,"beginColumn":3,"endLine":10,"endColumn":4},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":103,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":8,"beginColumn":3,"endLine":10,"endColumn":3},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":98,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.StringLiteralExpr","range":{"beginLine":9,"beginColumn":5,"endLine":9,"endColumn":355},"tokenRange":{"beginToken":{"kind":90,"text":"\"select p.name, a.zipCode, count(*) from Person p left outer join Employee e on e.id = p.id and p.type = 'E' and (e.effective>? or e.effective<?) join Address a on a.pid = p.id where upper(p.name) like 'G%' and p.age > 100 and (p.sex = 'M' or p.sex = 'F') and coalesce( trim(a.street), a.city, (a.zip) ) is not null order by p.name asc, a.zipCode asc\""},"endToken":{"kind":90,"text":"\"select p.name, a.zipCode, count(*) from Person p left outer join Employee e on e.id = p.id and p.type = 'E' and (e.effective>? or e.effective<?) join Address a on a.pid = p.id where upper(p.name) like 'G%' and p.age > 100 and (p.sex = 'M' or p.sex = 'F') and coalesce( trim(a.street), a.city, (a.zip) ) is not null order by p.name asc, a.zipCode asc\""}},"value":"select p.name, a.zipCode, count(*) from Person p left outer join Employee e on e.id = p.id and p.type = 'E' and (e.effective>? or e.effective<?) join Address a on a.pid = p.id where upper(p.name) like 'G%' and p.age > 100 and (p.sex = 'M' or p.sex = 'F') and coalesce( trim(a.street), a.city, (a.zip) ) is not null order by p.name asc, a.zipCode asc"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":8,"beginColumn":3,"endLine":8,"endColumn":14},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":94,"text":"assertNoLoss"}},"identifier":"assertNoLoss"}}},{"!":"com.github.javaparser.ast.stmt.ExpressionStmt","range":{"beginLine":11,"beginColumn":3,"endLine":13,"endColumn":4},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":103,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":11,"beginColumn":3,"endLine":13,"endColumn":3},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":98,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.StringLiteralExpr","range":{"beginLine":12,"beginColumn":5,"endLine":12,"endColumn":197},"tokenRange":{"beginToken":{"kind":90,"text":"\"select ( (m.age - p.age) * 12 ), trim(upper(p.name)) from Person p, Person m where p.mother = m.id and ( p.age = (select max(p0.age) from Person p0 where (p0.mother=m.id)) and p.name like ? )\""},"endToken":{"kind":90,"text":"\"select ( (m.age - p.age) * 12 ), trim(upper(p.name)) from Person p, Person m where p.mother = m.id and ( p.age = (select max(p0.age) from Person p0 where (p0.mother=m.id)) and p.name like ? )\""}},"value":"select ( (m.age - p.age) * 12 ), trim(upper(p.name)) from Person p, Person m where p.mother = m.id and ( p.age = (select max(p0.age) from Person p0 where (p0.mother=m.id)) and p.name like ? )"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":11,"beginColumn":3,"endLine":11,"endColumn":14},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":94,"text":"assertNoLoss"}},"identifier":"assertNoLoss"}}},{"!":"com.github.javaparser.ast.stmt.ExpressionStmt","range":{"beginLine":14,"beginColumn":3,"endLine":16,"endColumn":4},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":103,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":14,"beginColumn":3,"endLine":16,"endColumn":3},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":98,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.StringLiteralExpr","range":{"beginLine":15,"beginColumn":5,"endLine":15,"endColumn":140},"tokenRange":{"beginToken":{"kind":90,"text":"\"select * from Address a join Person p on a.pid = p.id, Person m join Address b on b.pid = m.id where p.mother = m.id and p.name like ?\""},"endToken":{"kind":90,"text":"\"select * from Address a join Person p on a.pid = p.id, Person m join Address b on b.pid = m.id where p.mother = m.id and p.name like ?\""}},"value":"select * from Address a join Person p on a.pid = p.id, Person m join Address b on b.pid = m.id where p.mother = m.id and p.name like ?"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":14,"beginColumn":3,"endLine":14,"endColumn":14},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":94,"text":"assertNoLoss"}},"identifier":"assertNoLoss"}}},{"!":"com.github.javaparser.ast.stmt.ExpressionStmt","range":{"beginLine":17,"beginColumn":3,"endLine":19,"endColumn":4},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":103,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":17,"beginColumn":3,"endLine":19,"endColumn":3},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":98,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.StringLiteralExpr","range":{"beginLine":18,"beginColumn":5,"endLine":18,"endColumn":199},"tokenRange":{"beginToken":{"kind":90,"text":"\"select case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end from Person p where ( case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end ) like ?\""},"endToken":{"kind":90,"text":"\"select case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end from Person p where ( case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end ) like ?\""}},"value":"select case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end from Person p where ( case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end ) like ?"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":17,"beginColumn":3,"endLine":17,"endColumn":14},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":94,"text":"assertNoLoss"}},"identifier":"assertNoLoss"}}},{"!":"com.github.javaparser.ast.stmt.ExpressionStmt","range":{"beginLine":20,"beginColumn":3,"endLine":22,"endColumn":4},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":103,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":20,"beginColumn":3,"endLine":22,"endColumn":3},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":98,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.StringLiteralExpr","range":{"beginLine":21,"beginColumn":5,"endLine":21,"endColumn":218},"tokenRange":{"beginToken":{"kind":90,"text":"\"/* Here we' go! */ select case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end from Person p where ( case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end ) like ?\""},"endToken":{"kind":90,"text":"\"/* Here we' go! */ select case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end from Person p where ( case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end ) like ?\""}},"value":"/* Here we' go! */ select case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end from Person p where ( case when p.age > 50 then 'old' when p.age > 18 then 'adult' else 'child' end ) like ?"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":20,"beginColumn":3,"endLine":20,"endColumn":14},"tokenRange":{"beginToken":{"kind":94,"text":"assertNoLoss"},"endToken":{"kind":94,"text":"assertNoLoss"}},"identifier":"assertNoLoss"}}}]},"type":{"!":"com.github.javaparser.ast.type.VoidType","range":{"beginLine":3,"beginColumn":9,"endLine":3,"endColumn":12},"tokenRange":{"beginToken":{"kind":62,"text":"void"},"endToken":{"kind":62,"text":"void"}},"annotations":[]},"modifiers":[{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":3,"beginColumn":2,"endLine":3,"endColumn":7},"tokenRange":{"beginToken":{"kind":47,"text":"public"},"endToken":{"kind":47,"text":"public"}},"keyword":"PUBLIC"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":3,"beginColumn":14,"endLine":3,"endColumn":23},"tokenRange":{"beginToken":{"kind":94,"text":"testNoLoss"},"endToken":{"kind":94,"text":"testNoLoss"}},"identifier":"testNoLoss"},"parameters":[],"thrownExceptions":[],"typeParameters":[],"annotations":[{"!":"com.github.javaparser.ast.expr.MarkerAnnotationExpr","range":{"beginLine":2,"beginColumn":1,"endLine":2,"endColumn":5},"tokenRange":{"beginToken":{"kind":107,"text":"@"},"endToken":{"kind":94,"text":"Test"}},"name":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":2,"beginColumn":2,"endLine":2,"endColumn":5},"tokenRange":{"beginToken":{"kind":94,"text":"Test"},"endToken":{"kind":94,"text":"Test"}},"identifier":"Test"}}]}],"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":1,"beginColumn":7,"endLine":1,"endColumn":10},"tokenRange":{"beginToken":{"kind":94,"text":"Test"},"endToken":{"kind":94,"text":"Test"}},"identifier":"Test"},"annotations":[]}]}