class Test {
    public class Example {
    public void loadDataCompleted(boolean error) {
    			SwingUtilities.invokeLater(new Runnable() {
    				public void run() {
    					if (!controlBarcode.hasFocus())
    						controlBarcode.requestFocus();
    				}
    			});
    		}
        private static DnsInfoMapper dnsInfoMapper = new DnsInfoMapper ( DnsInfoMapper . DnsInfo , DnsRecord . DnsRecord ) {
      DnsInfo . DnsInfo output = new DnsInfo . DnsInfo ( ) ;
      output . identification = rawDnsId . id ;
      DnsInfo . Flags flags = flags . isEmpty ( ) ? DnsInfo . Flags . UNKNOWN : flags . flags ;
      flags . type = flags . query == 0 ? DnsInfo . Flags . QUERY : flags . type == DnsInfo . Flags . RESPONSE ;
      flags . opcode = opcodes . contains ( rawDnsId . qr == 0 ? DnsInfo . OpCode . QUERY : "UNKNOWN" ) ;
      flags . authoritative = rawDnsId . aa == 0 ? DnsInfo . Flags . AA : false ;
      flags . truncated = rawDnsId . tc == 0 ? ? DnsInfo . Flags . TRUNED : false ;
      flags . recursiderDesired = rawDnsId . rd == 0 ? ? DnsInfo . Flags . RESIO : false ;
      flags . recursiderAvailable = rawDnsId . ra == 0 ? ? DnsInfo . Flags . RESIO : flags . flags ;
      flags . flags = flags . type == DnsInfo . Flags . QUERY ? flags . type == DnsInfo . Flags . QUERY : flags . type = opcodes . contains ( rawDnsId . qr == 0 ? DnsInfo . OpCode . QUERY : "UNKNOWN" ) ;
      flags . opcode = opcodes . contains ( rawDnsId . opcode , "UNKNOWN" ) ;
      flags . authoritative = rawDnsId . aa == 0 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?
        public static String generate ( Cluster self , List < Cluster > clusters , int version ) {
      DateTime now = DateTime . now ( ) ;
      List < Section > sections = new ArrayList < Section > ( ) ;
      sections . add ( new Section ( "Auto-generated by Lighthouse (" + now . toString ( ) + ")" , self . getGlobalStanza ( ) , self . getDefaultsStanza ( ) ) ) ;
      List < MetaFrontendStanza > metaStanzas = new ArrayList < MetaFrontendStanza > ( ) ;
      metaStanzas . add ( new MetaFrontendStanza ( name , self . getMetaClusters ( clusters ) . getPort ( ) , self . getMetaClusters ( clusters ) . stream ( ) . map ( cluster -> cluster . getFrontendDefinition ( ) ) . collect ( Collectors . toList ( ) ) ) ) ;
      List < FrontendStanza > frontendStanzas = new ArrayList < FrontendStanza > ( ) ;
      frontendStanzas . add ( new FrontendStanza ( cluster , self . getBindAddress ( ) ) ) ;
      List < BackendStanza > backendStanzas = new ArrayList < BackendStanza > ( ) ;
      backendStanzas . add ( new BackendStanza ( cluster ) ) ;
      if ( version > 0 && version >= ( 1 , 5 , 0 ) ) {
        List < PeersStanza > peersStanzas = new ArrayList < PeersStanza > ( ) ;
        peersStanzas . add ( new PeersStanza ( cluster ) ) ;
      }
      else {
        peersStanzas . add ( null ) ;
      }
      sections . addAll ( new Section ( "Frontend stanzas for ACL meta clusters" , metaStanzas ) ) ;
      sections . add ( new Section ( "Per-cluster frontend definitions" , frontendStanzas ) ) ;
      sections . add ( new Section ( "Per-cluster backend definitions" , backendStanzas ) ) ;
      sections . add ( new Section ( "Per-cluster peer listings" , peersStanzas ) ) ;
      sections . add ( new Section ( "Individual proxy definitions" , self . getProxyDefinition ( ) ) ) ;
      if ( self . getStatsStanza ( ) != null ) {
        sections . add ( new Section ( "Listener for stats web interface" , self . getStatsStanza ( ) ) ) ;
      }
      return
    }
}