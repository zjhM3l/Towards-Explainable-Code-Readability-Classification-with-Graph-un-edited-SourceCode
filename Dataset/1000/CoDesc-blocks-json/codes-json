class Test{ 
class Test {
    public class Example {
    @Generated(value = "com.sun.tools.xjc.Driver", date = "2018-10-12T02:41:42+02:00", comments = "JAXB RI v2.2.11")
        public List<Feedindex.Feed> getFeed() {
            if (feed == null) {
                feed = new ArrayList<Feedindex.Feed>();
            }
            return this.feed;
        }
        public MimeEntry findByFileName(String fname) {
            String ext = "";
    
            int i = fname.lastIndexOf('#');
    
            if (i > 0) {
                fname = fname.substring(0, i - 1);
            }
    
            i = fname.lastIndexOf('.');
            // REMIND: OS specific delimters appear here
            i = Math.max(i, fname.lastIndexOf('/'));
            i = Math.max(i, fname.lastIndexOf('?'));
    
            if (i != -1 && fname.charAt(i) == '.') {
                ext = fname.substring(i).toLowerCase();
            }
    
            return findByExt(ext);
        }
        private void setDefaultIOProperties() {
    	io.setWarningMode(Boolean.valueOf(props.getProperty(SHOW_WARN)).booleanValue());
    	io.setErrorMode(Boolean.valueOf(props.getProperty(SHOW_ERR)).booleanValue());
    	io.setDebugMode(Boolean.valueOf(props.getProperty(SHOW_DEBUG)).booleanValue());
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Criteria example(Criteria criteria, T example, Attribute<T, ?>... usingAttributes) {
    
            if (criteria == null) {
                criteria = criteria();
            }
    
            if (usingAttributes == null || usingAttributes.length == 0) {
                throw new RuntimeException("Please provide attributes to example criteria.");
            }
    
            for (Attribute<T, ?> usingAttribute : usingAttributes) {
                if (usingAttribute instanceof SingularAttribute) {
                    addEqExampleRestriction(criteria, example, usingAttribute);
                } else if (usingAttribute instanceof PluralAttribute) {
                    addInExampleRestriction(criteria, example, usingAttribute);
                }
    
            }
    
            return criteria;
        }
        public void setActiveEditor(final IMainTracer part) {
    		if (part instanceof IMainTracer) {
    			mainTracer = (IMainTracer) part;
    			evaluateState();
    		} else { // shouldn't happen
    			mainTracer = null;
    		}
    
    	}
        public void register(Page page) {
            super.register(page);
            page.setVisibleDefault(m_noSelection, true);
            page.setVisibleDefault(m_categoryPanel, false);
            page.addActionListener(this);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Value poll(String queue_name){
      Value element=null;
      if (has_queue(queue_name)) {
        element=queue_map.get(queue_name).pollFirst();
      }
      return element;
    }
        private void updateJobWithSplit(final JobConf job, InputSplit inputSplit) {
        if (inputSplit instanceof FileSplit) {
          FileSplit fileSplit = (FileSplit) inputSplit;
          job.set("map.input.file", fileSplit.getPath().toString());
          job.setLong("map.input.start", fileSplit.getStart());
          job.setLong("map.input.length", fileSplit.getLength());
        }
        LOG.info("split: " + inputSplit.toString());
      }
        private void buildPatternPlus() {
            BufferedImage image = new BufferedImage(10, 10, 
                                                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g = image.createGraphics();
            g.setColor(Color.white);
            g.fillRect(0, 0, 10, 10);
            g.setColor(Color.black);
            g.drawLine(3, 5, 8, 5);
            g.drawLine(3, 6, 8, 6);
            g.drawLine(5, 3, 5, 8);
            g.drawLine(6, 3, 6, 8);
            Rectangle r = new Rectangle(0, 0, 10, 10);
            Paint pattern = new TexturePaint(image, r);
            patterns.put("PATTERN_PLUS", pattern);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override protected FaceletHandler doCompile(URL src, String alias) throws IOException, FaceletException, ELException, FacesException {
    		if (src == null) return null;
    		if (alias.endsWith(".xhtml")) return this.handleNonGraceletCompileRequest(src, alias);
    		return this.getGraceletHandler(new GraceletURLSource(src), alias);
      }
        public Block(NetworkParameters params,long version,Sha256Hash prevBlockHash,Sha256Hash merkleRoot,long time,long difficultyTarget,long nonce,List<Transaction> transactions){
      super(params);
      this.version=version;
      this.prevBlockHash=prevBlockHash;
      this.merkleRoot=merkleRoot;
      this.time=time;
      this.difficultyTarget=difficultyTarget;
      this.nonce=nonce;
      this.transactions=new LinkedList<Transaction>();
      this.transactions.addAll(transactions);
    }
        public void setBREAK1_END(Date bREAK1_END) {
            sumBreak1Dirty = true;
    
            put(BREAK1_END, bREAK1_END);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public IRepositoryOptions getRepositoryOptions() {
    		if (repositoryOptions == null) {
    			repositoryOptions = createRepositoryOptions();
    			if (optionListener == null) {
    				optionListener = new OptionListener();
    			}
    			repositoryOptions.addXfsrOptionListener(optionListener);
    		}
    		return repositoryOptions;
    	}
        protected void addNormalPropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add
    			(createItemPropertyDescriptor
    				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
    				 getResourceLocator(),
    				 getString("_UI_Trap_normal_feature"),
    				 getString("_UI_PropertyDescriptor_description", "_UI_Trap_normal_feature", "_UI_Trap_type"),
    				 LeveleditorPackage.Literals.TRAP__NORMAL,
    				 true,
    				 false,
    				 false,
    				 ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,
    				 null,
    				 null));
    	}
        private boolean isBufferHeaderValid(ByteBuffer buffer) {
            if (buffer.get(2) == magicNumber && buffer.get(3) == protocolVersion) {
                return true;
            } else {
                return false;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getColumnCount() {
        int max = 0;
        for (int r = 0; r < lData.length; r ++) {
          if (max < lData[r].length) {
            max = lData[r].length;
          }
        }
        return max;
      }
        public void setPainters(List<? extends Painter<T>> painters)
        {
            Collection<Painter<T>> old = new ArrayList<Painter<T>>(getPainters());
    
            for (Painter<T> p : old)
            {
                if (p instanceof AbstractPainter)
                {
                    ((AbstractPainter<?>) p).removePropertyChangeListener(handler);
                }
            }
    
            this.painters.clear();
            this.painters.addAll(painters);
    
            for (Painter<T> p : this.painters)
            {
                if (p instanceof AbstractPainter)
                {
                    ((AbstractPainter<?>) p).addPropertyChangeListener(handler);
                }
            }
    
            setDirty(true);
            firePropertyChange("painters", old, getPainters());
        }
        private void endConnection() {
    		connected = false;
    		try {
    			output.endDocument();
    		} catch (Exception e) {
    			System.err.println("*** Error disconnectiong : " + e.getMessage());
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static Dictionary getDictionary ( String dictName ) {
      synchronized ( dictionariesCache ) {
        if ( dictName != null ) {
          try {
            BufferedReader dictionaryReader = new BufferedReader ( new InputStreamReader ( new FileInputStream ( join ( DICTIONARIES_PATH , dictName ) ) ) ) ;
            try {
              dictionariesCache . put ( dictName , dictionaryReader . readLine ( ) ) ;
              dictionaryReader . close ( ) ;
            }
            finally {
              dictionaryReader . close ( ) ;
            }
          }
          catch ( IOException e ) {
            e . printStackTrace ( ) ;
          }
        }
      }
      return dictionariesCache . get ( dictName ) ;
    }
        private BigDecimal checkDebit(BigDecimal d, CreditDebitCode code) {
            if (d == null || code == null || code == CreditDebitCode.CRDT)
                return d;
    
            return BigDecimal.ZERO.subtract(d);
        }
        private void writeFontBBox(final StringBuilder buffer) {
            /* Only applies to Type3 fonts. Gets written in the font descriptor
             * for other font types. */
            if (this.fontSubType != PDFFont.SubType.TYPE3) {
                return;
            }
            final PDFRectangle fontBBox = new PDFRectangle(this.fsFont.getFontBoundingBox());
            if (fontBBox != null) {
                buffer.append("/FontBBox ");
                buffer.append(fontBBox.toPDF());
                buffer.append(EOL);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void createRepository(File dataDir, String configData) {
        sesameManager = new SesameManager();
        sesameManager.createUnmanagedRepository(dataDir, configData);
        repositoryConnection = sesameManager.getRepositoryConnection();
        try {
          repositoryConnection.setAutoCommit(true);
        } catch (RepositoryException ex) {
          sesameManager.disconnect();
          throw new GateOntologyException("Could not set autocommit");
        }
        init();
      }
        public boolean waitForReportReady() throws InterruptedException, ApiException_Exception {
        ReportJobStatus status = reportService.getReportJobStatus(reportJobId);
        while (status == ReportJobStatus.IN_PROGRESS) {
          Thread.sleep(SLEEP_TIMER);
          status = reportService.getReportJobStatus(reportJobId);
        }
    
        return status == ReportJobStatus.COMPLETED;
      }
        public Company (java.lang.Integer _id) {
    		super(_id);
    		
    		Company com=(Company)new CompanyDAO().load(Company.class, _id);
    		
    		if(com!=null){
    			
    			try {
    				BeanUtils.copyProperties(this, com);
    			} catch (IllegalAccessException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			} catch (InvocationTargetException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			}
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setBookmarkingEnabled(boolean enabled) {
    		iconArea.setBookmarkingEnabled(enabled);
    		if (enabled && !isIconRowHeaderEnabled()) {
    			setIconRowHeaderEnabled(true);
    		}
    	}
        public void writeExternal(ObjectOutput out) throws IOException {
      String s=toString();
      if (s.length() <= 65535) {
        out.writeUTF(s);
      }
     else {
        out.writeByte(0);
        out.writeByte(0);
        out.writeInt(s.length());
        out.write(s.getBytes());
      }
    }
        static Context getContext ( Context self , String contextName ) {
      if ( contextName . equals ( "default" ) && "default" . equals ( self . getPackageName ( ) ) ) {
        self . startActivity ( new Intent ( self , DefaultActivity . class ) ) ;
      }
      return self ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private OptionsLocalProxyPanel getOptionsLocalProxyPanel() {
    		if (optionsLocalProxyPanel == null) {
    			optionsLocalProxyPanel = new OptionsLocalProxyPanel();
    		}
    		return optionsLocalProxyPanel;
    	}
        private void generateIndexMap(int size){
      assert (size % 2 == 1);
      int mapWidth=((size + 1) / 2) + 1;
      mCenterCoefficient=(size - 1) / 2;
      mCenterCoefficientMapIndex=mCenterCoefficient + 1;
      mIndexMap=new int[size][mapWidth];
      for (int x=0; x < mapWidth - 2; x+=2) {
        mIndexMap[0][x]=x;
        mIndexMap[0][x + 1]=size - 1 - x;
      }
      mIndexMap[0][mCenterCoefficientMapIndex]=mCenterCoefficient;
      for (int x=1; x < size; x++) {
        for (int y=0; y < mapWidth; y++) {
          mIndexMap[x][y]=mIndexMap[x - 1][y] + 1;
          if (mIndexMap[x][y] >= size) {
            mIndexMap[x][y]-=size;
          }
        }
      }
    }
        public Element makeLink(String href, String contents) {
    		Element a = makeLink(href);
    		a.appendChild(contents);
    		return a;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void save( Document config, Element element  ) throws ConfigurationException{
    		Element font = element.addElement(ELEMENT_FONT);
    		font.addAttribute(ATTRIBUTE_USAGE, getUsage());
    		font.addAttribute(ATTRIBUTE_BOLD, getBold());
    		font.addAttribute(ATTRIBUTE_ITALIC, getItalic());
    		font.addAttribute(ATTRIBUTE_SIZE, getSize());
    		font.setText(getFontname());
    	}
        public static void addVar ( Object self , Object sig , String name , VCD_SIG_TYPE sigType , int width , Callable < Value > valueFormatter ) {
      Value vInf = ( Value ) self ;
      writer . _idScope . registerVariable ( sig , name , self , width , sigType , valueFormatter ) ;
      children . put ( vInf . name , vInf ) ;
      writer . _oFile . println ( "$var " + sigType + " " + vInf . width + " " + vInf . vcdId + " " + vInf . name + " $end" ) ;
    }
        public String getProductTypeServiceValue() {
    
            DocMetaData docMetaData = getDocumentation(TYPE_KEY);
            if (docMetaData == null) {
                return "";
            }
    
            return docMetaData.getResource();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void setPreferredWidth() {
            Element root = component.getDocument().getDefaultRootElement();
            int lines = root.getElementCount();
            int digits = Math.max(String.valueOf(lines).length(), minimumDisplayDigits);
    
            //  Update sizes when number of digits in the line number changes
    
            if (lastDigits != digits) {
                lastDigits = digits;
                FontMetrics fontMetrics = getFontMetrics(getFont());
                int width = fontMetrics.charWidth('0') * digits;
                Insets insets = getInsets();
                int preferredWidth = insets.left + insets.right + width;
    
                Dimension d = getPreferredSize();
                d.setSize(preferredWidth, H);
                setPreferredSize(d);
                setSize(d);
            }
        }
        public static void createWorker ( StoppableWorkerThread self , Runnable runnable , long interval , TimeUnit timeUnit ) {
      StoppableWorkerThread thread = new StoppableWorkerThread ( runnable , interval , timeUnit ) ;
      self . getWorkers ( ) . add ( thread ) ;
      if ( self . isStarted ( ) ) {
        thread . start ( ) ;
      }
    }
        public void execute() throws Exception {
            // Save the release state to the database.
            ReleaseDAO releaseDAO = new ReleaseDAO(false);
            if (release.isNew() & release.getId() == null) {
                releaseDAO.insert(release);
            } else {
                releaseDAO.update(release);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Seconds minus(Seconds seconds) {
            if (seconds == null) {
                return this;
            }
            return minus(seconds.getValue());
        }
        public void printBlockAlign(String block, Vector sources, Vector targets) {
        newLine();
        print("ALIGN " + block + " <");
        for (int i = 0; i < sources.size(); i++) {
          if (i != 0) {
    	print(", ");
          }
          print(sources.elementAt(i).toString());
          print("-");
          print(targets.elementAt(i).toString());
        }
        print(">");
      }
        private JTabbedPane getJTabbedPane1() {
    		if (jTabbedPane1 == null) {
    			jTabbedPane1 = new JTabbedPane();
    			jTabbedPane1.setPreferredSize(new Dimension(176, 48));
    			jTabbedPane1.addTab("snapshot", null, getJPanel41(), null);
    			jTabbedPane1.addTab("search", null, getJPanel51(), null);
    		}
    		return jTabbedPane1;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public CmsToolRootHandler getCurrentRoot(CmsWorkplace wp) {
    
            CmsToolUserData userData = getUserData(wp);
            String root = ROOTKEY_DEFAULT;
            if (userData != null) {
                if (m_roots.getObject(userData.getRootKey()) != null) {
                    root = userData.getRootKey();
                } else {
                    if (LOG.isErrorEnabled()) {
                        LOG.error(Messages.get().getBundle().key(Messages.ERR_NOT_CONFIGURED_ROOT_1, userData.getRootKey()));
                    }
                }
            }
            return (CmsToolRootHandler)m_roots.getObject(root);
        }
        protected void checkOutputDirectory(File outputDirectory) {
    		File f = outputDirectory;
    
    		if (!f.exists()) {
    			f.mkdirs();
    		}
    	}
        public LockTable getLockTable(String debateID) throws DebateOpenException{
    		ActiveDebate debate = activeDebates.get(debateID);
    		if(debate==null)
    			debate = activateDebate(debateID);
    		debate.lastAccessTimestamp = System.currentTimeMillis();
    		return debate.lockTable;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testSelect() {
            System.out.println("testSelect");
            
            testObject.setPhone("123453445");
            assertEquals(testObject.getPhone(), "(123)453-445");
        }
        public static boolean changeSubPage ( Page self , int offset , int maxPageCount , boolean nom ) {
      if ( offset == 0 ) return false ;
      if ( self . slots [ Page . SUBPAGE ] == 0 ) self . slots [ Page . SUBPAGE ] = 1 ;
      if ( ( self . slots [ Page . SUBPAGE ] + offset > maxPageCount ) && nom ) return false ;
      else if ( ( self . slots [ Page . SUBPAGE ] + offset < 1 ) && nom ) return false ;
      else self . slots [ Page . SUBPAGE ] = norm_page_cnt ( self . slots [ Page . SUBPAGE ] + offset , maxPageCount ) ;
      return true ;
    }
        public CaTIES_LexBIGConcept getNextUnprocessedConcept() {
    		CaTIES_LexBIGConcept result = null;
    		if (conceptHeap.size() > 0) {
    			result = (CaTIES_LexBIGConcept) conceptHeap.remove();
    		}
    		return result;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void updateConnection(final String date,final String name,final int newConnections){
      Connection conn=getSQLConnection();
      try (Statement st=conn.createStatement()){
        if (databaseType == POSTGRESQL) {
          st.execute("INSERT INTO " + tablePrefix + "connections VALUES ('"+ name+ "', "+ newConnections+ ", '"+ date+ "')"+ " ON CONFLICT (playername) DO UPDATE SET (connections,date)=('"+ newConnections+ "','"+ date+ "')");
        }
     else {
          st.execute("REPLACE INTO " + tablePrefix + "connections VALUES ('"+ name+ "', "+ newConnections+ ", '"+ date+ "')");
        }
      }
     catch (  SQLException e) {
        plugin.getLogger().log(Level.SEVERE,"SQL error while updating connection: ",e);
      }
    }
        public ComparableOperand createOperand(String javaString, String name, String readableName, Class type){
    		if( type == String.class)
    			return new StringComparableOperand(javaString, name, readableName);
    		return new BooleanOperand(javaString, name, readableName);		
    	}
        public void reload() throws Exception {
    		//first, blank everithing
    		this.clean();
    		//now reload data
    		this.loadFrom(getActualPath(), getModelFileName());
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static vpathparam get(nitro_service service) throws Exception{
    		vpathparam obj = new vpathparam();
    		vpathparam[] response = (vpathparam[])obj.get_resources(service);
    		return response[0];
    	}
        private ResourceRoot createResourceRoot(final DeploymentUnit deploymentUnit, final VirtualFile file, final boolean markAsSubDeployment, final boolean explodeDuringMount) throws IOException {
            final boolean war = file.getName().toLowerCase(Locale.ENGLISH).endsWith(WAR_EXTENSION);
            final Closeable closable = file.isFile() ? mount(file, explodeDuringMount) : exportExplodedWar(war, file, deploymentUnit);
            final MountHandle mountHandle = new MountHandle(closable);
            final ResourceRoot resourceRoot = new ResourceRoot(file, mountHandle);
            deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS, resourceRoot);
            if (markAsSubDeployment) {
                SubDeploymentMarker.mark(resourceRoot);
            }
            if (war) {
                resourceRoot.putAttachment(Attachments.INDEX_RESOURCE_ROOT, false);
                SubExplodedDeploymentMarker.mark(resourceRoot);
            }
            return resourceRoot;
        }
        protected void scrollTables(boolean baseHeader) {
        // Return if scrolling is disabled
        if (scrollPolicy == ScrollPolicy.DISABLED) {
          return;
        }
    
        if (isAttached() && !disableScrollTables) {
          if (baseHeader) {
            int headerScrollLeft = headerWrapper.getScrollLeft();
            dataWrapper.setScrollLeft(headerScrollLeft);
          }
          int scrollLeft = dataWrapper.getScrollLeft();
          headerWrapper.setScrollLeft(scrollLeft);
          if (footerWrapper != null) {
            footerWrapper.setScrollLeft(scrollLeft);
          }
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void menuSelected(final MenuEvent arg0) {
    
            if (getSubElements().length > 0) {
                return;
            }
            synchronized (this) {
                if (loadSubMenus == null) {
                    loadSubMenus = new SubMenuLoader(false);
                    Future<?> submited = SUBMENULOADEREXECUTOR.submit(loadSubMenus);
                    this.loadSubMenusFuture = submited;
                    add(isLoadingMenuItem);
                }
            }
    
        }
        public int getSortID() {
    		if ((sortID + 1) > modules.get(currentModule).sortIdEnd) {
    			logger.warn("Module " + currentModule.toUpperCase() 
    					+ " is about to exceed SortID upper limit: "
    					+ modules.get(currentModule).sortIdEnd
    					+ "(" + (sortID + 1) + ")");
    		}
    		return sortID++;
    	}
        public void deletePackage(String packageId) throws WMWorkflowException {
            setEngine();
            if (_logger.isDebugEnabled()) {
                _logger.debug("deletePackage(" + packageId + ')');
            }
    
            try {
                // Defer enforcement of RI constraints to the database.
                ProcessRepository processRepository =
                    _svcMgr.getProcessRepository();
                XPDLPackage pkg = findPackage(packageId);
                processRepository.deletePackage(packageId);
    
                // Notify package listeners.
                _svcMgr.getWorkflowEventBroker().firePackageDeleted(pkg);
            } catch (RepositoryException e) {
                throw new WMWorkflowException(e);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void weAreDone() {
            try {
                communicator.removeCallback(theRequest.getXID());
            } catch (ServiceLocationException ex) {
                owner.logError("ERROR: SlpMessageSender.weAreDone() - Failed to remove callback !", null);
            }
            if (timer != null) timer.cancel();
            timer = null;
            theRequest = null;
            thePacket = null;
            stopWaiting();
        }
        private void loadSound(String id, String path) throws NVFrameException {
    		if (path == null || path.length() == 0)
    			throw new NVFrameException("Sound resource [" + id + "] | path can't be null");
    
    		try {
    			Sound sound = new Sound(path);
    			sounds.put(id, sound);
    			SoundManager.getInstance().addSound(id, sound);
    		} catch (SlickException e) {
    			throw new NVFrameException("Could not load sound [id: " + id + " | " +
    					"path: " + path + "]", e);
    		}
    	}
        public static void mode ( USBISSDevice self , byte [ ] setBytes ) throws USBISSException {
      self . _mode = setBytes ;
      byte [ ] data = new byte [ ] {
        ISS_CMD , ISS_SET_MODE };
        self . writeToBytes ( data ) ;
        byte [ ] response = self . readData ( 2 ) ;
        if ( response [ 0 ] == 0 ) {
          HashMap errorMap = new HashMap ( ) ;
          errorMap . put ( 0x05 , "Unknown Command" ) ;
          errorMap . put ( 0x06 , "Internal Error 1" ) ;
          errorMap . put ( 0x07 , "Internal Error 2" ) ;
          try {
            throw new USBISSException ( errorMap . get ( response ( 1 ) ) ) ;
          }
          catch ( ClassCastException e ) {
            throw new USBISSException ( "Undocumented Error" ) ;
          }
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public RemotePlayer LookupPlayer(InetAddress user) {
            //get name from IP address of the requestor
            Iterator<RemotePlayer> i = presences.values().iterator();
            RemotePlayer rp;
    
            while (i.hasNext()) {
                rp = i.next();
                if (user.equals(rp.listening_on.getAddress())) {
                    return rp;
                }
            }
    
            return null;
        }
        public List getAllReferences() {
    		int size = mLevels.size();
    		ArrayList array = new ArrayList();
    		Collection tmp = null;
    
    		for (int i = 0; i < size; i++) {
    			tmp = (Collection)mLevels.get(i);
    
    			if (tmp != null)
    				array.addAll(tmp);
    		}
    		return array;
    	}
        public static void extendExpirationDate ( AccessToken self , int days ) {
      long delta = TimeUtils . toSeconds ( days ) ;
      self . expirationDate = self . expirationDate + delta ;
      self . save ( ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public IntVariable makeInternalVar(int[] domain) {
    		this.var = new IntVariable(this, domain);
    		this.var.setVarIdentifier(new VarIdentifier(this.agentId, 0));
    		this.addVariable(var.getVarIdentifier(), var);
    		return var;
    	}
        private int getLastLineNumber() {
            if (text != null) {
                int end = text.getText().length();
                Element rootElement = text.getDocument().getDefaultRootElement();
                int lineNumber = rootElement.getElementIndex(end);
                return lineNumber + 1;
            }
            return -1;
        }
        protected void doLaunch() throws ControlException {
            ExampleModel selected = ((LaunchpadModel) getModel()).getSelectedExample();
            if (selected == null) {
                return;
            }
            String controller = selected.getControllerName();
            try {
                BasicController c = (BasicController) Class.forName(controller).newInstance();
                addChild(c);
                c.startup();
            } catch (Exception e) {
                LOG.fatal("Can't launch: " + controller, e);
                throw new ControlException("CANT_LAUNCH", controller);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    boolean calc_length_violation(){
      double old_violation=length_violation;
      double max_length=rule_net.get_class().get_maximum_trace_length();
      double min_length=rule_net.get_class().get_minimum_trace_length();
      if (max_length <= 0 && min_length <= 0) {
        length_violation=0;
        return false;
      }
      double new_violation=0;
      double trace_length=rule_net.get_trace_length();
      if (max_length > 0 && trace_length > max_length) {
        new_violation=trace_length - max_length;
      }
      if (min_length > 0 && trace_length < min_length && this.incomplete_list.size() == 0) {
        new_violation=trace_length - min_length;
      }
      length_violation=new_violation;
      boolean result=Math.abs(new_violation - old_violation) > 0.1;
      return result;
    }
        public void decrement(){
      int counterVal=counter.decrementAndGet();
      if (counterVal == 0) {
        if (null != resourceCallback) {
          resourceCallback.onTransitionToIdle();
        }
        becameIdleAt=SystemClock.uptimeMillis();
      }
      if (debugCounting) {
        if (counterVal == 0) {
          Log.i(TAG,"Resource: " + resourceName + " went idle! (Time spent not idle: "+ (becameIdleAt - becameBusyAt)+ ")");
        }
     else {
          Log.i(TAG,"Resource: " + resourceName + " in-use-count decremented to: "+ counterVal);
        }
      }
      if (counterVal < 0) {
        throw new IllegalArgumentException("Counter has been corrupted!");
      }
    }
        public static void validateInputParameters(ImfUtilityInputParameters inputParameters) throws ArgumentValidationException {
      File impDirectory=inputParameters.getImpDirectoryFile();
      if (impDirectory == null) {
        throw new ArgumentValidationException("IMP directory must be specified either as a command line argument or in config.xml");
      }
      if (!impDirectory.isDirectory()) {
        throw new ArgumentValidationException(String.format("IMP directory '%s' must be an existing folder",impDirectory.getAbsolutePath()));
      }
      File cplFile=inputParameters.getCplFile();
      if (cplFile == null) {
        throw new ArgumentValidationException("CPL file must be specified either as a command line argument or in config.xml");
      }
      if (!cplFile.isFile()) {
        throw new ArgumentValidationException(String.format("CPL file '%s' must be an existing file",cplFile.getAbsolutePath()));
      }
      File workingDir=inputParameters.getWorkingDirFile();
      if (workingDir == null) {
        throw new ArgumentValidationException("Working directory must be specified either as a command line argument or in config.xml");
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean doesTarget() {
            if (target == null)
                return false;
            return target.doesTarget();
        }
        public void setQuery(String query) {
            if (!StringUtils.equals(this.query, query)) {
                this.query = query;
                this.queryUpper = StringUtils.toUpperEnglish(query);
            }
        }
        protected void updateBeanFields(PersistentDataBean bean) {
    		Feedback feedback = (Feedback) bean;
    		userId = feedback.getUserId();
    		userName = feedback.getUserName();
    		userEmail = feedback.getUserEmail();
    		subject = feedback.getSubject();
    		dateTime = feedback.getDateTime();
    		remoteAddress = feedback.getRemoteAddress();
    		remoteHost = feedback.getRemoteHost();
    		platform = feedback.getPlatform();
    		browser = feedback.getBrowser();
    		type = feedback.getType();
    		description = feedback.getDescription();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addOutput(OutputArg output) {
            if(m_outputArgs == null) {
                m_outputArgs = new java.util.LinkedList() ;
            }
            m_outputArgs.add(output) ;
        }
        public void set_logging_level (DevVarLongStringArray dvlsa) throws DevFailed {
        //- Check input
        if (dvlsa.svalue.length != dvlsa.svalue.length) {
          String desc = "Imcompatible command argument type, long and string arrays must have the same length";
          Except.throw_exception("API_IncompatibleCmdArgumentType", desc, "Logging::set_logging_level");
        }
        //- For each entry in dvlsa.svalue
        for (int i = 0; i < dvlsa.svalue.length; i++) {
          //- Check/get logging level (may throw DevFailed)
          Level level = tango_to_log4j_level(dvlsa.lvalue[i]);
          //- Get ith wilcard
          String pattern = dvlsa.svalue[i].toLowerCase();
          //- Get devices which name matches the pattern pattern
          Vector dl = Util.instance().get_device_list(pattern);
          //- For each device in dl
          Iterator it = dl.iterator();
          while (it.hasNext()) {
            Logger logger = ((DeviceImpl)it.next()).get_logger();
            if (logger == null) {
              String desc = "Internal error. Got invalid logger for device " + logger.getName();
              Except.throw_exception("API_InternalError", desc, "Logging::set_logging_level");
            }
            // set logger's level
            logger.setLevel(level);
            Util.out4.println("Logging level set to " + level.toString() + " for device " + logger.getName());
          } //  while it.hasNext
        } // for i
    	}
        public void popOutConsole() {
    		if (PopoutVertical == 0) {
    			Rectangle bounds = getBounds();
    			PopoutVertical = (int) 7 * (bounds.height / 10);
    		}
    
    		if (VerticalHidden) {
    			VerticalHidden = false;
    			mainSplitpane.setDividerLocation(PopoutVertical);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void resizeImage(final int newWidth, final int newHeight) {
            final BufferedImage newCurrentImage = createBlankImage(originalImage, newWidth, newHeight);
            final Graphics2D g2 = newCurrentImage.createGraphics();
            g2.drawImage(originalImage, 0, 0, newWidth, newHeight, 0, 0, originalImage.getWidth(), originalImage.getHeight(), null);
            g2.dispose();
            currentImage = newCurrentImage;
            imageLabel.setIcon(new ImageIcon(currentImage));
            imageLabel.setText("");
        }
        public static void HydraFieldPositionsTestSingle ( Random self , FieldPositionsTestSingle F , Random random ) {
      float f1 = F . getFactor ( ) ;
      float f2 = F . getFactor ( ) ;
      random . nextFloat ( ) ;
      F . add ( random . nextFloat ( ) , 0 , - 4 , - 1 , f1 * f2 , 0 , 0 ) ;
      F . add ( random . nextFloat ( ) , 0 , 0 , - 4 , f1 , f2 , 0 , 0 ) ;
      F . transpose ( random . nextFloat ( ) , 0 , 1 , 4 , 2 , 5 , 3 ) ;
      F . add ( random . nextFloat ( ) , 0 , 0 , - 3 , - 3 ) ;
    }
        public static Builder create ( Project self , String modelName ) {
      String body = new String ( modelName ) ;
      String parent = "projects/" + self . getTenantId ( ) ;
      return new Builder ( ) . setProjectName ( parent ) . setModelName ( modelName ) . build ( ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Tile getTile(int i) {
            try {
                return (Tile) tiles.get(i);
            } catch (ArrayIndexOutOfBoundsException a) {}
            return null;
        }
        private int getArcWeight(Arc arc) {
            if (arc == null)
                return 0;
            if (! (arc instanceof NormalArc))
                return 0;
            NormalArc normArc = (NormalArc)arc;
            return normArc.getWeight();
        }
        public void addWatchedResource(String name) {
    
            synchronized (watchedResources) {
                String results[] = new String[watchedResources.length + 1];
                for (int i = 0; i < watchedResources.length; i++)
                    results[i] = watchedResources[i];
                results[watchedResources.length] = name;
                watchedResources = results;
            }
            fireContainerEvent("addWatchedResource", name);
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void deleteImageSharings() throws RcsServiceNotAvailableException, RcsGenericException {
      if (mApi == null) {
        throw new RcsServiceNotAvailableException();
      }
      try {
        mApi.deleteImageSharings();
      }
     catch (  Exception e) {
        throw new RcsGenericException(e);
      }
    }
        @Benchmark
    	@BenchmarkMode(Mode.Throughput)
    	public StackFrame stackWalkerWithLambda() {
    		return StackWalker.getInstance().walk(stream -> stream.skip(1).findFirst().get());
    	}
        protected void parse(String input) {
            System.out.println(input);
            rawMessage = input;
            ok = false;
            message = rawMessage;
            if (rawMessage != null) {
                ok = rawMessage.startsWith("OK");
                parseResult();
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ResourceBundle getResourceBundle() {
    		try {
    			if (resourceBundle == null)
    				resourceBundle = ResourceBundle.getBundle("org.jcommander.update.UpdatePluginResources");
    		} catch (MissingResourceException x) {
    			resourceBundle = null;
    		}
    		return resourceBundle;
    	}
        public int toIntBigEndian(){
            int res = 0;
            for (int j = 0; j < count ; ++j)
            {
                    res = res*256+data[count - j - 1];
            }
            return res;
        }
        public VmCompiledExceptionHandler getExceptionHandler(int index) {
            if (eTable != null) {
                return eTable[index];
            } else {
                throw new IndexOutOfBoundsException("eTable is null; index "
                    + index);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getReturnTypeSignature() {
            int endOfParams = signature.lastIndexOf(')');
            if (endOfParams < 0)
                throw new IllegalArgumentException("Bad method signature: " + signature);
            return signature.substring(endOfParams + 1);
        }
        public void init() {
    		pool.clear();
    
    		if (randomMelodiesAmount > 0) {
    			addMelodies(RandomSetMelodiesProvider.provide(randomMelodiesAmount));
    		}
    
    		if (fractalMelodiesAmount > 0) {
    			addMelodies(FractalSetMelodiesProvider.provide(fractalMelodiesAmount));
    		}
    
    		if (loadMelodiesFromDatabase = true) {
    			addMelodies(DatabaseSetMelodiesProvider.provide());
    		}
    
    		if (loadMelodiesFromFiles = true) {
    			addMelodies(FileSetMelodiesProvider.provide());
    		}
    	}
        public static Object[] toArray(List<?> list) {
    	Iterator<?> it = list.iterator();
    	Class clazz = null;
    	while (it.hasNext()) {
    	    Object v = it.next();
    	    if (v == null) continue;
    	    if (clazz == null) clazz = v.getClass();
    	    else if (clazz != v.getClass()) return list.toArray();
    	}
    	if (clazz == Object.class || clazz == null) return list.toArray();
    
    	Object arr = java.lang.reflect.Array.newInstance(clazz, list.size());
    	return list.toArray((Object[]) arr);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Deprecated
        public static <T extends Comparable<?>> ComparableTemplate<T> comparableTemplate(Class<? extends T> cl,
                                                                                         String template, ImmutableList<?> args) {
            return comparableTemplate(cl, createTemplate(template), args);
        }
        private void revertToDefault(String token) {
          if (template.dataElementExists(token)) {
             if (!this.dataElementExists(token)) {
                setDataElement(token, template.getDataElement(token).clone());
             } else {
                this.getDataElement(token).setContent(template.getDataElement(token).getContent());
             }
          }
       }
        public static Array<FileHandle> sortFiles (FileHandle[] files, Comparator<FileHandle> comparator, boolean descending) {
    		Array<FileHandle> directoriesList = new Array<FileHandle>();
    		Array<FileHandle> filesList = new Array<FileHandle>();
    
    		for (FileHandle f : files) {
    			if (f.isDirectory()) {
    				directoriesList.add(f);
    			} else {
    				filesList.add(f);
    			}
    		}
    
    		Sort sorter = new Sort();
    		sorter.sort(directoriesList, comparator);
    		sorter.sort(filesList, comparator);
    
    		if (descending) {
    			directoriesList.reverse();
    			filesList.reverse();
    		}
    
    		directoriesList.addAll(filesList); // combine lists
    		return directoriesList;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.475 -0500",hash_original_method="610737304108759554633F933F40913E",hash_generated_method="550FDCCC3D0D68E65A1A01B4F9B772A4") public boolean hasListeners(String propertyName){
      for (  PropertyChangeListener p : listeners) {
        if (!(p instanceof PropertyChangeListenerProxy) || Objects.equal(propertyName,((PropertyChangeListenerProxy)p).getPropertyName())) {
          return true;
        }
      }
      return false;
    }
        public Reader getReader() throws IOException {
           // we want to remove the BOM windows adds from a file if the encoding is UTF-8
           // in other cases we depend on the charsets 
           Charset cs = Charset.forName(configuration.getSourceEncoding());
           InputStream in = new BufferedInputStream(new FileInputStream(file));
           if (UTF8.name().equalsIgnoreCase(cs.name())) {
               in.mark(3);
               boolean hasBOM = true;
               try {
                   int i = in.read();
                   hasBOM &= i == 0xEF;
                   i = in.read();
                   hasBOM &= i == 0xBB;
                   i = in.read();
                   hasBOM &= i == 0xFF;
               } catch (IOException ioe) {
                   hasBOM= false;
               }
               if (!hasBOM) in.reset();
           }
           return new InputStreamReader( in, cs );
        }
        public void onRemove(Object objKey) {
            Long sz = (Long)sizeContribMap.get(objKey);
            if (null != sz) {
                sizeInBytes -= sz.longValue();
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void handleSubmitButton() {
        String username = usernameField.getText();
        String password = new String(passwordField.getPassword());
    
        if (authenticate(username, password)) {
          new ChooseSpreadsheetFrame(service);
          dispose();
        }
      }
        public void test_selectInitial_method2() {
    	try {
    	    establishTest( SAMPLE_CLASS, false );
    	    parsingController.selectInitial( "multijava" );
    	    parsingController.selectInitial( "multijava" );
    	    fail( "Expected ParsingController.ConfigurationException" );
    	} catch( ParsingController.KeyException e ) {
    	    fail( "Expected ParsingController.ConfigurationException" );
    	} catch( ParsingController.ConfigurationException e ) {
    	    assertTrue( true );
    	}
        }
        public void deleteAll() {
    		
    		hbCrudDAO.getHibernateTemplate().deleteAll(hbCrudDAO.getAll());
    		
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public OvhRefund order_orderId_refund_GET(Long orderId) throws IOException {
    		String qPath = "/me/order/{orderId}/refund";
    		StringBuilder sb = path(qPath, orderId);
    		String resp = exec(qPath, "GET", sb.toString(), null);
    		return convertTo(resp, OvhRefund.class);
    	}
        public void setProperties(String propertyMap) {
    		propertyMap = propertyMap.trim();
    		int startIdx = 0;//index of the start of the next pair to read
    
    		for(int i=startIdx; i<=propertyMap.length(); i++) {
    			char ch = i==propertyMap.length() ? ' ' : propertyMap.charAt(i);
    			
    			if( isQuote(ch) ) {
    				//find the next quote
    				i = propertyMap.indexOf(ch, i+1);
    			}else if( ch == ' ' ) {
    				String pair = propertyMap.substring(startIdx, i);
    				i = startIdx+pair.length();
    				startIdx = i+1;
    				
    				if( pair.trim().length() != 0 )
    					setPropertyPair(pair);
    			}
    		}
    	}
        @Pure
    	public static GeodesicPosition L93_WSG84(double x, double y) {
    		final Point2d ntfLambdaPhi = NTFLambert_NTFLambdaPhi(x, y,
    				LAMBERT_93_N,
    				LAMBERT_93_C,
    				LAMBERT_93_XS,
    				LAMBERT_93_YS);
    		return NTFLambdaPhi_WSG84(ntfLambdaPhi.getX(), ntfLambdaPhi.getY());
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public UserData findUserByUserID(String accountName) {
            UserData found = null;
            ArrayList<UserData> friends = this.getCurrentProfile().getAllFriends();
            for (UserData user : friends) {
                // Temp fix for switching conversations
                if (user.getUserID().equals(accountName)
                        || user.getNickname().equals(accountName)) {
                    found = user;
                    break;
                }
            }
            return found;
        }
        public GridTuple5(@Nullable V1 v1,@Nullable V2 v2,@Nullable V3 v3,@Nullable V4 v4,@Nullable V5 v5){
      this.v1=v1;
      this.v2=v2;
      this.v3=v3;
      this.v4=v4;
      this.v5=v5;
    }
        public final SSLEngine createSSLEngine() {
            try {
                return contextSpi.engineCreateSSLEngine();
            } catch (AbstractMethodError e) {
                UnsupportedOperationException unsup =
                    new UnsupportedOperationException(
                        "Provider: " + getProvider() +
                        " doesn't support this operation");
                unsup.initCause(e);
                throw unsup;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void waitForSend() {
    		try {
    			int count = 0;
    			while (!sent.get()) {
    				count++;
    				Thread.sleep(1000);
    				if (!sent.get()) {
    					if (count % 10 == 0) {
    						log.info("Still waiting... {}", String.format("%TT", new Date()));
    					}
    					if (count > 300) {
    						log.info("5 minutes? I think this test has failed");
    						assert false;
    					}
    				}
    			}
    		} catch (InterruptedException ex) {
    			//nothing
    		}
    	}
        public SortOrder getSortOrder() {
            if (sortOrder != null && sortOrder.equals(SortOrderType.ASC))
                return SortOrder.ASCENDING;
            else if (sortOrder != null && sortOrder.equals(SortOrderType.DESC))
                return SortOrder.DESCENDING;
            else
                return null;
        }
        public Criteria or(){
      Criteria criteria=createCriteriaInternal();
      oredCriteria.add(criteria);
      return criteria;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int decrease(double extrp, int decrease)
        {
            final int remain = getCurrent();
            final double decreased = remain - decrease * extrp;
            set(decreased);
            if (decreased < 0)
            {
                return remain;
            }
            return decrease;
        }
        @Override
        public UpdateSnapshotScheduleResult updateSnapshotSchedule(UpdateSnapshotScheduleRequest request) {
            request = beforeClientExecution(request);
            return executeUpdateSnapshotSchedule(request);
        }
        protected float getFloat(String field) throws InvalidLogEntryException {
            float result = 0.0F;
            try {
                if (field == null) {
                    // check for null explicitly because Sun classes don't
                    throw new InvalidLogEntryException("Invalid Float Numerical Field");
                
                } else if (!"-".equals(field)) {
                    result = Float.parseFloat(field);
                }
    
            } catch (NumberFormatException nfe) {
                throw new InvalidLogEntryException("Invalid Float Numerical Field: " + field);
            }
            return result;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static int codePointCount(CharSequence seq,int beginIndex,int endIndex){
      if (seq == null) {
        throw new NullPointerException();
      }
      int len=seq.length();
      if (beginIndex < 0 || endIndex > len || beginIndex > endIndex) {
        throw new IndexOutOfBoundsException();
      }
      int result=0;
      for (int i=beginIndex; i < endIndex; i++) {
        char c=seq.charAt(i);
        if (isHighSurrogate(c)) {
          if (++i < endIndex) {
            c=seq.charAt(i);
            if (!isLowSurrogate(c)) {
              result++;
            }
          }
        }
        result++;
      }
      return result;
    }
        public void setArray(long[] array) {
    		this.array = array;
    		this.size = ((long[]) this.array).length;
    		this.maxId = this.size - 1;
    	}
        protected void parse(DataInputStream stream) throws Exception {
      int size=stream.readInt();
      int ret, read=0;
      data=new byte[size];
      while (size > 0) {
        ret=stream.read(data,read,size);
        size-=ret;
        read+=ret;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override public Object eGet(int featureID,boolean resolve,boolean coreType){
    switch (featureID) {
    case UmplePackage.GEN_EXPR___NAME_1:
        return getName_1();
    case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_11:
      return getAnonymous_genExpr_1_1();
    case UmplePackage.GEN_EXPR___EQUALITY_OP_1:
    return getEqualityOp_1();
    case UmplePackage.GEN_EXPR___NAME_2:
    return getName_2();
    case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_21:
    return getAnonymous_genExpr_2_1();
    }
    return super.eGet(featureID,resolve,coreType);
    }
        protected void init() {
            // �e�L�X�g�̓o�^
            setText(Messages.getString("TranslationView.TextCopyAction.text")); //$NON-NLS-1$
            // �A�C�R���̓o�^
            ImageDescriptor descriptor =
                TranslationViewPlugin.getInstance().getImageRegistry().getDescriptor(
                        TranslationViewConstants.ICON_COPY);
            setImageDescriptor(descriptor);
            // �A�N�Z�����[�^�̓o�^
            setAccelerator(SWT.CONTROL | 'C');
        }
        public void attributeReplaced(HttpSessionBindingEvent event) {
    
            logger.info("attributeReplaced('" + event.getSession().getId() + "', '" +
                event.getName() + "', '" + event.getValue() + "')");
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Object copy_data(Object destination, Object source) {
            ProcessIOSample typedDst = (ProcessIOSample) destination;
            ProcessIOSample typedSrc = (ProcessIOSample) source;
    
            return typedDst.copy_from(typedSrc);
        
        }
        private void createTraceHTML() {
    		String traceOutputFilename = traceXMLFilename.replaceFirst(".xml",
    				".html");
    		XMLHelper.applyXSL(new File(traceXMLFilename), new File(
    				traceXSLFilename), traceOutputFilename);
    	}
        public Command getItemCommand28() {
            if (itemCommand28 == null) {//GEN-END:|441-getter|0|441-preInit
                // write pre-init user code here
                itemCommand28 = new Command("Contactar", Command.ITEM, 0);//GEN-LINE:|441-getter|1|441-postInit
                // write post-init user code here
            }//GEN-BEGIN:|441-getter|2|
            return itemCommand28;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
        public XMLStreamReader2 createXMLStreamReader(File f)
            throws XMLStreamException
        {
            /* true for auto-close, since caller has no access to the underlying
             * input stream created from the File
             */
            return createSR(f, false, true);
        }
        public Color getBackground () {
    	checkWidget ();
    //	int pixel = (background == -1) ? parent.getBackgroundPixel() : background;
    //	return Color.win32_new (display, pixel);
    	return new Color (display, handle.style.backgroundColor);
    }
        public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
            
    if ("CompetencyProfilePortSoap".equals(portName)) {
                setCompetencyProfilePortSoapEndpointAddress(address);
            }
            else 
    { // Unknown Port Name
                throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public FileInfo getFileInfo(URI path) throws IOException {
        logger.atFine().log("getFileInfo(%s)", path);
        checkArgument(path != null, "path must not be null");
        // Validate the given path. true == allow empty object name.
        // One should be able to get info about top level directory (== bucket),
        // therefore we allow object name to be empty.
        StorageResourceId resourceId = pathCodec.validatePathAndGetId(path, true);
        FileInfo fileInfo =
            FileInfo.fromItemInfo(
                pathCodec,
                getFileInfoInternal(resourceId, gcs.getOptions().isInferImplicitDirectoriesEnabled()));
        logger.atFine().log("getFileInfo: %s", fileInfo);
        return fileInfo;
      }
        public int getNumOfObs() {
    		if (VectVar != null && VectVar.length > 0) {
    			return VectVar[0].Size();
    		} else {
    			return -1;
    		}
    	}
        public static String getFaxResult ( PopbillConnection self , String CorpNum , String ReceiptNum , String UserID ) throws PopbillException {
      if ( ReceiptNum == null || ReceiptNum . length ( ) != 18 ) {
        throw new PopbillException ( - 99999999 , "접수번호가 올바르지 않습니다." ) ;
      }
      return self . httpget ( "/FAX/" + ReceiptNum , CorpNum , UserID ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static Object[] getExample(
                Property property,
                Map<String, Model> definitions,
                DocumentResolver definitionDocumentResolver,
                MarkupDocBuilder markupDocBuilder,
                Map<String, Integer> refStack) {
            if (property.getExample() != null) {
                return new Object[]{property.getExample()};
            } else if (property instanceof ArrayProperty) {
                return new Object[]{generateExampleForArrayProperty((ArrayProperty) property, definitions, definitionDocumentResolver, markupDocBuilder, refStack)};
            } else if (property instanceof RefProperty) {
                return new Object[]{generateExampleForRefModel(true, ((RefProperty) property).getSimpleRef(), definitions, definitionDocumentResolver, markupDocBuilder, refStack)};
            } else {
                return new Object[]{PropertyAdapter.generateExample(property, markupDocBuilder)};
            }
        }
        final public void setVelocity( final Velocity velocity ) {
    
            // Validate the velocity
            if( velocity == null ) {
                throw new IllegalArgumentException( "Velocity cannot be null." );
            } else if( !velocity.isValid() ) {
                throw new IllegalArgumentException( "Velocity is internally invalid." );
            }
    
            this.velocity = velocity;
        }
        public void release() {
          super.release();
          group = null;
          type = null;
          firstOptionBlank = null;
    	  isRequired = null;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public BufferedImage getImage() {
        if (image == null) {
          generateGraphic(null);
        }
        return image;
      }
        public void setETINStatus(gov.irs.www.a2a.mef.mefmsiservices_xsd.ETINStatusType[] param){
                                  
                                       validateETINStatus(param);
    
                                   
                                              if (param != null){
                                                 //update the setting tracker
                                                 localETINStatusTracker = true;
                                              } else {
                                                 localETINStatusTracker = false;
                                                     
                                              }
                                          
                                          this.localETINStatus=param;
                                  }
        @Override public Container[] findChildren(){
    synchronized (children) {
        Container results[]=new Container[children.size()];
        return children.values().toArray(results);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
        void rejectRequest(HttpServerExchange exchange) {
            String scriptFile = OperatingSystemDetector.INSTANCE.isWindows() ? "add-user.bat" : "add-user.sh";
            String message = HttpServerLogger.ROOT_LOGGER.realmNotReadyForSecuredManagementHandler(scriptFile);
            Common.sendPlainTextError(exchange, message, 500);
        }
        private void permuteR(int level) {
    		if (level == size - 1) {
    			// termination case
    			for (int i = 0, j; i < propVals[level].length; i++) {
    				permIndex[level] = i;
    
    				for (j = 0; j < size; j++)
    					permedProps[j].actionProps.put(
    						permedProps[j].propName,
    						propVals[j][permIndex[j]]);
    
    				execute();
    			} // ends outer for
    
    			return;
    		} // ends if
    
    		for (int i = 0; i < propVals[level].length; i++) {
    			permIndex[level] = i;
    			permuteR(level + 1);
    		} // ends for
    	} // ends permuteR
        public String normalise(String value) {
    		if(value.indexOf(" ")==-1||value.endsWith(" s")||value.endsWith("'s")) //if string is a single word, or it is in "XYZ's" form where the ' char has been removed
    			return lemmatizer.lemmatize(value,1).trim();
    
    		String part1 = value.substring(0,value.lastIndexOf(" "));
    		String part2 = lemmatizer.lemmatize(value.substring(value.lastIndexOf(" ")+1),1);
    		return part1+" "+part2.trim();
    
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private String getArchiveFileName(String archive) {
            String fileExtension = getFilenameExtension();
    
            if (archive.endsWith(fileExtension)) {
                return archive;
            } else if (archive.endsWith(archiver.getFilenameExtension())) {
                return archive + compressor.getFilenameExtension();
            } else {
                return archive + fileExtension;
            }
        }
        private void init() {
    		branchNextMove = false;
    		moveChainCount = 1;
    		
    		treeRoot = new ChainLink(0, null);
    		currentLink = treeRoot;
    		
    		branchTop = new BranchLink(CM_MAIN_BRANCH_NUMBER, ChessTree.messages.getString("defBranchName"));
    		branchModel = new DefaultTreeModel(branchTop);
    		branchCurrent = branchTop;
    		branchMarked = null;
    		branchChainMap = new HashMap();
    
    		branchChainMap.put(branchTop.getKey(), branchTop);
    	}
        public boolean domainMatch(String host, String domain) {
            boolean match = host.equals(domain) 
                || (domain.startsWith(".") && host.endsWith(domain));
    
            return match;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected boolean computeRenderingTransform() {
            initialTransform = new AffineTransform();
            if (initialTransform != renderingTransform) {
                setRenderingTransform(initialTransform, false);
                return true;
            }
            return false;
        }
        public void setNumericQueryValuesSequence(NumericQueryValuesSequence[] param){
                                  
                                       validateNumericQueryValuesSequence(param);
    
                                   
                                              if (param != null){
                                                 //update the setting tracker
                                                 localNumericQueryValuesSequenceTracker = true;
                                              } else {
                                                 localNumericQueryValuesSequenceTracker = false;
                                                     
                                              }
                                          
                                          this.localNumericQueryValuesSequence=param;
                                  }
        public StructType container() {
            if (! isMember())
                throw new InternalCompilerError("Non-member class " + this + " cannot have container classes.");
            if (outer() == null)
                throw new InternalCompilerError("Member class " + this + " must have an outer class.");
            return outer();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static boolean allDone(Collection<Future> futures) {
            for (Future f : futures) {
                if (!f.isDone()) {
                    return false;
                }
            }
            return true;
        }
        public static String hashSecretToString(byte[] secret){
      try {
        MessageDigest md=MessageDigest.getInstance("SHA-256");
        md.update(secret);
        byte[] digest=md.digest();
        RIPEMD160Digest dig=new RIPEMD160Digest();
        dig.update(digest,0,digest.length);
        byte[] out=new byte[20];
        dig.doFinal(out,0);
        return Tools.byteToString(out);
      }
     catch (  NoSuchAlgorithmException e) {
        throw new RuntimeException(e);
      }
    }
        private String padString(String str, int length){
            /** a String constant that holds 150 spaces for appending. */
            final String SPACES =
                    "                                                                                                                                                      "; //150spaces
            String strPadded = str + SPACES;
            strPadded = strPadded.substring(0, length);
            return strPadded;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Vector4i sub(Vector4i v){
      x-=v.x;
      y-=v.y;
      z-=v.z;
      w-=v.w;
      return this;
    }
        public void addSubCondition(Condition condition) {
            if (!getOp().hasOperands()) {
                throw new UnsupportedOperationException(String.format(
                    "%s conditions cannot have subconditions", condition.getOp()));
            }
            condition.testFixed(true);
            testFixed(false);
            if (this.typeGraph != null) {
                condition.setTypeGraph(this.typeGraph);
            }
            getSubConditions().add(condition);
            if (getRule() != null) {
                for (Rule subRule : condition.getTopRules()) {
                    getRule().addSubRule(subRule);
                }
            }
        }
        public static boolean isSelinuxFlagInEnabled(){
      String selinux=null;
      try {
        Class<?> c=Class.forName("android.os.SystemProperties");
        Method get=c.getMethod("get",String.class);
        selinux=(String)get.invoke(c,"ro.build.selinux");
      }
     catch (  Exception ignored) {
      }
      return "1".equals(selinux) ? true : false;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean process(Node node, SpecialTokenData spec) {
    		if (spec.isAcceptingReturns()) {
    			boolean result = spec.getPrintData().consumeNewline();
    			spec.setReturnExpected(result);
    			return true;
    		}
    
    		return false;
    	}
        private static String findLib ( Data data ) {
      String options = " " . join ( data . getResources ( ) . getMirge ( ) . getOptions ( ) ) ;
      if ( options . indexOf ( "-lib" ) > - 1 && Utils . fileExists ( options . split ( "-lib" ) [ 1 ] ) ) {
        return options ;
      }
      if ( options . isEmpty ( ) ) {
        logger . warn ( "miRge libraries not found. Follow these instructions to install them:" ) ;
        logger . warn ( "https://github.com/mhalushka/miRge#download-libraries" ) ;
        logger . warn ( "Then, pass -lib LIB_PATH with resourcces:mirge:options:[...]" ) ;
        logger . warn ( "More information: https://bcbio-nextgen.readthedocs.io/en/latest/contents/pipelines.html#smallrna-seq" ) ;
      }
      return options ;
    }
        public void setCollectiveName(java.lang.String param){
                                
                                                this.localCollectiveName=param;
                                        
    
                                   }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Revision get(final int revisionIndex)
    	{
    		if (this.storage.containsKey(revisionIndex)) {
    
    			ChronoStorageBlock block = this.storage.get(revisionIndex);
    			return block.getRev();
    		}
    		return null;
    	}
        protected void addFigurePropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add(createItemPropertyDescriptor(
    				((ComposeableAdapterFactory) adapterFactory)
    						.getRootAdapterFactory(), getResourceLocator(),
    				getString("_UI_ColorTransformator_figure_feature"), getString(
    						"_UI_PropertyDescriptor_description",
    						"_UI_ColorTransformator_figure_feature",
    						"_UI_ColorTransformator_type"),
    				DescPackage.Literals.COLOR_TRANSFORMATOR__FIGURE, true, false,
    				true, null, null, null));
    	}
        public void shutDown(int type) {
    		if (running) {
    			running = false;
    		//	The following line is _not_ a good way of doing this! Fix later.
    		//	for(;listener.isAlive();); // Wait for listener to stop.
    			if (type == TOTAL_SHUTDOWN)
    				for (int i=0;i < getNumberOfConnections();i++)
    					getConnectionByIndex(i).close();
    			logEntry("Shutting down server.");
    		}
    		else logEntry("Attempting server shutdown while server is not running.");
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static byte[] yaml2byte(byte[] yamlstr) {
            Parser parser = Parser.newParser();
            parser.str(Pointer.create(yamlstr, 0), null);
            parser.handler(new BytecodeNodeHandler());
            parser.errorHandler(null);
            parser.implicitTyping(true);
            parser.taguriExpansion(true);
            Bytestring sav = (Bytestring)parser.parse();
            if(null == sav) {
                return null;
            } else {
                byte[] ret = new byte[Bytestring.strlen(sav.buffer) + 2];
                ret[0] = 'D';
                ret[1] = '\n';
                System.arraycopy(sav.buffer, 0, ret, 2, ret.length-2);
                return ret;
            }
        }
        public void setAmp(final int amp) {
            this.groupAmp = amp;
    
            if (amp == 0) {
                return;
            }
    
            final Integer amplitude = amp;
    
            for (JaxoObject ob : getObjectList()) {
                JaxoObjectUtils.setParameter(ob, "amp", Integer.TYPE, amplitude, false);
            }
        }
        public void setRotation(Quaternion rotation){
    	  this.rotation = rotation;
    	  accumulatedWeightAbsolute = 1.0f;
    	  accumulatedWeight = 1.0f ;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ShapeStyle setMoveX(final Integer coord) {
            if ((coord != null)
                    && ((coord < Shape.MIN_COORD) || (coord > Shape.MAX_COORD))) {
                throw new IllegalArgumentRangeException(
                        Shape.MIN_COORD, Shape.MAX_COORD, coord);
            }
            moveX = coord;
            return this;
        }
        public void submitContextAndServiceString(final String evaluatorConfigurationString,
                                                final String contextConfigurationString,
                                                final String serviceConfigurationString) {
        if (evaluatorConfigurationString.isEmpty()) {
          throw new RuntimeException("empty evaluatorConfigurationString provided.");
        }
        if (contextConfigurationString.isEmpty()) {
          throw new RuntimeException("empty contextConfigurationString provided.");
        }
        if (serviceConfigurationString.isEmpty()) {
          throw new RuntimeException("empty serviceConfigurationString provided.");
        }
    
        //When submit over the bridge, we would keep the configurations as serialized strings.
        //public void submitContextAndService(final String contextConfiguration,
        //final String serviceConfiguration) is not exposed in the interface. Therefore cast is necessary.
        ((AllocatedEvaluatorImpl)jallocatedEvaluator)
            .submitContextAndService(evaluatorConfigurationString, contextConfigurationString, serviceConfigurationString);
      }
        public void write(DataOutput dataOutput) throws IOException {
        for (JobProbeData jpd = this; jpd != null; jpd = jpd.getNext()) {
          MessageHelper.writePublishable(dataOutput, jpd.globalJobId);
          MessageHelper.writeString(dataOutput, jpd.jobId);
          MessageHelper.writeString(dataOutput, jpd.jobStatus.name());
    
          dataOutput.writeInt(properties.size());
          for (Map.Entry<String, String> entry : properties.entrySet()) {
            MessageHelper.writeString(dataOutput, entry.getKey());
            MessageHelper.writeString(dataOutput, entry.getValue());
          }
    
          dataOutput.writeBoolean(jpd.next != null);
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void assignTemplate(PageState s, Template t) {
                ContentItem item = m_itemModel.getSelectedItem(s);
                Assert.assertNotNull(item, "item");
    
                TemplateManagerFactory.getInstance().addTemplate(item, t, getUseContext(s));
    
                showDisplayPane(s);
            }
        public void incrementCurrentCount(boolean store) throws GenericEntityException {
            if (store) {
                info.set("recurrenceCount", getCurrentCount() + 1);
                info.store();
            }
        }
        public static <T> CloseableIterable<T> chain(final Iterable<? extends CloseableIterable<? extends T>> iterables) {
            requireNonNull(iterables);
    
            //Don't use CloseableIterators here, as Iterables can reiterate over their data
            //and don't want to close it on them.
            return new FluentCloseableIterable<T>() {
                @Override
                protected void doClose() {
                    for (CloseableIterable<? extends T> curr : iterables)
                        curr.closeQuietly();
                }
    
                @Override
                protected Iterator<T> retrieveIterator() {
                    return Iterators.concat(iterators(iterables));
                }
            };
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addQualifier(CIMQualifier pQualifier) {
    		if (pQualifier == null) throw new IllegalArgumentException("null qualifier argument");
    
    		if (getQualifier(pQualifier.getName()) == null) Utils.addSorted(iQualifiers, pQualifier);
    	}
        public void pageStarted(Document aDocument, Page aPage, int aPageNumber) {
                GraphicsEngine ge = aPage.createGraphics();
                String font = aDocument.createFont("/Times-Roman");
                aPage.addFont(font);
                ge.setFont(font, 8);
                String s = String.valueOf(aPageNumber);
                double w = BaseMetrics.getInstance().getFont("/Times-Roman").getStringLength(s, 8);
                Rect media = aPage.getMediaBox();
                ge.setTextPos(media.getX2()-w-20, media.getY1()+30);
                ge.writeText(s);
                ge.close();
            }
        public String namesPackages (Set listPackages) {
        Iterator iterator = listPackages.iterator();
        String packages = new String();
        while (iterator.hasNext()) {
          String currentPackage = (String)iterator.next();
          if ((!currentPackage.equals("gate.*"))&&
             (!currentPackage.equals("gate.creole.*"))&&
             (!currentPackage.equals("gate.util.*"))&&
             (!currentPackage.equals("java.util.*")))
              packages = packages + newLine + "import "+ currentPackage+";";
        }// while
        return packages;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getChirality(Identifier id) throws RemoteException {
            String val;
    
            if( contains(Molecule.CHIRALITY) ){
                val = (String)get(Molecule.CHIRALITY);
                return val;
            }
            try {
                Molecule ref;
    
                ref = (Molecule)getEntity();
                val = ref.getChirality(id);
            }
            catch( RemoteException e ) {
                Molecule ref;
                reconnect();
                ref = (Molecule)getEntity();
                val = ref.getChirality(id);
            }
            put(Molecule.CHIRALITY, val);
            return val;
        }
        public int hashCode() {
    	long bits = 1L;
    	bits = 31L * bits + VecMathUtil.doubleToLongBits(x);
    	bits = 31L * bits + VecMathUtil.doubleToLongBits(y);
    	bits = 31L * bits + VecMathUtil.doubleToLongBits(z);
    	return (int) (bits ^ (bits >> 32));
        }
        public void setValue(String value) {
    		if (value == null)
    			value = "";
    		if (!Objects.equals(_value, value)) {
    			_value = value;
    			if (isIdRequired())
    				smartUpdate("value", _value);
    			else
    				invalidate();
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ProductContainer findByName(final String name) {
    		return finder
    			(new ProductSelector() { 
    					public boolean select(Product product) {
    						return name.equals(product.getName());
    					}
    			});
    							
    	}
        public void highLightText(Color color, int lineNumber) {
            try {
                String codigo = editArea.getDocument().getText(0,
                        editArea.getDocument().getLength());
                int currentLine = 0;
                int pos = 0;
                while ((currentLine < lineNumber) && (pos != -1)) {
                    pos = codigo.indexOf('\n', pos + 1);
                    if (pos != -1) {
                        currentLine++;
                    }
                }
                highLightText(color, pos, 1);
            } catch (BadLocationException e) {
            }
        }
        private void selectValue(@NotNull final String result) {
            if (input != null) {
                input.setText(" " + result);
            }
            assert frame != null;
            frame.setVisible(false);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void runTest() throws Throwable {
      String localName="blank";
      String namespaceURI="http://www.nist.gov";
      Document doc;
      NodeList elementList;
      Element testNode;
      boolean state;
      doc=(Document)load("staffNS",false);
      elementList=doc.getElementsByTagName("emp:address");
      testNode=(Element)elementList.item(0);
      assertNotNull("empAddrNotNull",testNode);
      state=testNode.hasAttributeNS(namespaceURI,localName);
      assertFalse("throw_False",state);
    }
        public Exception getException() {
        	if(super.getException() ==  null) { return null; }
        	String errorCodeMessage = super.getException().toString();
        	try {
        	  String message = getMessageFromErrorCode(errorCodeMessage);
        	  return new Exception("Error Message ["+errorCodeMessage+"]: "+message+"\n", super.getException());
        	}catch (Exception exception) {
        	  return new Exception(errorCodeMessage,super.getException());	
        	}    	
        }
        public void storeValue(final ValueNode value){
    		final TransactionControl tx = gate.requireTx();
    		registry.store(value);
    		tx.commit();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setBiblioXML(java.lang.String biblioXML) {
            try{
                //  System.out.println("setBiblioXML "+biblioXML);
                if(!biblioXML.trim().equals("")){
                    org.jdom.Element root=newgen.presentation.component.NewGenXMLGenerator.getInstance().getRootElement(biblioXML);
                    tfAffilitaion.setText(utility.getTestedString(root.getChildText("Affliation")));
                    cbRelatorTermMEPN.setSelectedItem(utility.getTestedString(root.getChildText("RelatorTerm")));
                    //System.out.println("in ifjkjksd sdf      "+ utility.getTestedString(root.getChildText("Affliation")));
                }
                
            }catch(Exception e){e.printStackTrace();}
            
            
            
        }
        @Override public boolean visit(boolean ignoreLastVisited,Visitor v) throws IgniteCheckedException {
      if (!state.compareAndSet(State.READING_WRITING,State.VISITING)) {
        assert state.get() != State.CLOSING;
        return false;
      }
      AtomicLongArray tbl0=oldTbl;
      for (int i=0; i < tbl0.length(); i++) {
        long meta=tbl0.get(i);
        while (meta != 0) {
          long valPtr=value(meta);
          long lastVisited=ignoreLastVisited ? 0 : lastVisitedValue(meta);
          if (valPtr != lastVisited) {
            v.onKey(key(meta),keySize(meta));
            lastVisitedValue(meta,valPtr);
            do {
              v.onValue(valPtr + 12,valueSize(valPtr));
              valPtr=nextValue(valPtr);
            }
     while (valPtr != lastVisited);
          }
          meta=collision(meta);
        }
      }
      state(State.VISITING,State.READING_WRITING);
      return true;
    }
        public boolean accept(File f){
      if (f != null) {
        if (f.isDirectory()) {
          return true;
        }
        String extension=getExtension(f);
        if ((extension != null) && (filters.get(getExtension(f)) != null)) {
          return true;
        }
      }
      return false;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void process(InputStream source) {
    		DataInputStream dis = new DataInputStream(source);
    		try {
    			while (true)
    			{
    				long packetId;
    				packetId = dis.readLong();
    				
    				IPacketHandler handler = getHandlerMap().get(packetId);
    				
    				if (handler != null) {
    					logger.debug(getHandlerIdentifier() +  "Activating handler: ");
    					logger.debug(handler.getClass());
    					handler.processPacket(dis);
    					m_responseQueue.processQueue(); // If there are any responses.
    				} else {
    					logger.error("Invalid incoming packet");
    				}
    			}
    		}
    		catch(java.io.IOException readException)
    		{
    			logger.error(readException);
    		}
    	}
        protected void startup() throws ComponentException {
        assert isInitialized();
        state = States.STARTING_UP;
        for (Component component : components.values()) {
          component.startup();
        }
    
        state = States.RUNNING;
        assert isRunning();
      }
        protected ByteBuffer getByteBuffer() {
    	try {
    	    return (ByteBuffer)byteBufferPool.removeLast();
    	} catch(NoSuchElementException e) {
    	    return ByteBuffer.allocate(blocksize);
    	}
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
    		super.collectNewChildDescriptors(newChildDescriptors, object);
    
    		newChildDescriptors.add
    			(createChildParameter
    				(MarkingPackage.eINSTANCE.getIMarkingExtensionNode_Attributes(),
    				 MarkingFactory.eINSTANCE.createIExtensionAttribute()));
    	}
        public boolean isApplicableTo(Influence inf) {
            if (inf == null) 
                return false;
            try {
                @SuppressWarnings("unused") 
                StringMulticastInfluence i = (StringMulticastInfluence)inf;
                return true;
            } 
            catch (ClassCastException e) {
                return false;
            }
        }
        public byte[] createSingleByteArray() {
    
    		byte[] buf = new byte[totalSize];
    
    		int pos = 0;
    
    		for (Triple<byte[],Integer,Integer> t : buffers) {
    
    			System.arraycopy(t.getValue1(), t.getValue2().intValue(), buf, pos, t.getValue3().intValue());
    
    			pos += t.getValue3().intValue();
    
    		}
    
    		return buf;
    
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ContainsExpression (Element e, ComparableResourcesPool requestedResourcesPool) throws InvalidQueryException {
            super(e, requestedResourcesPool);
            System.out.println("createing contains expr ");
            searchedText = e.getTextTrim();
        }
        public static void hasPerm ( Service self , Service service , String permName , Object obj , String callName ) throws ServiceException {
      User user = service . getUser ( ) ;
      if ( ! ( permName == null ) ) {
        if ( ! user . hasPerm ( permName , obj ) ) {
          LOG_PERM . warn ( String . format ( "User %s has no permission %s. Access to %s with obj=%s" , user , permName , callName , obj ) ) ;
          throw new ServiceException ( String . format ( "User %s has no permission %s for object %s" , service . getUser ( ) , permName , obj ) ) ;
        }
        LOG_PERM . debug ( String . format ( "User %s was authorized to access %s with permission %s with obj=%s" , user , callName , permName , obj ) ) ;
      }
    }
        protected void jbInit() throws Exception {
      mainPanel.setLayout(new java.awt.BorderLayout());
      setLayout(new java.awt.BorderLayout());
      southPanel.setLayout(southLayout);
      southPanel.add(confirmPanel,BorderLayout.CENTER);
      southPanel.add(statusBar,BorderLayout.SOUTH);
      mainPanel.add(southPanel,BorderLayout.SOUTH);
      mainPanel.add(parameterPanel,BorderLayout.NORTH);
      mainPanel.add(scrollPane,BorderLayout.CENTER);
      scrollPane.getViewport().add(p_table,null);
      confirmPanel.addActionListener(this);
      confirmPanel.getResetButton().setVisible(hasReset());
      confirmPanel.getCustomizeButton().setVisible(hasCustomize());
      confirmPanel.getHistoryButton().setVisible(hasHistory());
      confirmPanel.getZoomButton().setVisible(hasZoom());
      JButton print=ConfirmPanel.createPrintButton(true);
      print.addActionListener(this);
      confirmPanel.addButton(print);
      popup.add(calcMenu);
      calcMenu.setText(Msg.getMsg(Env.getCtx(),"Calculator"));
      calcMenu.setIcon(new ImageIcon(org.compiere.Adempiere.class.getResource("images/Calculator16.gif")));
      calcMenu.addActionListener(this);
      p_table.getSelectionModel().addListSelectionListener(this);
      enableButtons();
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public DataLine getSelectedDataLine() {
            int selected = getSelectedRow();
            if(selected != -1)
                return ((DataLineModel)dataModel).get(selected);
            else
                return null;
        }
        public void removeNodeFromParent(DefaultMutableTreeNode node, boolean removeChildlessParent) {
            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
            treeModel.removeNodeFromParent(node);
            if (removeChildlessParent && parent.getChildCount() < 1) {
                treeModel.removeNodeFromParent(parent);
            }
        }
        public Boolean closeMainview() {
    		if(closeOpenWorkingFile() == RET_OK) {
    			
    			/* user accepts that the system will exit */
    			closeWorkingFile();
    			restoreDefaults();
    			/* controller cleans up on exit */
    			controller.tidyUp();
    
    			return true;
    		}	
    		/* user rejects the system exiting */
    		return false;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void setCoveredImplementation(int index) {
        synchronized (coveredMethod) {
          coveredMethod.set(index);
        }
      }
        public String toString() {
        java.lang.Object o = getAddProfileOnCreateWrapper();
        if (o != null) {
          return o.toString();
        } else { 
          return "New";
        }
      }
        private void wildcard(XSWildcard wc, String extraAtts) {
    		// TODO
    		// jwkim: no "Any" label in tree
    		SchemaTreeNode newNode = new WilecardNode(wc, extraAtts);
    		addOnly(newNode);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void showSummaries ( final Collection < ? extends String > keys , final int indent , final String ... lines ) {
      final FindSummary findSummary = new FindSummary ( ) {
        @ Override public String getKey ( String keyTxt , String doc ) {
          return StringUtil . join ( wrapper . wrap ( doc . substring ( 0 , doc . indexOf ( "\n\n" ) ) ) , "\n" ) ;
        }
      };
      final String strIndent = " " ;
      final TextWrapper wrapper = new TextWrapper ( ) {
        @ Override public int getWidth ( ) {
          return 80 ;
        }
        @ Override public void setText ( String text ) {
          wrapper . setText ( text ) ;
        }
      };
      showDoc ( findSummary , keys , indent , lines ) ;
    }
        private WebDocumentInfo createWebDocumentInfoFromPage(){
      WebDocumentInfo info=new WebDocumentInfo();
      WebDocumentBuilder documentBuilder=new WebDocumentBuilder();
      NodeList<Element> mobileViewport=DomUtil.querySelectorAll(documentElement,"meta[name=\"viewport\"][content*=\"width=device-width\"]");
      DomConverter converter=new DomConverter(documentBuilder);
      converter.setIsMobileFriendly(mobileViewport.getLength() > 0);
      Element walkerRoot=DomUtil.getArticleElement(documentElement);
      converter.setHasArticleElement(walkerRoot != null);
      if (walkerRoot != null) {
        if (LogUtil.isLoggable(LogUtil.DEBUG_LEVEL_BOILER_PIPE_PHASES)) {
          LogUtil.logToConsole("Extracted article element: " + walkerRoot);
        }
      }
     else {
        walkerRoot=documentElement;
      }
      new DomWalker(converter).walk(walkerRoot);
      info.document=documentBuilder.toWebDocument();
      ensureTitleInitialized();
      info.hiddenElements=converter.getHiddenElements();
      return info;
    }
        public void fireTreeChanged(Object source) {
    		for (ITreeModifierListener l : this.listeners) {
    			l.treeModified(new TreeModifiedEvent(source, this));
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static SimpleFeatureCollection readShapefile( String path ) throws IOException {
    
            OmsShapefileFeatureReader reader = new OmsShapefileFeatureReader();
            reader.file = path;
            reader.readFeatureCollection();
    
            return reader.geodata;
        }
        public MetaReportDocument createMetaReportDocument() throws RemoteException {
        MetaReportDocument metaReportDoc = null;
        try{  
          // get context
          Context initialContext = new InitialContext();
          
          // get home
          MetaReportDocumentHome metaReportDocHome = (MetaReportDocumentHome)
            PortableRemoteObject.narrow(
              initialContext.lookup(MetaReportDocumentHome.COMP_NAME),
              MetaReportDocumentHome.class);
          
          metaReportDoc = metaReportDocHome.create();
        }
        catch(Exception e){
            e.printStackTrace();
        }
    
        return metaReportDoc;
      }
        public static < T > InputSupplier < T > makeInputSupplier ( Generator < T > gen ) {
      T firstEx = Iterables . getOnlyElement ( gen ) ;
      List < T > flattened = new ArrayList < > ( ) ;
      flattened . addAll ( Iterables . transform ( first , t -> t . getClass ( ) ) ) ;
      List < Type > types = new ArrayList < > ( ) ;
      types . add ( t . getType ( ) ) ;
      List < List < Type >> shapes = new ArrayList < > ( ) ;
      shapes . add ( new ArrayList < > ( ) ) ;
      shapes . add ( new ArrayList < > ( ) ) ;
      List < T > firstExList = new ArrayList < > ( ) ;
      firstExList . add ( firstEx ) ;
      final JavaRDD < T > javaRDD = gen . javaRDD ( ) ;
      if ( firstExList . size ( ) > 0 ) {
        T example = firstExList . remove ( 0 ) ;
        if ( example != null ) {
          JavaRDD < T > flatExample = javaRDD . javaRDD ( ) . flatMap ( t -> t . setShape ( shapes ) ) ;
          int [ ] shape = new int [ types . size ( ) ] ;
          for ( int i = 0 ;
          i < shape . length ;
          i ++ ) shape [ i ] = types . get ( i ) . size ( ) ;
          example = JavaRDD . javaRDD ( ) . packAsJavaRDD ( firstEx , flatExample ) ;
        }
      }
      return new InputSupplier < T > ( ) {
        @ Override public T getInput ( ) {
          return firstEx ;
        }
      };
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public SportsTickerToSML (ExtendedProperties config){
    		super( config );
    		setXslfile( config.getString(ST_XSL_FILENAME_PROPERTY,
    									 DEFAULT_ST_XSL_FILENAME));
    		cat.debug( "config XSL: " + config.getString(ST_XSL_FILENAME_PROPERTY,
    									 DEFAULT_ST_XSL_FILENAME));
    		cat.info( getXslfile() );
    	}
        public void clear() {
    		for (;;) {
    			final Set<CallGraphNode> allNodes = callGraph.allNodes();
    			if (allNodes.isEmpty())	break;
    			final CallGraphNode node = allNodes.iterator().next();
    			delete(node);
    		}
    	}
        private Timer newThreadInterrupt() { 
    		final Thread t = Thread.currentThread();
    		Timer timer = new Timer();
    		timer.schedule(new TimerTask() {
    			public void run() {
    				LOG.debug("going to interrupt [" + t.getName() + "]");
    				t.interrupt();
    				LOG.debug("interrupted.");
    			}
    		}, 1500);
    		return timer;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void setStrand(int strandVal) {
            if (strandVal == 1)
            {
                this.setDirection(SequenceDirection.REVERSE);
            }
            else
            {
                this.setDirection(SequenceDirection.FORWARD);
            }
        }
        public NewID createNewID(String value) throws SAML2Exception {
      Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NEWID,value);
      if (obj == null) {
        return new NewIDImpl(value);
      }
     else {
        return (NewID)obj;
      }
    }
        public void deleteHost(Long hostId, String commandId, String comment) {
    		Host deleteHost = loadHost(hostId);
    
    		recordCurrentHostVersion(deleteHost, commandId, ChangeType.DELETE,
    				"Host deleted", comment);
    		for (HostAlias ha : deleteHost.getHostAliases()) {
    			getSession().delete(ha);
    		}
    		for (ExtendedHostInfo hc : deleteHost.getConfigSettings().values()) {
    			getSession().delete(hc);
    		}
    		getSession().delete(deleteHost);
    
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void handleViewChange(View new_view, Digest digest) {
            Vector mbrs=new_view.getMembers();
            if(Trace.trace) {
                if(digest != null)
                    Trace.info(
                            "CoordGmsImpl.handleViewChange()",
                            "view=" + new_view + ", digest=" + digest);
                else
                    Trace.info(
                            "CoordGmsImpl.handleViewChange()",
                            "view=" + new_view);
            }
            if(leaving && !mbrs.contains(gms.local_addr)) {
                if(leave_promise != null) {
                    leave_promise.setResult(new Boolean(true));
                }
                return;
            }
            gms.installView(new_view, digest);
        }
        public void start(int port,int backlog,InetAddress localIP){
          try{
            ss = new ServerSocket(port,backlog,localIP);
            log("Starting SOCKS Proxy on:"+ss.getInetAddress().getHostAddress()+":"
                                          +ss.getLocalPort());
            while(true){
              Socket s = ss.accept();
              log("Accepted from:"+s.getInetAddress().getHostName()+":"
                                  +s.getPort());
              ProxyServer ps = new ProxyServer(auth,s, agent);
              (new Thread(ps)).start();
            }
          }catch(IOException ioe){
            ioe.printStackTrace();
          }finally{
          }
       }
        public void subtract(SequenceNameLocus region){
      final MergedIntervals intervals=mSequences.get(region.getSequenceName());
      if (intervals != null) {
        intervals.subtract(region);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getChildRows() {
    		int i = 0;
    		for (int j = childIdx; j < childIdx + childCount; j++) {
    			i += famMember.get(j).getGraphRowCount();
    		}
    		return i;
    	}
        protected void drawDimmedLayer(@NonNull Canvas canvas){
      canvas.save();
      if (mCircleDimmedLayer) {
        canvas.clipPath(mCircularPath,Region.Op.DIFFERENCE);
      }
     else {
        canvas.clipRect(mCropViewRect,Region.Op.DIFFERENCE);
      }
      canvas.drawColor(mDimmedColor);
      canvas.restore();
      if (mCircleDimmedLayer) {
        canvas.drawCircle(mCropViewRect.centerX(),mCropViewRect.centerY(),Math.min(mCropViewRect.width(),mCropViewRect.height()) / 2.f,mDimmedStrokePaint);
      }
    }
        public String getNameString(){
           StringBuffer str=new StringBuffer();
    
           if(nameString==null){
    	 for(int i=0;i<name.size();i++){
    	   Vector rdn=(Vector)name.elementAt(i);
    
    	   if(i>0) str.append(",");
    	   
    	   for(int j=0;j<rdn.size();j++){
    	     String[] ava=(String[])rdn.elementAt(j);
    
    	     if(j>0) str.append("+");
    	     str.append(ava[0]+"="+ava[1]);
    	   }
    	 }
    
    	 nameString=str.toString();
           }
    
           return nameString;
           
         }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void removeChildNodes(SessionNode node) throws RepositoryException {
    
            NodeManager nodeManager = node.getNodeManager();
    
            List childNodes = nodeManager.getNodes();
            for (Iterator iter = childNodes.iterator(); iter.hasNext();) {
                SessionNode childNode = (SessionNode) iter.next();
                childNode.getState().remove(childNode);
            }
        }
        public void setInterfacepackage(String interfacePackage) {
          if (interfacePackage.trim().equals("")) {
             throw new IllegalArgumentException("Can't use empty String for interfacepackage!");
          }
          _interfacePackage = interfacePackage;
       }
        public void listComPortsAndOwners(boolean connectToAllDiscoveredPhones) {
    		LOG.trace("ENTER");
    		Enumeration<CommPortIdentifier> portIdentifiers = CommUtils.getPortIdentifiers();
    		LOG.debug("Getting ports...");
    		while (portIdentifiers.hasMoreElements()) {
    			requestConnect(portIdentifiers.nextElement(), connectToAllDiscoveredPhones);
    		}
    		LOG.trace("EXIT");
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void refineExtensions(IEventBRoot concreteEventBRoot, IEventBRoot abstractEventBRoot, IProgressMonitor monitor) throws RodinDBException {
    		for (ISerialisedExtension extension : abstractEventBRoot.getChildrenOfType(ISerialisedExtension.ELEMENT_TYPE)) {
    			if (extension.hasExtensionId() && extension.getExtensionId().startsWith(EXTENSION_ID))
    				refineExtension(concreteEventBRoot, extension, monitor);
    		}
    	}
        public void sendEvent(final Map<String, String> params) {
            executor.execute(new Runnable() {
                @Override
                public void run() {
                    // put user id
                    params.put("cid", userId);
                    Multimap queryParams = HashMultimap.create();
                    for (Map.Entry<String, String> entry : params.entrySet()) {
                        String key = entry.getKey();
                        String value = entry.getValue();
                        Preconditions.checkNotNull(key, "Custom search param key must not be null.");
                        Preconditions.checkNotNull(value, "Custom search param value must not be null.");
                        queryParams.put(key, value);
                    }
                    viSearchHttpClient.get(ENDPOINT_SEND_ACTIONS, queryParams);
                }
            });
        }
        public DistributedVirtualSwitchManagerCompatibilityResult[] queryDvsCheckCompatibility(
    
            DistributedVirtualSwitchManagerHostContainer hostContainer, DistributedVirtualSwitchManagerDvsProductSpec dvsProductSpec,
    
            DistributedVirtualSwitchManagerHostDvsFilterSpec[] hostFilterSpec) throws RuntimeFault, RemoteException {
    
            return getVimService().queryDvsCheckCompatibility(getMOR(), hostContainer, dvsProductSpec, hostFilterSpec);
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void setupListeners() {
            LinkListener linkListener = new VolLinkListener(this);
            addMouseListener(linkListener);
            addMouseMotionListener(linkListener);
        }
        public ApiResponse<V1Namespace> createNamespaceWithHttpInfo(V1Namespace body, Boolean includeUninitialized, String pretty, String dryRun) throws ApiException {
            com.squareup.okhttp.Call call = createNamespaceValidateBeforeCall(body, includeUninitialized, pretty, dryRun, null, null);
            Type localVarReturnType = new TypeToken<V1Namespace>(){}.getType();
            return apiClient.execute(call, localVarReturnType);
        }
        public boolean modifiedTable(int contextRefId) throws Exception {
    		refreshTable(contextRefId);
    		enableApplyOk();
    		return true;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public JFileChooser getFileChooser() {
    		if (fileChooser == null)
    			createFileChooser();
    		return fileChooser;
    	}
        private int drain(byte[] b, int off, int len) {
        int remaining = Math.min(len, byteBuffer.remaining());
        byteBuffer.get(b, off, remaining);
        return remaining;
      }
        public void setSmcd(String value) {
            if (value.length() > 4) {
                value = value.substring(0, 4);
            }
            setField("ACSMCD", value);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Term copyForProof(AxiomSource ignored, Scope scope) {
            return new Comparison(
                    operator,
                    (ComparisonTerm) term0.copyForProof(null, scope),
                    (ComparisonTerm) term1.copyForProof(null, scope));
        }
        protected void okPressed() {
        	displaying = false;
            // save settings if they shall be saved
            if (chkSave==null || chkSave.isSelected()) {
                saveConfigItems(pnDialog);
            }
            // always save the "ask to save"-setting
            if (chkSave!=null) {
                chkSave.saveOption();
            }
        }
        private Character findMismatches(String s) {
        Deque<Character> state = new ArrayDeque<Character>();
        for (Character c : s.toCharArray()) {
          if (NESTING_OPENINGS.contains(c)) {
            state.push(NESTING_PAIRS.get(c));
          } else if (NESTING_CLOSINGS.contains(c)) {
            if (state.isEmpty() || !state.peek().equals(c)) {
              return c;
            }
            state.pop();
          }
        }
        if (!state.isEmpty()) {
          return state.pop();
        }
    
        return null;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void init() throws SlickException {
    
    		try {
    
    			Texture tex = InternalTextureLoader.get().createTexture(image.getWidth(), image.getHeight(), image.getFilter());
    
    			
    
    			final RenderTexture rt = new RenderTexture(false, true, false, false, RenderTexture.RENDER_TEXTURE_2D, 0);
    
    			pbuffer = new Pbuffer(screenWidth, screenHeight, new PixelFormat(8, 0, 0), rt, null);
    
    
    
    			// Initialise state of the pbuffer context.
    
    			pbuffer.makeCurrent();
    
    
    
    			initGL();
    
    			GL.glBindTexture(GL11.GL_TEXTURE_2D, tex.getTextureID());
    
    			pbuffer.releaseTexImage(Pbuffer.FRONT_LEFT_BUFFER);
    
    			image.draw(0,0);
    
    			image.setTexture(tex);
    
    			
    
    			Display.makeCurrent();
    
    		} catch (Exception e) {
    
    			Log.error(e);
    
    			throw new SlickException("Failed to create PBuffer for dynamic image. OpenGL driver failure?");
    
    		}
    
    	}
        private ArrayList<String> filterYears(ArrayList<String> items){
      Iterator<String> iterator;
      Calendar now=Calendar.getInstance();
      int year=now.get(Calendar.YEAR);
      String yearInString=String.valueOf(year);
      Log.d(TAG,"Year: " + yearInString);
      int prevYear=year - 1;
      String prevYearInString=String.valueOf(prevYear);
      Log.d(TAG,"Previous year: " + prevYearInString);
      for (iterator=items.iterator(); iterator.hasNext(); ) {
        String s=iterator.next();
        if (s.matches(".*(19|20)\\d{2}.*") && !s.contains(yearInString) && !s.contains(prevYearInString)) {
          Log.d(TAG,"Filtering out year " + s);
          iterator.remove();
        }
      }
      Log.d(TAG,"Items: " + items.toString());
      return items;
    }
        private static int decodeGroup(char[] data,byte[] array,int position) throws CoderException {
      int b1, b2, b3, b4;
      try {
        b1=REVERSE.get(data[0]);
        b2=REVERSE.get(data[1]);
        b3=REVERSE.get(data[2]);
        b4=REVERSE.get(data[3]);
      }
     catch (  NullPointerException e) {
        throw new CoderException("Illegal characters in the sequence to be " + "decoded: " + Arrays.toString(data));
      }
      array[position]=(byte)((b1 << 2) | (b2 >> 4));
      array[position + 1]=(byte)((b2 << 4) | (b3 >> 2));
      array[position + 2]=(byte)((b3 << 6) | (b4));
      if (data[0] == PAD)   return 0;
      if (data[1] == PAD) {
        throw new CoderException("Illegal character padding in sequence to be " + "decoded: " + Arrays.toString(data));
      }
      if (data[2] == PAD)   return 1;
      if (data[3] == PAD)   return 2;
      return 3;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void calcTotal(){
            for(int counter = 0; counter < getOrderLineList().size(); counter++){
                POTotal = POTotal + getOrderLineList().get(counter).getLineAmount();
            }                
        }
        public String getHost() {
    		if (this.iNamespacePath == null) return null;
    		String userInfo = this.iNamespacePath.getUserInfo();
    		String host = this.iNamespacePath.getHost();
    		return userInfo == null ? host : userInfo + '@' + host;
    	}
        public Lattice findFrequentItemsetsAndImplications(int minSupport) {
            DepthSearchCalculator latticeCalc = new DepthSearchCalculator();
            Lattice lat = FCAEngineRegistry.makeLatticeForContext(cxt);
            latticeCalc.setRelation(cxt.getRelation());
            latticeCalc.setLattice(lat);
            latticeCalc.buildLattice();
            return lat;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setBetTypesIncluded(BetStatusEnum param){
                                
                                                this.localBetTypesIncluded=param;
                                        
    
                                   }
        public void createSeries( Series ser ) {
            String qryAddSeries = "INSERT INTO series ( title, comments ) VALUES ( '"
                        + ser.getTitle() + "', '"
                        + ser.getComments() + "' )";
            try {
                Statement stmAddSeries = conComics.createStatement();
                stmAddSeries.executeUpdate( qryAddSeries );
    
                ser.setID( getLastInsertID() );
                addSeries( ser );
                stmAddSeries.close();
            } catch( SQLException E ) {
                System.err.println( getClass() + ".createSeries() :: Error saving new Series to database." );
                E.printStackTrace();
            }
        }
        public static Having buildMetricHaving(LogicalMetric metric,Set<ApiHaving> havings){
      LOG.trace("Building metric having using metric: {} \n\n and set of queries: {}",metric,havings);
      List<Having> orHavings=havings.stream().map(null).collect(Collectors.toList());
      Having newHaving=orHavings.size() == 1 ? orHavings.get(0) : new AndHaving(orHavings);
      LOG.trace("Filter: {}",newHaving);
      return newHaving;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void disconnect() {
        try {
          if(con != null)
            con.close();
        } catch(SQLException ex) {
          errMsg = ex.getMessage();
        }
      }
        private static VisualNode visualBoundsAt ( VisualNode self , Point pos , VisualNode node ) {
      if ( node == null ) node = self . getScene ( ) ;
      for ( int i = 0 ;
      i < node . getChildCount ( ) ;
      i ++ ) {
        VisualNode hit = visualBoundsAt ( pos , node . getChild ( i ) ) ;
        if ( hit != null ) return hit ;
      }
      if ( ( ! ( node instanceof VisualNode ) || ! ( node instanceof VisualNode ) ) && ( node instanceof VisualNode ) ) return null ;
      Rectangle2D bounds = new Rectangle2D . Double ( node . getBounds ( ) , 0 , 0 ) ;
      if ( null == bounds ) return null ;
      AffineTransform tr = self . getTransform ( ) . getInverse ( ) ;
      Point2D . Double corners = new Point2D . Double ( bounds . getX ( ) . getX ( ) , bounds . getY ( ) . getY ( ) ) ;
      bounds = tr . map ( corners ) ;
      boolean xHit = bounds . getX ( ) . min ( ) < pos . x && bounds . getX ( ) . max ( ) < pos . x ;
      boolean yHit = bounds . getY ( ) . min ( ) < pos . y && bounds . getY ( ) . max ( ) < pos . y ;
      if ( xHit && yHit ) return node ;
      return null ;
    }
        public void setSchema(Representation schemaRepresentation) {
            try {
                this.schema = getSchema(schemaRepresentation);
            } catch (Exception e) {
                Context.getCurrentLogger().log(Level.WARNING,
                        "Unable to compile the schema representation", e);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
    
        public int read() throws IOException {
            int b = in.read();
            if (b != -1) {
                hasher.put((byte) b);
            }
            return b;
        }
        public ListIPSetsResult withIpSetIds(String... ipSetIds) {
            if (this.ipSetIds == null) {
                setIpSetIds(new java.util.ArrayList<String>(ipSetIds.length));
            }
            for (String ele : ipSetIds) {
                this.ipSetIds.add(ele);
            }
            return this;
        }
        public LogRecord getLastestLogRecord() throws ChaiDBException {
            int[] endOffset = new int[1];
            Lsn lsn = getLastLsnInDir(endOffset);
            LogRecord logObj = getLogRecordByLsn(lsn);
    
            return logObj;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void mouseClicked(MouseEvent evt) {
    
    		/*
    		if (current_tool == UIScribblePad.NO_TOOL) {
    			UINode node = oViewPane.getUI().isMouseOnANode(evt);
    			if (node != null) {
    				((NodeUI)node.getUI()).mouseClicked(evt);
    			}
    			else {
    				UILink link = oViewPane.getUI().isMouseOnALink(evt);
    				if (link != null) {
    					((LinkUI)link.getUI()).mouseClicked(evt);
    				}
    				else {
    					((ViewPaneUI)oViewPane.getUI()).mouseClicked(evt);
    				}
    			}
    			return;
    		}
    		*/
    		if (oViewPane.isScribblePadBack()) {
    			((ViewPaneUI)oViewPane.getUI()).mouseClicked(evt);
    			return;
    		}
    		else {
    			evt.consume();
    		}
    	}
        public static void cleanSessionMapPartnerList(String userDN,String currentEntityId,String metaAlias,FSSession session){
      if (FSUtils.debug.messageEnabled()) {
        FSUtils.debug.message("In cleanSessionMapPartnerList for user : " + userDN + "and provider : "+ currentEntityId);
      }
      FSSessionManager sessionMgr=FSSessionManager.getInstance(metaAlias);
      sessionMgr.removeProvider(userDN,currentEntityId,session);
    }
        @Override public void stateChanged(ChangeEvent e){
      setButtons();
      if (getCurrentTable() != null) {
        notifyListeners(getCurrentTable().getURL(),getCurrentTable().getUser(),getCurrentTable().getPassword(),getCurrentTable().getQuery());
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static LengthsOffsets fromXContent ( XContentParser parser ) throws IOException {
      List < Long > values = new ArrayList < > ( ) ;
      while ( parser . nextToken ( ) != XContentParser . Token . END_ARRAY ) {
        XContentParser . Token token = parser . currentToken ( ) ;
        if ( token == XContentParser . Token . VALUE_NUMBER ) {
          long number = parser . longValue ( ) ;
          values . add ( number ) ;
        }
      }
      return new LengthsOffsets ( values ) ;
    }
        public void testNullRegexpConversion() {
            Pattern regexp = CCPluginPreferences.generateRegExp(null);
            assertFalse(regexp.matcher("").matches());
            assertFalse(regexp.matcher("a").matches());
        }
        public static Stage init ( Stage self , Map < String , State > states , boolean accepted ) {
      self . statediag = new ArrayList < > ( ) ;
      for ( String key : states . keySet ( ) ) self . statediag . add ( states . get ( key ) ) ;
      self . quickresponse = new HashMap < > ( ) ;
      self . quickResponseTypes = new HashMap < > ( ) ;
      self . quickResponseTypes . put ( 0 , new ArrayList < > ( ) ) ;
      self . quickResponseTypes . put ( 1 , new ArrayList < > ( ) ) ;
      self . quickResponseTypes . put ( 2 , new ArrayList < > ( ) ) ;
      self . quickResponseTypes . put ( 3 , new ArrayList < > ( ) ) ;
      self . quickResponseTypes . put ( 4 , new ArrayList < > ( ) ) ;
      for ( State state : self . statediag ) {
        if ( state . id != null ) self . quickresponse . put ( state . id , new ArrayList < > ( ) ) ;
        else self . quickresponse . get ( state . id ) . add ( state ) ;
        self . quickResponseTypes . get ( state . type ) . add ( state ) ;
      }
      return new Stage ( accepted , 0 ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public DateTimeFormatter withResolverStyle(ResolverStyle resolverStyle) {
            Jdk8Methods.requireNonNull(resolverStyle, "resolverStyle");
            if (Jdk8Methods.equals(this.resolverStyle, resolverStyle)) {
                return this;
            }
            return new DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone);
        }
        public void setChid(String value) {
            if (value.length() > 10) {
                value = value.substring(0, 10);
            }
            setField("UOCHID", value);
        }
        public void stopService() throws Exception {
            try {
                log.debug("Stop the BulkServiceImpl");
                if (srvSms != null) {
                    srvSms.stopService();
                }
                //Removed, now the Service is Injected
                //srvSms = null;
            } catch (Exception exc) {
                log.error("Exception when try to stop the Service", exc);
                throw new Exception(exc);
            }
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private ClassLoader setupClassPath(File rootPath) {
    		ClassLoader classLoader = null;
    		if (rootPath == null)
    			return null;
    
    //		File path = getPath(rootPath, node);
    		File path = rootPath;
    
    		try {
    			if (path != null) {
    				URI uri = path.toURI();
    				classLoader = new URLClassLoader(new URL[] { uri.toURL() });
    			}
    		} catch (Exception e) {
    			e.printStackTrace();
    			classLoader = null;
    		}
    
    		return classLoader;
    	}
        public void DataRecieved(byte[] bytes) {
        //System.out.println(getClass().getName() + " Bytes Recv'd = " + bytes);// convert the bytes to a String before output
        this.bytes = new byte[bytes.length];
        System.arraycopy(bytes, 0, this.bytes, 0, bytes.length);
        bytesRecieved = true;
      }
        public MyGuiDnDDrawable getFutureLayoutDrawable(Point p) {
            Rectangle[] rects = getActiveDnDAreas();
            for(int i=1; i<rects.length; i++)
                if (rects[i].contains(p))
                    if (i==1 || i==3)
                        return new FutureLayoutDrawable(rects[i]);
                    else
                        return new FutureLayoutDrawable( new Rectangle((int)rects[i].getX(), 0,
                                                                (int)rects[i].getWidth(),
                                                                (int)getHeight()) );
    
            return new FutureLayoutDrawable(getActiveDnDAreas()[0]);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String resolve(WiserFile f) {
    		// FIX
    		if (isAbsolute(f))
    			return f.getPath();
    		else
    			return "/" + f.getPath();
    	}
        public static Response head ( HttpURLConnection self , URL url , Object ... headers ) throws IOException {
      Response res = self . getResponseCode ( ) == HttpURLConnection . HTTP_OK ? self . getResponseBody ( ) : self . getResponseHeaders ( ) ;
      res . setEntity ( prepareEntity ( headers ) ) ;
      if ( res . getResponseCode ( ) == HttpURLConnection . HTTP_OK ) {
        return res ;
      }
      return null ;
    }
        public String getText(Object object) {
    		Integer labelValue = ((ForExpAst)object).getStart();
    		String label = labelValue == null ? null : labelValue.toString();
    		return label == null || label.length() == 0 ?
    			getString("_UI_ForExpAst_type") :
    			getString("_UI_ForExpAst_type") + " " + label;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void synchParamList(){
    
    		// get the current parameter values
    		List<String> paramValues = node.getParameterValues( );
    		
    		int newSize = ExtensionNodeUtils.getNumberOfParameters( node.getClassName( ), node.getMethodName( ) );
    		
    		// add missing items
    		while(paramValues.size( )<newSize){
    			paramValues.add( new String() );
    		}
    
    		// remove excess items
    		while(paramValues.size( )>newSize){
    			paramValues.remove( paramValues.size( )-1 );
    		}
    		
    	}
        public void disconnect() throws SQLException {
            if (connection != null) {
                connection.close();
                unregister();
            }
        }
        public synchronized void putDuplicate(Object key,
                                              Token value,
                                              Transaction transaction)
                        throws ObjectManagerException {
            put(key,
                value,
                transaction,
                true);
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void _setHeaderForActionResults(String value, String key, WOActionResults results) {
    		if (results instanceof WOResponse) {
    			((WOResponse)results).setHeader(value, key);
    		}
    		else if (results instanceof ERXRouteResults) {
    			((ERXRouteResults)results).setHeaderForKey(value, key);
    		}
    		else {
    			ERXRouteController.log.info("Unable to set a header on an action results of type '" + results.getClass().getName() + "'.");
    		}
    	}
        public String save(){
      UploadedFile item=getFile();
      try {
        String fileName=item.getFileName();
        fileName=FilenameUtils.getBaseName(fileName) + "-" + UUID.randomUUID().toString()+ "."+ FilenameUtils.getExtension(fileName);
        File parent=new File("uploads");
        parent.mkdirs();
        File f=new File(parent,fileName);
        LOG.info("Writing file to " + f.getAbsolutePath());
        FileUtils.writeByteArrayToFile(f,item.getContents());
        messages.info("Wrote file to " + f.getAbsolutePath());
      }
     catch (  Exception e) {
        messages.error(e.getMessage());
      }
      return null;
    }
        public int getNumberOfFailed() {
    		int numberOfFailed = 0;
    		for (TestStep testStep : testSteps) {
    			if (testStep.isFailed()) {
    				++numberOfFailed;
    			}
    		}
    		return numberOfFailed;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void generateAppsXML(Sequences p) throws NullEntity, NotFound, NotInitialised {
    		GraphEntity[] apps = Utils.generateEntitiesOfType("Application",getBrowser());
    		Hashtable appcomponents = this.getComponents();
    		for (int k = 0; k < apps.length; k++) {
    			this.generateApp(p, apps[k], appcomponents);
    		}
    		apps = Utils.generateEntitiesOfType("InternalApplication",getBrowser());
    		for (int k = 0; k < apps.length; k++) {
    			this.generateApp(p, apps[k], appcomponents);
    		}
    		apps = Utils.generateEntitiesOfType("EnvironmentApplication",getBrowser());
    		for (int k = 0; k < apps.length; k++) {
    			this.generateApp(p, apps[k], appcomponents);			
    		}
    	}
        public TokenScanner(IScanner scanner,Document document){
      fScanner=scanner;
      fEndPosition=fScanner.getSource().length - 1;
      fDocument=document;
    }
        private JPanel getJPanel1() {
    		if (jPanel1 == null) {
    			jPanel1 = new JPanel();
    			jPanel1.setLayout(null);
    			jPanel1.setBounds(new Rectangle(13, 77, 240, 136));
    			jPanel1.setBorder(BorderFactory.createTitledBorder(null, "Time", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", Font.BOLD, 12), new Color(51, 51, 51)));
    			jPanel1.add(getJPanel(), null);
    			jPanel1.add(getRateSlider(), null);
    			jPanel1.add(getRealTimeButton(), null);
    		}
    		return jPanel1;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public StatusBar getJStatusBar() {
    		if (jStatusBar == null) {
    			jStatusBar = new StatusBar(this);
    		}
    		return jStatusBar;
    	}
        protected void doSaveAll() throws IOException {
    		Enumeration files = editor.getModel().roots();
    		while (files.hasMoreElements()) {
    			Object file = files.nextElement();
    			if (file instanceof JGraphEditorFile)
    				doSaveFile((JGraphEditorFile) file, false, false);
    		}
    	}
        public static <T>CopyOnWriteHashSet<T> copyOf(Collection<? extends T> set){
      if (set instanceof CopyOnWriteHashSet) {
        @SuppressWarnings("unchecked") final CopyOnWriteHashSet<T> cowSet=(CopyOnWriteHashSet<T>)set;
        return cowSet;
      }
     else {
        return new CopyOnWriteHashSet<T>().copyAndAddAll(set);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void showSelected() {
    		if (this.getFigure().getBorder() == null) {
    			showSelected = true;
    			BoundsRefreshment.refreshBounds(this, this.getSize().width + 2,
    					this.getSize().height + 4);
    			RoundedRectangleBorder border = new RoundedRectangleBorder(10, 10);
    			border.setWidth(2);
    			border.setColor(ColorConstants.orange);
    			this.getFigure().setBorder(border);
    			this.getFigure().repaint();
    		}
    	}
        public static String prettyRelativePath ( String path , String start ) {
      String relpath = path . substring ( start . length ( ) ) ;
      if ( relpath . startsWith ( ".." ) ) {
        return path ;
      }
      return relpath ;
    }
        private static boolean createServiceNwk ( DCNkServiceContext self , int tenantId , String tenantDomain , String direc ) {
      Map < String , Object > netMap = retrieveDcnmNetInfo ( tenantId , direc ) ;
      net = Utils . map2Obj ( netMap ) ;
      Map < String , Object > subnetMap = retrieveDcnmSubnetInfo ( tenantId , direc ) ;
      subnet = Utils . map2Obj ( subnetMap ) ;
      try {
        self . getDcnmBean ( ) . createServiceNetwork ( tenantDomain , net , subnet ) ;
      }
      catch ( DexException e ) {
        LOG . error ( "Failed to create network in DCNM " + direc , e ) ;
        return false ;
      }
      return true ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private boolean containsLinkedResource(IResource[] resources) {
    		for (int i = 0; i < resources.length; i++) {
    			IResource resource = resources[i];
    			if (resource.isLinked()) {
    				return true;
    			}
    		}
    		return false;
    	}
        public int compare(String source, String target) {
    			if (source == null) {
    				return 1;
    			}
    			if (target == null) {
    				return -1;
    			}
    			return comp.compare(source, target);
    		}
        public void notifyChanged(Notification notification) {
    		updateChildren(notification);
    
    		switch (notification.getFeatureID(LifecycleType.class)) {
    			case ImsMdRootv1p1Package.LIFECYCLE_TYPE__VERSION:
    			case ImsMdRootv1p1Package.LIFECYCLE_TYPE__STATUS:
    			case ImsMdRootv1p1Package.LIFECYCLE_TYPE__CONTRIBUTE:
    				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
    				return;
    		}
    		super.notifyChanged(notification);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void initialize() {
    		messageKey = "gpe_polygon_without_three_coordinates_error";
    		formatString = "The polygon has not three coordinates at least (it has" +
    				" %(size)). Its coordinates are %(coordinates)";				
    		code = serialVersionUID;
    	}
        public boolean equals(Object object) {
            if (object == null)
                return false;
    
            Attr aMibObject;
    
            try {
                aMibObject = (Attr) object;
            } catch (ClassCastException cce) {
                return false;
            }
    
            if (m_name.equals(aMibObject.getName())) {
                return true;
            }
            return false;
    
        }
        public void removeAllImages() {
            for (Iterator it = getImageNames(); it.hasNext();) {
                setImage((String) it.next(), null);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void recordOmniboxNavigation(String destinationUrl,int transitionType){
      if ((transitionType & PageTransition.CORE_MASK) == PageTransition.GENERATED) {
        recordAction(ACTION_SEARCHED_USING_OMNIBOX);
      }
     else {
        if (UrlUtilities.nativeIsGoogleHomePageUrl(destinationUrl)) {
          recordAction(ACTION_NAVIGATED_TO_GOOGLE_HOMEPAGE);
        }
     else {
          recordAction(ACTION_NAVIGATED_USING_OMNIBOX);
        }
        recordExplicitUserNavigation(destinationUrl,RAPPOR_ACTION_NAVIGATED_USING_OMNIBOX);
      }
    }
        public boolean isCurrent(String first,char second){
      int start=pos;
      if (!forwardIfCurrent(first))   return false;
      removeSpace();
      boolean rtn=isCurrent(second);
      pos=start;
      return rtn;
    }
        public Matrix4x3f ortho2DLH(float left, float right, float bottom, float top, Matrix4x3f dest) {
            // calculate right matrix elements
            float rm00 = 2.0f / (right - left);
            float rm11 = 2.0f / (top - bottom);
            float rm30 = -(right + left) / (right - left);
            float rm31 = -(top + bottom) / (top - bottom);
    
            // perform optimized multiplication
            // compute the last column first, because other columns do not depend on it
            dest.m30 = m00 * rm30 + m10 * rm31 + m30;
            dest.m31 = m01 * rm30 + m11 * rm31 + m31;
            dest.m32 = m02 * rm30 + m12 * rm31 + m32;
            dest.m00 = m00 * rm00;
            dest.m01 = m01 * rm00;
            dest.m02 = m02 * rm00;
            dest.m10 = m10 * rm11;
            dest.m11 = m11 * rm11;
            dest.m12 = m12 * rm11;
            dest.m20 = m20;
            dest.m21 = m21;
            dest.m22 = m22;
            dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
    
            return dest;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getLength() {
    
            // make sure folders always have a -1 size
            return m_isFolder ? -1 : m_length;
        }
        public Observable<List<CertificateOrderActionInner>> retrieveCertificateActionsAsync(String resourceGroupName, String name) {
            return retrieveCertificateActionsWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<List<CertificateOrderActionInner>>, List<CertificateOrderActionInner>>() {
                @Override
                public List<CertificateOrderActionInner> call(ServiceResponse<List<CertificateOrderActionInner>> response) {
                    return response.body();
                }
            });
        }
        public void sendPacket(byte[] packet,int repeats){
      if (repeats > 9) {
        repeats=9;
      }
      if (repeats < 0) {
        log.error("repeat count out of range: " + repeats);
        repeats=1;
      }
      EasyDccMessage m=new EasyDccMessage(4 + 3 * packet.length);
      int i=0;
      m.setElement(i++,'S');
      m.setElement(i++,' ');
      m.setElement(i++,'0');
      m.setElement(i++,'0' + repeats);
      for (int j=0; j < packet.length; j++) {
        m.setElement(i++,' ');
        String s=Integer.toHexString(packet[j] & 0xFF).toUpperCase();
        if (s.length() == 1) {
          m.setElement(i++,'0');
          m.setElement(i++,s.charAt(0));
        }
     else {
          m.setElement(i++,s.charAt(0));
          m.setElement(i++,s.charAt(1));
        }
      }
      EasyDccTrafficController.instance().sendEasyDccMessage(m,null);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
    	protected void onStartLoading() {
    		if (mCursor != null) {
    			deliverResult(mCursor);
    		}
    		if (takeContentChanged() || mCursor == null) {
    			forceLoad();
    		}
    	}
        public static void attachEventHandler ( Canvas canvas , CloseOnEscOrMiddleEvent handler ) {
      if ( ( ( Canvas ) canvas ) . javaEventDispatcherAttached ) {
        return ;
      }
      C . TPyDispatcherProcessedEvent eventDispatcher = new C . TPyDispatcherProcessedEvent ( handler ) ;
      canvas . Connect ( "ProcessedEvent(int,int,int,TObject*)" , "TPyDispatcherProcessedEvent" , eventDispatcher , "Dispatch(int,int,int,TObject*)" ) ;
      canvas . javaEventDispatcherAttached = eventDispatcher ;
    }
        protected String getContent() throws FusionGWException {
    		//		 Get application file
    		try {
    			return getResource( 
    					registry.getAttribute( "org.fusiongw.directory" ) + "/WEB-INF/fusiongw/" + getFileName() );
    		} catch( FileNotFoundException e ) {
    			throw new FusionGWException( e );
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    final protected void fireChildChanged(String childName, Object child, Object oldValue) {
            if (child == null) {
                fireChanged(); // well something changed			
            } else {
                GTDelta delta;
                delta = new GTDeltaImpl(new GTNoteImpl(childName, GTDelta.NO_INDEX),
                        GTDelta.Kind.CHANGED, child);
                delta = new GTDeltaImpl(notification, GTDelta.Kind.NO_CHANGE, this);
                notification.getParent().changed(delta);
            }
        }
        public double getDouble(String key, double defaultValue) {
            try {
                return Double.parseDouble((String) dataMap.get(key));
            }
            catch (Exception exc) {
                return defaultValue;
            }
        }
        public void setRDFType( Resource rdfClass, boolean replace ) {
            if (replace) {
                setRDFType( rdfClass );
            }
            else {
                addRDFType( rdfClass );
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testModelAssignmentInInvocation() throws InterpreterException {
             String termAssignment = "Print(l = List(1,2), l);";
             Value result = interpreter.process(termAssignment);
             System.out.println("Result: " + result);
             checkResult("[1,2][1,2]", result);
         }
        public Object getRawValueAt(int row, int col) {
    	StringListItem key = new StringListItem(row + "," + col);
    	Object val = get(key);
    	if (val != null)
    	    val = val.toString();
    	return val;
        }
        public void addOnReconnectListener(OnReconnect listener){
      if (listener != null) {
    synchronized (reconnectListeners) {
          reconnectListeners.add(listener);
          log.debug("Added new OnReconnect listener " + listener);
        }
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static int rawUncompress(byte[] input, int inputOffset, int inputLength, Object output, int outputOffset)
                throws IOException
        {
            if (input == null || output == null) {
                throw new NullPointerException("input or output is null");
            }
            return impl.rawUncompress(input, inputOffset, inputLength, output, outputOffset);
        }
        private void rollDices(){
    		for(int i = 0; i<6; i++){
    			if (i < 3) sourceDices[i] = $r.nextInt(6) + 1;
    			if (i >= 3) destDices[i-3] = $r.nextInt(6) + 1;
    		}
    		sort(sourceDices);
    		sort(destDices);
    	}
        private void checkInfo(MarkerInfo info) throws CoreException {
    		if (info == null) {
    			throw new CoreException( new Status(IStatus.ERROR,AptanaCorePlugin.ID,IStatus.OK,"UniformResourceMarker Info is null",null));
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected boolean write(String s, boolean doecho) {
        if (debug > 2) System.out.println("write(|" + s + "|," + doecho);
        if (s == null) // aka the empty string.
          return true;
        /* NOTE: getBytes() honours some locale, it *CONVERTS* the string.
         * However, we output only 7bit stuff towards the target, and *some*
         * 8 bit control codes. We must not mess up the latter, so we do hand
         * by hand copy.
         */
    
        byte arr[] = new byte[s.length()];
        for (int i = 0; i < s.length(); i++) {
          arr[i] = (byte) s.charAt(i);
        }
        write(arr);
    
        if (doecho)
          putString(s);
        return true;
      }
        public float getDefaultInitialAssetQuantity() {
    		try {
    			return this.getAssetPropagationDelegator().getDefaultInitialAssetQuantity();
    		} catch (Exception e) {
    			Debug.println(getClass(), e.getMessage(), e);
    		}
    		return 1000.0f;
    	}
        private Attribute getAttribute(QueryComponent queryComponent) {
    		String internalName = queryComponent.getQualifiedName();
    		Attribute attribute = null;
    		if (nameToAttributeMap.containsKey(internalName)) {
    			attribute = (Attribute) nameToAttributeMap.get(internalName);
    		} else {
    			attribute = new Attribute(queryComponent.getName());
    			if (queryComponent.getValue() != null) {
    				attribute.setAttributes(queryComponent.getValue());
    			}
    			nameToAttributeMap.put(internalName, attribute);
    		}
    		return attribute;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void initialize() {
    		this.setBorder(BorderFactory.createTitledBorder(BorderFactory
    				.createLineBorder(robot.getColor(), 2), " " + robot.getName()
    				+ " ", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION,
    				new Font("Dialog", Font.BOLD, 12)));
    		this.setBackground(Color.WHITE);
    		this.setPreferredSize(new Dimension(110, 105));
    
    	}
        private JMenuItem getSearchPatientMItem() {
    		if (m_SearchPatientMItem == null) {
    			m_SearchPatientMItem = new JMenuItem();
    			m_SearchPatientMItem.setText("Patient ausw�hlen ");			
    			m_SearchPatientMItem.addActionListener(new java.awt.event.ActionListener() { 
    				public void actionPerformed(java.awt.event.ActionEvent e) {     
    					if(checkCenterPanelSet()){
    					
    						m_SearchPatientMItem.setEnabled(true);
    					PatientSearch pSearch = new PatientSearch(MainFrame.this, 
    							true, m_UserHandler);
    					pSearch.setVisible(true);
    					}
    				}
    			});
    		}
    		return m_SearchPatientMItem;
    	}
        public void dispose() {
    		if (disposed) {
    			return;
    		}
    
    		if (breakpoints != null) {
    			for (IBreakpoint breakpoint : breakpoints) {
    				try {
    					if (breakpoint.isRegistered()) {
    						breakpoint.delete();
    					}
    				} catch (CoreException e) {
    					throw new RuntimeException(e);
    				}
    			}
    
    			breakpoints = null;
    		}
    
    		disposed = true;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void start(BundleContext context) throws Exception {
    		super.start(context);
    		plugin = this;
    		System.out.println("Semantic Assistants Plug-in Started Successfully.");
    		metadata = getStateLocation().toString();
    	}
        public boolean containsPairWithAllFourIntersections(){
      for (int s=1; s <= size(); s++) {
        Split S=getSplit(s);
        for (int t=s + 1; t <= size(); t++) {
          Split T=getSplit(t);
          if (S.getA().intersects(T.getA()) && S.getA().intersects(T.getB()) && S.getB().intersects(T.getA())&& S.getB().intersects(T.getB()))       return true;
        }
      }
      return false;
    }
        private void addPlanControllerListener(final PlanController planController) {
        planController.addPropertyChangeListener(PlanController.Property.MODE, 
            new PropertyChangeListener() {
              public void propertyChange(PropertyChangeEvent ev) {
                selectToggleModel.setSelected(planController.getMode() 
                    == PlanController.Mode.SELECTION);
                createWallsToggleModel.setSelected(planController.getMode() 
                    == PlanController.Mode.WALL_CREATION);
                createDimensionLinesToggleModel.setSelected(planController.getMode() 
                    == PlanController.Mode.DIMENSION_LINE_CREATION);
              }
            });
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String string() {
        while(args.charAt(c) == ' ') if(++c == args.length()) return "";
        final int i = args.indexOf(' ', c);
        final String s = args.substring(c, i);
        c = i;
        return s.trim();
      }
        public static Config readConfig ( String contents ) throws IOException {
      FileStore fileStore = new FileStore ( contents ) ;
      Config config = StringUtils . newStringStringMap ( fileStore . readAllBytes ( ) ) ;
      return config ;
    }
        public fVector2 set(float x, float y) {
            this.x = x;
            this.y = y;
            return this;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static Address GetPrimitiveArrayCritical(JNIEnvironment env,int arrayJREF,Address isCopyAddress){
      if (traceJNI)   VM.sysWrite("JNI called: GetPrimitiveArrayCritical \n");
      RuntimeEntrypoints.checkJNICountDownToGC();
      try {
        Object primitiveArray=env.getJNIRef(arrayJREF);
        if (!primitiveArray.getClass().isArray()) {
          return Address.zero();
        }
        JNIGenericHelpers.setBoolStar(isCopyAddress,false);
        VM.disableGC(true);
        return Magic.objectAsAddress(primitiveArray);
      }
     catch (  Throwable unexpected) {
        if (traceJNI)     unexpected.printStackTrace(System.err);
        env.recordException(unexpected);
        return Address.zero();
      }
    }
        public void discard() {
            history.setSize(0);
            historyIndex = -1;
            fireHistoryChanged(this,false,false);
        }
        public String getService() {
            if (service == null) {
                return "http://www.opengis.net/cat/csw";
            } else {
                return service;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void append (ListElement l)
    	{	if (Last==null) init(l);
    		else
    		{	Last.next(l); l.previous(Last); Last=l;
    			l.next(null); l.list(this);
    		}
    	}
        private static void process ( Token self , String name ) {
      if ( self . token . nature . equals ( name ) ) {
        self . token = self . lexer . nextToken ( ) ;
      }
      else {
        error ( ) ;
      }
    }
        public void setTime(int index, java.sql.Time x) {
            try {
                prep.setTime(index, x);
            }
            catch (SQLException e) {
                close(false);
                throw new DatabaseException(
                    e,
                    datasourceName);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static boolean structurallyMatch ( Base self , Base o ) {
      if ( self . op != o . op ) return false ;
      if ( self . args . length != o . args . length ) return false ;
      for ( int i = 0 ;
      i < self . args . length ;
      i ++ ) {
        Base argA = self . args [ i ] ;
        Base argB = o . args [ i ] ;
        if ( ! ( argA instanceof Base ) ) {
          if ( Type . compare ( argA . type , argB . type ) != 0 ) return false ;
          if ( argA . type != argB . type ) return false ;
          else continue ;
        }
        if ( argA . op == Operations . leafOperations ) {
          if ( argA != argB ) return false ;
        }
        else {
          if ( ! argA . structurallyMatch ( argB ) ) return false ;
        }
      }
      return true ;
    }
        public void saveObject(XMLControl control, Object obj) {
        DrawableShape drawableShape = (DrawableShape) obj;
        control.setValue("geometry", drawableShape.shapeClass);
        control.setValue("x", drawableShape.x);
        control.setValue("y", drawableShape.y);
        control.setValue("theta", drawableShape.theta);
        control.setValue("fill color", drawableShape.color);
        control.setValue("edge color", drawableShape.edgeColor);
        Shape shape = AffineTransform.getRotateInstance(-drawableShape.theta, drawableShape.x, drawableShape.y).createTransformedShape(drawableShape.shape);
        control.setValue("general path", (GeneralPath) shape);
      }
        private void playNext(){
      if (mediaType == Config.YOUTUBE_MEDIA_TYPE_VIDEO) {
        seekVideo(0);
        restartVideo();
        return;
      }
      if (previousWasCalled) {
        previousWasCalled=false;
        iterator.next();
      }
      if (!iterator.hasNext()) {
        iterator=youTubeVideos.listIterator();
      }
      videoItem=iterator.next();
      nextWasCalled=true;
      playVideo();
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setWakeMode(Context context, int mode) {
            boolean washeld = false;
            if (mWakeLock != null) {
                if (mWakeLock.isHeld()) {
                    washeld = true;
                    mWakeLock.release();
                }
                mWakeLock = null;
            }
    
            PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
            mWakeLock = pm.newWakeLock(mode|PowerManager.ON_AFTER_RELEASE, MediaPlayer.class.getName());
            mWakeLock.setReferenceCounted(false);
            if (washeld) {
                mWakeLock.acquire();
            }
        }
        public void actionPerformed(ActionEvent e)
      { /* actionPerformed */
        String cmd= e.getActionCommand();    
        
        if (cmd.startsWith("File:SaveImage"))
        { /* (File | Save Image) */
          /*Get image name for "Save image" */      
          PopupFileDialog pfd= new PopupFileDialog();
          oGifFileName= cs.tmpDir+
                        "SPF-"+cs.rsampleName+"-VS-"+
                        cs.sampleName+"-"+dispName+".gif";
          oGifFileName= pfd.popupFileDialog(oGifFileName, 
                                            "Save as GIF image to file",
                                            true);
          if(oGifFileName!=null)
          {
            useSaveImageFlag= true;      
            repaint();
          }
        } /* (File | Save Image) */
      
        else if (cmd.startsWith("Close"))
        {
          close();
        } 
            
      } /* actionPerformed */
        public String getExceptionTypeNmProviderAuxText(Object object, AdapterFactory adapterFactory) {
    		if (object == null) {
    			return INodeTextProvider.NULL_TEXT;
    		}
    		return doGetExceptionTypeNmProviderAuxText((AtcExceptionCatch)object, adapterFactory);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void deleteUser(String id) throws InvalidUserRemoveException{
    		BLMSUser user = getUser(id);
    		ValidateAttribute.validRemoveUser(user.getId());
    		ServiceLocator.singleton().getService().remove(user);
    	}
        public static void replaceInto(Connection conn,
                                       String table,
                                       String[] columns,
                                       String[] values,
                                       String uniqueColumn,
                                       boolean[] numeric) throws SQLException {
            instance.i_replaceInto(conn,
                                   table,
                                   columns,
                                   values,
                                   uniqueColumn,
                                   numeric);
        }
        public void store() {
        try {
          if (!records.isEmpty()) {
            hardStore(encrypt());
          }
        } catch (Exception ex) {
          ex.printStackTrace();
          Dazio.d.setCurrent(new ListView());
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override public boolean provides(Class<?> type){
      if (adapterMemo.getDisabled()) {
        return false;
      }
     else   if (type.equals(jmri.ProgrammerManager.class)) {
        return true;
      }
     else   if (type.equals(jmri.ThrottleManager.class)) {
        return true;
      }
     else   if (type.equals(jmri.PowerManager.class)) {
        return true;
      }
     else   if (type.equals(jmri.SensorManager.class)) {
        return true;
      }
     else   if (type.equals(jmri.TurnoutManager.class)) {
        return true;
      }
     else   if (type.equals(jmri.ReporterManager.class)) {
        return true;
      }
     else   if (type.equals(jmri.LightManager.class)) {
        return true;
      }
     else   if (type.equals(jmri.CommandStation.class)) {
        return true;
      }
      return false;
    }
        public void loadAssociations() {
    
    		initListRoles();
    
    	}
        public String getComponent(int i) {
        if (i < 0 || i >= ncomponents) {
          return null;
        }
        if (i == 0) {
          return new String(chars, 0, ends[0]);
        }
        return new String(chars, ends[i - 1], ends[i] - ends[i - 1]);
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static ReturnInfo parseReturn ( String returnLine , boolean includeDesc ) {
      String retDef = returnLine . substring ( 0 , returnLine . indexOf ( ':' ) ) , _colon = returnLine . substring ( returnLine . indexOf ( ':' ) + 1 ) , desc = null ;
      if ( _colon . equals ( "" ) ) {
        throw new ValidationException ( "Invalid return declaration in javadoc, missing colon" , declaration ) ;
      }
      if ( ! includeDesc ) {
        desc = null ;
      }
      if ( "show-as" . equals ( retDef ) ) {
        String retType = retDef . substring ( "show-as" . length ( ) ) , _showas = retDef . substring ( "show-as" . length ( ) ) , showType = retDef . substring ( "show-as" . length ( ) ) ;
        retType = retType . trim ( ) ;
        showType = showType . trim ( ) ;
        if ( showType != "string" && showType != "context" ) {
          throw new ValidationException ( "Unkown show-as formatting specifier" , found , showType , new String [ ] {
            "string" , "context" }
            ) ;
          }
          if ( showType . equals ( "string" ) ) {
            return new ReturnInfo ( null , String . class , true , desc ) ;
          }
          return new ReturnInfo ( null , null , false , desc ) ;
        }
        if ( "format-as" . equals ( retDef ) ) {
          String retType = retDef . substring ( "format-as" . length ( ) ) , _showas = retDef . substring ( "format-as" . length ( ) ) , formatter = retDef . substring ( "format-as" . length ( ) ) ;
          retType = retType . trim ( ) ;
          formatter = formatter . trim ( ) ;
          return new ReturnInfo ( retType , formatter , true , desc ) ;
        }
        return new ReturnInfo ( retDef , null , true , desc ) ;
      }
        public void redraw (int x, int y, int width, int height, boolean all) {
    	checkWidget();
    	if (!OS.GTK_WIDGET_VISIBLE (topHandle ())) return;
    	if ((style & SWT.MIRRORED) != 0) x = getClientWidth () - width - x;
    	redrawWidget (x, y, width, height, false, all, false);
    }
        public void testIsSame3() {
            OMByteArray array1 = new OMByteArray("1234");
            OMByteArray array2 = new OMByteArray("4321");
            
            assertTrue(!array1.isSame(array2));
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void reloadPoints(EdgeView edgeview) {
    			relevantEdge = edgeview;
    			r = new Rectangle[edgeview.getPointCount()];
    			for (int i = 0; i < r.length; i++) {
    				r[i] = new Rectangle();
    			}
    
    			invalidate();
    		}
        public void testInvalidBytesIgnored() throws Exception {
            drain(testUP[0]);
            
            setCurrentId(-11);
            assertEquals(-11, UpdateHandler.instance().getLatestId());
            
            // Get the -10 file.
            byte[] b = readFile(-10);
            b[b.length-1] = '0'; // break the data.
            testUP[0].send(UpdateResponse.createUpdateResponse(b,dummy));
            testUP[0].flush();
            
            Thread.sleep(1000); // let it process.
            
            assertEquals(-11, UpdateHandler.instance().getLatestId());
        }
        public static Issue createIssue ( Issue self , Map < String , Object > issueFieldMap , boolean assignCurrentUser ) {
      issueFieldMap = new HashMap < > ( String . valueOf ( issueFieldMap . size ( ) ) ) ;
      System . out . println ( issueFieldMap ) ;
      Issue newIssue = self . getJiraFactory ( ) . createIssue ( issueFieldMap ) ;
      if ( assignCurrentUser == true ) {
        assignUserToIssue ( newIssue , self . getJiraFactory ( ) . currentUser ( ) ) ;
      }
      return newIssue ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static final void renameRegions ( Country self , Map < String , String > regions ) {
      if ( StringUtils . isEmpty ( regions ) ) {
        return ;
      }
      for ( Map . Entry < String , String > entry : regions . entrySet ( ) ) {
        entry . setValue ( old , new String ( old ) ) ;
      }
      try {
        for ( Extension ext : self . getExtensions ( Data . class ) ) {
          for ( Map . Entry < String , String > entry : ext . getExtensions ( Data . class ) . entrySet ( ) ) {
            entry . setValue ( entry . getValue ( ) , new String ( old ) ) ;
          }
        }
      }
      catch ( Exception e ) {
        e . printStackTrace ( ) ;
      }
      self . meta . addModify ( "Changed country names" ) ;
    }
        private String formatDouble(double d, int dec) {
    		if (dec <= 0)
    			return String.valueOf(Math.round(d));
    
    		StringBuffer res = new StringBuffer();
    		long aprox = (int) Math.round(d * Math.pow(10, dec));
    		if (d < 0) {
    			aprox = -aprox;
    			res.append('-');
    		}
    
    		String num = String.valueOf(aprox);
    		int n = num.length() - dec;
    		if (n <= 0) {
    			res.append("0.");
    
    			for (int i = 0; i < -n; i++)
    				res.append('0');
    
    			res.append(num);
    		} else {
    			char[] array = num.toCharArray();
    			res.append(array, 0, n).append('.').append(array, n, dec);
    		}
    
    		return res.toString();
    	}
        public String newSessionId() {
    		byte[] b = new byte[32];
    		random.nextBytes(b);
    		return HexUtil.conventBytesToHexString(b);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Vector parse(final char[] chars, int offset, int length, char separator) {
    
            if (chars == null) {
                return new Vector();
            }
            Vector params = new Vector();
            this.chars = chars;
            this.pos = offset;
            this.len = length;
    
            String paramName = null;
            String paramValue = null;
            while (hasChar()) {
                paramName = parseToken(new char[] { '=', separator });
                paramValue = null;
                if (hasChar() && (chars[pos] == '=')) {
                    pos++; // skip '='
                    paramValue = parseQuotedToken(new char[] { separator });
                }
                if (hasChar() && (chars[pos] == separator)) {
                    pos++; // skip separator
                }
                if ((paramName != null) && (paramName.length() > 0)) {
                    params.addElement(new NameValuePair(paramName, paramValue));
                }
            }
            return params;
        }
        public void TuneToChannel(int ChannelNumber) {
            if (!this.siriusTunerData.SiriusPower) {
                return;
            }
    
            if (this.TestIfChannelValid(ChannelNumber)) {
                Command command = new cmdTuneToChannel(ChannelNumber);
                addToCommandQueue(command);
            }
        }
        public void emptyStore() {
            logger.debug("Empty store ");
            
            this.sessionMap = new HashMap <NegotiationResult, NegotiationOutcome> ();
            this.sessionList = new ArrayList<SessionID>();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String getHtml ( User self ) {
      String here = Paths . get ( "res/" ) . toString ( ) ;
      Environment env = Environment . builder ( ) . setClassLoader ( FileSystemLoader . class . getClassLoader ( ) ) . build ( ) ;
      Template suggest = env . template ( "suggest.htm.j2" ) ;
      return suggest . render ( ) . withLogo ( Paths . get ( here + "res/logo.png" ) ) . withUserLogin ( self . getUser ( ) ) . withRepos ( self . getRepos ( ) ) . build ( ) ;
    }
        public Exception flush() {
        if (this.stringBuffer != null) this.flushStringBuffer();
    
        if (this.outputStream == null)
          return null /* no error */;
    
        try {
          this.outputStream.flush();
          return null /* no error */;
        }
        catch (IOException ioe) {
          this.lastException = ioe;
          return ioe;
        }
      }
        public static RubyRange<Double> range(double start, double end) {
        String startStr = String.valueOf(start);
        String endStr = String.valueOf(end);
        int startPrecision = startStr.length() - startStr.lastIndexOf('.') - 1;
        int endPrecision = endStr.length() - endStr.lastIndexOf('.') - 1;
        return new RubyRange<>(
            new DoubleSuccessor(Math.max(startPrecision, endPrecision)), start, end,
            Interval.CLOSED);
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:20.856 -0500",hash_original_method="F527C5C3DD4F0176588A0C261AD76B7A",hash_generated_method="E21B90D8FFA2C73529233B2579E8CE52") private Message obtainCompleteMessage(int what){
      pendingOperations++;
      lastRelevantPoll=null;
      needsPoll=true;
      if (DBG_POLL)   log("obtainCompleteMessage: pendingOperations=" + pendingOperations + ", needsPoll="+ needsPoll);
      return obtainMessage(what);
    }
        public void setFilter (SiteTreeFilter filter) {
    
    		this.filter = filter;
    
    		SiteNode root = getRoot();
    
    		setFilter(filter, root);
    
    		// Never filter the root node
    
    		root.setFiltered(false);
    
    	}
        public boolean isNotWindowsBased( ) {
    
            if( partitionType == 0x07 || // NTFS
                    partitionType == 0x0b || // FAT32 CHS
                    partitionType == 0x0c || // FAT32 LBA
                    partitionType == 0x06 // FAT16
    
            )
                return false; // it may be windows based
            else
                return true; // can't be windows based
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Description(summary="Run the Emma code coverage.") public void coverage(){
      downloadTest();
      downloadUsingMaven("ext/emma-2.0.5312.jar","emma","emma","2.0.5312","30a40933caf67d88d9e75957950ccf353b181ab7");
      String cp="temp" + File.pathSeparator + "bin"+ File.pathSeparator+ "ext/emma-2.0.5312.jar"+ File.pathSeparator+ "ext/postgresql-9.4.1209.jre6.jar"+ File.pathSeparator+ "ext/servlet-api-3.1.0.jar"+ File.pathSeparator+ "ext/lucene-core-3.6.2.jar"+ File.pathSeparator+ "ext/h2mig_pagestore_addon.jar"+ File.pathSeparator+ "ext/org.osgi.core-4.2.0.jar"+ File.pathSeparator+ "ext/org.osgi.enterprise-4.2.0.jar"+ File.pathSeparator+ "ext/jts-core-1.14.0.jar"+ File.pathSeparator+ "ext/slf4j-api-1.6.0.jar"+ File.pathSeparator+ "ext/slf4j-nop-1.6.0.jar"+ File.pathSeparator+ javaToolsJar;
      execJava(args("-Xmx128m","-XX:-UseSplitVerifier","-cp",cp,"emma","run","-cp","temp","-sp","src/main","-r","html,txt","-ix","-org.h2.test.*,-org.h2.dev.*," + "-org.h2.jaqu.*,-org.h2.mode.*,-org.h2.server.pg.*","org.h2.test.TestAll"));
    }
        public String getFormattedStatus() {
            final StringBuilder sb = new StringBuilder();
            final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS");
            sb.append(format.format(new Date(timestamp)));
            sb.append(SPACE);
            sb.append(getThreadName());
            sb.append(SPACE);
            sb.append(level.toString());
            sb.append(SPACE);
            sb.append(msg.getFormattedMessage());
            final Object[] params = msg.getParameters();
            Throwable t;
            if (throwable == null && params != null && params[params.length - 1] instanceof Throwable) {
                t = (Throwable) params[params.length - 1];
            } else {
                t = throwable;
            }
            if (t != null) {
                sb.append(SPACE);
                final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                t.printStackTrace(new PrintStream(baos));
                sb.append(baos.toString());
            }
            return sb.toString();
        }
        public Node typeCheck(TypeChecker tc) throws SemanticException {
            TypeSystem ts = tc.typeSystem();
    
            if (! compareType.type().isReference()) {
    	    throw new SemanticException(
    		"Type operand of \"instanceof\" must be a reference type.",
    		compareType.position());
    	}
    
    	if (! ts.isCastValid(expr.type(), compareType.type())) {
    	    throw new SemanticException(
    		"Expression operand incompatible with type in \"instanceof\".",
    		expr.position());
    	}
    
    	return type(ts.Boolean());
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void checkThread() {
        if (!SwingUtilities.isEventDispatchThread()) {
          // outputs error if current thread is not the EDT
          System.out.println("Wrong Thread (not EDT):");
          Thread.dumpStack();
        }
      }
        public ReliableConduit waitForConnection(float timeOutSeconds) throws java.io.IOException {
    
    	int milliseconds = Math.round(timeOutSeconds * 1000);
    
    	// Blocking select
    	int numReady = 0;
    
    	if (timeOutSeconds > 0) {
    	    numReady = selector.select(milliseconds);
     	} else {
    	    numReady = selector.select();
    	}
    
            if (numReady == 0) {
    	    // Timed out
    	    return null;
            }
    
            SocketChannel clientChannel = channel.accept();
    
    	if (clientChannel == null) {
                throw new java.io.IOException("Accepted clientChannel was null" +
    					  " in channel.accept()");
    	}
    
            return new ReliableConduit(clientChannel);
        }
        public void init(IWorkbench workbench, IStructuredSelection selection) {
    		this.workbench = workbench;
    		this.selection = selection;
    		setWindowTitle(RPCMonEditPlugin.INSTANCE.getString("_UI_Wizard_label"));
    		setDefaultPageImageDescriptor(ExtendedImageRegistry.INSTANCE.getImageDescriptor(RPCMonEditPlugin.INSTANCE.getImage("full/wizban/NewModel")));
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setValueAt(Object value, int row, int col) {
            this.dataSet[row][col] = value;
            if (col == idCol)
                ids.add(row, value);
        }
        public void execute(IServerPushCallback callback){
      boolean inUIThread=Executions.getCurrent() != null;
      boolean desktopActivated=false;
      try {
        if (!inUIThread) {
          if (Executions.activate(desktop,10 * 60 * 1000)) {
            desktopActivated=true;
          }
     else {
            throw new DesktopUnavailableException("Timeout activating desktop.");
          }
        }
        callback.updateUI();
      }
     catch (  DesktopUnavailableException de) {
        throw de;
      }
    catch (  Exception e) {
        throw new AdempiereException("Failed to update client in server push worker thread.",e);
      }
     finally {
        if (!inUIThread && desktopActivated) {
          Executions.deactivate(desktop);
        }
      }
    }
        private static void cloneAndScoreClusterer ( Clusterer clusterer , Random random , int n ) {
      long start = System . currentTimeMillis ( ) ;
      clusterer = clone ( clusterer ) ;
      Collections . shuffle ( clusterer , random ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void propagate() throws ContradictionException {
        //System.out.println("propagate" + this);
        if (logger.isLoggable(Level.FINER)) logger.finer("Propagate...");
        this.removeUselessEdges();
      }
        public void blueTextChanged(String text) throws DOMException {
                switch (getColorType()) {
                case SVG_COLORTYPE_RGBCOLOR:
                    text = "rgb(" +
                        getValue().getRed().getCssText() + ", " +
                        getValue().getGreen().getCssText() + ", " +
                        text + ")";
                    break;
    
                case SVG_COLORTYPE_RGBCOLOR_ICCCOLOR:
                    text = "rgb(" +
                        getValue().item(0).getRed().getCssText() + ", " +
                        getValue().item(0).getGreen().getCssText() + ", " +
                        text + ") " +
                        getValue().item(1).getCssText();
    
                default:
                    throw new DOMException
                        (DOMException.NO_MODIFICATION_ALLOWED_ERR, "");
                }
                textChanged(text);
            }
        protected void setPaSubStateBackup(int newSubStateBackup) {
    	paFlags = (paFlags & ~FLAGS_SUB_STATE_MASK) 
    	    | (newSubStateBackup << FLAGS_SUB_STATE_SHIFT);
    	persistentAttributeModified = true;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private int determineReadOrder(String orderAttribute) {
            if (orderAttribute.equalsIgnoreCase("random order")) {
                return RANDOM_ORDER;
            } else if (orderAttribute.equalsIgnoreCase("sequential order")) {
                return SEQUENTIAL_ORDER;
            } else {
                System.out.println("Read order attribute not recognized: " + orderAttribute+". Setting read order to sequential order.");
                return SEQUENTIAL_ORDER;
            }
        }
        public void addActivatedFlag( String flag ) {
    
            allFlagsVars.add( flag );
            actionsValues.add( ACTIVATE );
    
        }
        public void test_insertLookupRemoveKeyTreeStressTest(){
      Banner.banner();
      final int ntrials=5;
      final int mtuples=10000;
      doInsertLookupRemoveStressTestMGC(4,mtuples,ntrials);
      doInsertLookupRemoveStressTestMGC(5,mtuples,ntrials);
      doInsertLookupRemoveStressTestMGC(16,mtuples,ntrials);
      doInsertLookupRemoveStressTestMGC(3,mtuples,ntrials);
      doInsertLookupRemoveStressTest(3,mtuples,ntrials);
      doInsertLookupRemoveStressTest(4,mtuples,ntrials);
      doInsertLookupRemoveStressTest(5,mtuples,ntrials);
      doInsertLookupRemoveStressTest(16,mtuples,ntrials);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean stopLoadingExcept( URL exemptionURL ) {
    		if ( imageUrl == null ) 
    			return false; // has never been used yet
    
    		if ( pictureStatusCode != LOADING ) {
    			Tools.log( "SourcePicture.stopLoadingExcept: called but pointless since image is not LOADING: " + imageUrl.toString());
    			return false;
    		}
    			
    		if ( ! exemptionURL.toString().equals( imageUrl.toString() ) ) {
    			Tools.log ("SourcePicture.stopLoadingExcept: called with Url " + exemptionURL.toString() + " --> stopping loading of " + imageUrl.toString() );
    			stopLoading();
    			return true;
    		} else
    			return false;
    	}
        public static void cli ( Context ctx , List < String > packages , boolean all , boolean list , boolean force , Platform platform ) {
      if ( packages != null ) {
        for ( String packageName : packages ) {
          Installer . getInstance ( packageName , platform , force ) . install ( ) ;
        }
      }
      else if ( all ) {
        packages = Resources . get ( platform ) . getPackages ( ) ;
        for ( String packageName : packages ) {
          Installer . getInstance ( packageName , platform , force ) . install ( ) ;
        }
      }
      else if ( list ) {
        Resources . get ( platform ) . listPackages ( installed , notinstalled ) ;
      }
      else {
        Toast . makeText ( ctx , ctx . getString ( R . string . help ) , Toast . LENGTH_SHORT ) . show ( ) ;
      }
    }
        public boolean resetAndStart() {
                try {
                    VMDebug.startInstructionCounting();
                    VMDebug.resetInstructionCount();
                } catch (UnsupportedOperationException uoe) {
                    return false;
                }
                return true;
            }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JButton getJButton2() {
    		if (jButton2 == null) {
    			jButton2 = new JButton();
    			jButton2.setBounds(260, 170, 100, 30);
    			jButton2.setText("cancel");
    			jButton2.addMouseListener(new java.awt.event.MouseAdapter() { 
    				public void mouseClicked(java.awt.event.MouseEvent e) {    
    					inputServerName.setText("");
    					inputIpAddress.setText("");
    					inputServerPort.setText("");
    					inputDescription.setText("");
    					inputType.setText("");
    					insertServerPanel.setVisible(false);
    					startPanel.setVisible(true);
    				}
    			});
    		}
    		return jButton2;
    	}
        public boolean isWrapperFor(Class<?> iface) throws SQLException {
    
    		boolean isInstance = iface.isInstance(this);
    
    		if (isInstance) {
    			return true;
    		}
    
    		String interfaceClassName = iface.getName();
    		
    		return (interfaceClassName.equals("com.mysql.jdbc.Statement")
    				|| interfaceClassName.equals("java.sql.Statement")
    				|| interfaceClassName.equals("java.sql.Wrapper"));
    	}
        public PXContextualItem contextualItemForItemIdentifier(WOComponent page, String identifier) {
    		PXContextualItem item = new PXContextualItem(identifier);
    
    		if (PresViewDemoIdentifier.equals(identifier)) {
    			item.setLabel("View Demo");
    			item.setTarget(this);
    			item.setAction("handleViewDemoCommand");
    		} else if (ScreenPreviewIdentifier.equals(identifier)) {
    			item.setLabel("Preview This Screen");
    			item.setTarget(this);
    			item.setAction("handleScreenPreviewCommand");
    		} else {
    			item = null;
    		}
    
    		return item;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static @NonNull PushPullAnimation create(@Direction int direction,boolean enter,long duration){
    switch (direction) {
    case UP:
    case DOWN:
        return new VerticalPushPullAnimation(direction,enter,duration);
    case LEFT:
    case RIGHT:
    default :
      return new HorizontalPushPullAnimation(direction,enter,duration);
    }
    }
        public String transformBackToOriginalTipText() {
        return "Transform through the IC space and back to the original space. "
          +"If only the best n ICs are retained (by setting varianceCovered < 1) "
          +"then this option will give a dataset in the original space but with "
          +"less attribute noise.";
      }
        public int countInternalGaps() {
    		int count = 0;
    
    		for(int x = 0; x < len; x++) {
    			if(isInternalGap(seq[x]))
    				count++;
    		}
    
    		return count;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private InputStream getInputStream(JarFile jarFile, String jarEntryFileName) {
            try {
                JarEntry entry = jarFile.getJarEntry(jarEntryFileName);
                if (entry == null) {
                    return null;
                } else {
                    return jarFile.getInputStream(entry);
                }
            } catch (IOException ex) {
                ex.printStackTrace();
                return null;
            }
        }
        public static void main(String[] args) throws Exception {
      Scanner input=new Scanner(System.in);
      System.out.print("Enter directory name: ");
      File dir=new File(input.next());
      if (dir.isDirectory()) {
        System.out.println("Directory already exists");
        System.exit(0);
      }
      if (dir.mkdirs()) {
        System.out.println("Directory created successfully");
      }
    }
        public static HiveServer2Cursor cursor ( HiveServer2Impl self , String user , Configuration configuration , boolean convertTypes , boolean dictify , boolean fetchError ) throws SQLException {
      log . debug ( "Getting a cursor (Impala session)" ) ;
      if ( user == null ) {
        user = System . getProperty ( "user.name" ) ;
      }
      log . debug ( ".cursor(): getting new sessionHandle" ) ;
      HiveServer2Session session = self . service . openSession ( user , configuration ) ;
      log . debug ( "HiveServer2Cursor(service=" + self . service + ", sessionHandle=" + session . getHandle ( ) + ", " + "defaultConfig=" + session . getConfig ( ) + ", hs2_protocol_version=" + session . getHsProtocolVersion ( ) + ")" ) ;
      Class < ? extends HiveServer2Cursor > cursorClass = dictify ? HiveServer2DictCursor . class : HiveServer2Cursor . class ;
      HiveServer2Cursor cursor = cursorClass . isAssignableFrom ( HiveServer2Cursor . class ) ? cursorClass : new HiveServer2Cursor ( session , convertTypes , fetchError ) ;
      if ( self . defaultDb != null ) {
        log . info ( "Using database " + self . defaultDb + " as default" ) ;
        cursor . execute ( "USE " + self . defaultDb ) ;
      }
      return cursor ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void removeExceedingResults(int maximumResultCount) {
            int resultCount = results.size();
            if (resultCount > maximumResultCount) {
                // Removing old results
                final int nbResultsToRemove = resultCount - maximumResultCount;
                for (int i = 0; i < nbResultsToRemove; i++) {
                    results.remove(0);
                }
            }
        }
        private void getDataFromIntent(Intent intent) {
    		Bundle extras = intent.getExtras();
    		//checks if current editing is for a provider or a subservice
    		if(extras != null) {
    			long webcamId = checkNotNull(Long.parseLong(extras.getString(ActivityHelper.INTENTKEY_WEBCAMID)), "WebcamId");
    			mWebcam = checkNotNull(mItemsDao.getWebcamById(webcamId), "Webcam to load");
    			mLogFacility.v("Loading webcam " + mWebcam.getImageUrl());
    		} else {
    			checkNotNull(null, "Webcam to load");
    		}
    	}
        public void setSelection(int index, boolean selected) {
    		if (index >= 0 && index < fButtonsSelected.length) {
    			if (fButtonsSelected[index] != selected) {
    				fButtonsSelected[index]= selected;
    				if (fButtons != null) {
    					Button button= fButtons[index];
    					if (isOkToUse(button) && button.isEnabled()) {
    						button.setSelection(selected);
    					}
    				}
    			}
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private int getMask(int length, int offset) {
            int res = getMask(length) << offset;
    
            // if the bpp is 32 bits then we need to invert it because the buffer is in little endian
            if (bpp == 32) {
                return Integer.reverseBytes(res);
            }
    
            return res;
        }
        public static base_responses update(nitro_service client, appfwconfidfield resources[]) throws Exception {
    		base_responses result = null;
    		if (resources != null && resources.length > 0) {
    			appfwconfidfield updateresources[] = new appfwconfidfield[resources.length];
    			for (int i=0;i<resources.length;i++){
    				updateresources[i] = new appfwconfidfield();
    				updateresources[i].fieldname = resources[i].fieldname;
    				updateresources[i].url = resources[i].url;
    				updateresources[i].comment = resources[i].comment;
    				updateresources[i].state = resources[i].state;
    			}
    			result = update_bulk_request(client, updateresources);
    		}
    		return result;
    	}
        public int read(byte[] b, int off, int len) throws IOException {
        int mycount = 0;
        int current = 0;
        // limit bandwidth ?
        if (bandwidth > 0) {
          for (int i=off; i < off+len; i++) {
    	current = read();
    	if (current == -1) {
    	  return mycount;
    	} else {
    	  b[i]=(byte)current;
    	  count++;
    	  mycount++;
    	}
          }
          return mycount;
        } else {
          return in.read(b, off, len);
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Optional<WikiPage> getOptionalPage(Object projectIdOrPath, String slug) {
            try {
                return (Optional.ofNullable(getPage(projectIdOrPath, slug)));
            } catch (GitLabApiException glae) {
                return (GitLabApi.createOptionalFromException(glae));
            }
        }
        public void restoreState(int index,PdfCanvas cb){
      int pops;
      if (index < 0)   pops=Math.min(-index,savedStates.size());
     else   pops=Math.max(savedStates.size() - index,0);
      if (pops == 0)   return;
      MetaState state=null;
      while (pops-- != 0) {
        cb.restoreState();
        state=savedStates.pop();
      }
      setMetaState(state);
    }
        public void updateNamespaceMappings(Node node, boolean deepSearch) {
    		if (node.getNodeType() == Node.ELEMENT_NODE) {
    			final Map<String, String> namespaces = getNamespaces(
    					(Element) node, deepSearch);
    			final Element root = getFragmentElement(getFragment(node));
    			DOMMutils.createXmlnsAttributes(root, namespaces);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public B message(String messageName) {
        MessageEventDefinition messageEventDefinition = createMessageEventDefinition(messageName);
        element.getEventDefinitions().add(messageEventDefinition);
    
        return myself;
      }
        protected GetMethod createGetMethod(String url) {
            GetMethod method = new GetMethod(url);
            method.setRequestHeader("Accept", "application/xml");
            System.out.println("url: " + url);
            return method;
        }
        public static String version ( MemcacheClient self ) throws MemcacheUnknownException {
      byte [ ] cmd = "version\n" ;
      String [ ] results = self . miscCmd ( new String [ ] {
        cmd }, "version" , false ) ;
        String before = results [ 0 ] . substring ( 0 , 1 ) ;
        String after = results [ 0 ] . substring ( 1 ) ;
        if ( before != "VERSION" ) {
          throw new MemcacheUnknownException ( "Received unexpected response: " + results [ 0 ] ) ;
        }
        return after ;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public TreeNode getTreeNodeForPipelineStage(TreeNode pipeNode, String stage) {
        if(pipeNode!=null) {
          for(int i = 0; i < pipeNode.getChildCount(); ++i) {
            TreeNode treeNode = pipeNode.getChildAt(i);
            if(stage.equals(treeNode.toString())) {
              return treeNode;
            }
          }
        }
        return null;
      }
        private JTextField getCityfield() {
    		if (cityfield == null) {
    			cityfield = new JTextField();
    		}
    		return cityfield;
    	}
        public static CPAttachmentFileEntry fetchByC_C_First(long classNameId,
    		long classPK, OrderByComparator<CPAttachmentFileEntry> orderByComparator) {
    		return getPersistence()
    				   .fetchByC_C_First(classNameId, classPK, orderByComparator);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private boolean isEqual(Object a, Object b) {
    
            if (a == null) {
                return (b == null);
            }
            if (b == null) {
                return false;
            }
            return a.equals(b);
        }
        public void deleteCategory(Long categoryId) throws DAOException {
            try {
                session = ForumHibernateUtil.currentSession();
                ForumCategory fcat =(ForumCategory)session.load(ForumCategory.class,categoryId);
    			session.delete(fcat);
                
    		} catch (HibernateException e) {
                logger.debug(" category cannot be deleted  "+e.getMessage());
    		}
            ;
        }
        public Model getModel() {
    		if (isModelFile())
    			return (Model) rootElement;
    		else
    			return null;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void actionPerformed(ActionEvent e) {
    					double position = (double) currentX / currentWidth;
    
    					Shape newShape = loadShape();
    					if (newShape != null) {
    						// make a new ShapeNodeEditor
    						nodeEditors
    								.add(new ShapeNodeEditor(newShape, position));
    						// rebuild the list of shapes in the shape map to mirror
    						// the
    						// list of ShapeNodeEditors
    						rebuildShapes();
    						// make the ShapeNodeEditors evenly spaced
    						rebuildEditorPanels();
    						// notify possible subclasses that something has changed
    						somethingHasChanged();
    					}
    				}
        public boolean readContinueCode() {
            if (getStatusLine() == null) {
                return false;
            }
            if(null != getRequestHeader("expect") &&
               getStatusLine().getStatusCode() != HttpStatus.SC_CONTINUE) {
                return false;
            }
            return true;
        }
        public String exportAsXML() {
            StringBuffer sb = new StringBuffer ();
    
            sb.append ("<ContactPersonPrimary>")
              .append ("<ContactPerson>")
              .append (XMLTools.validateCDATA (contactPerson))
              .append ("</ContactPerson>")
              .append ("<ContactOrganization>")
              .append (XMLTools.validateCDATA (contactOrganization))
              .append ("</ContactOrganization>")
              .append ("</ContactPersonPrimary>");
    
            return sb.toString ();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void linkResponsibleDepartment(Page responsibleTableRowPg) throws RQLException {
    		String templateName = getParameter("responsibleRowTemplateName");
    		if (!responsibleTableRowPg.isBasedOnTemplate(templateName)) {
    			throw new WrongTypeException("You try to link page with wrong template " + responsibleTableRowPg.getTemplateName()
    					+ ". You can link only pages of content class " + templateName + ".");
    		}
    
    		// remove and connect
    		List responsibleList = getResponsibleList();
    		responsibleList.disconnectAllChilds();
    		responsibleList.connectToExistingPage(responsibleTableRowPg, false);
    
    		// force re-read
    		deleteResponsibleRowCache();
    	}
        public Var appendChild(int index, Node child){
    		if(this == child){
    			throw new Error("Cannot append a node to itself.");
    		}
    		child.setParent(this);
    		children.add(index, child);
    		return this;
    	}
        public int errorCode ( Object[][] data, int member, int idx, Object what ) {
    		String val = StringUtil.notEmpty( what );
    		if ( MMB_ACTION == member )
    			return null != val && 0 > getInt( MMB_ACTION, 0, what ) ? ERR_CHECK_PATTERN : OK;
    		return formErrorCode( data, member, idx, val ); 
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String toSQL(String columnPrefix, Map<String, String> typeReplacement) {
        	String theType = type;
        	if (typeReplacement != null && typeReplacement.containsKey(theType)) {
        		theType = typeReplacement.get(theType);
        	}
            return (columnPrefix == null? "": columnPrefix) + name + " " + theType + (length == 0? "" : 
            	"(" + length + (precision >= 0? ", " + precision : "") + ")");
        }
        @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.959 -0400",hash_original_method="51BAA3E17EE281D8C69C752DD3177A5C",hash_generated_method="762D67DB16D12CF9875B7202BDE6AA91") public Phaser(Phaser parent,int parties){
      if (parties >>> PARTIES_SHIFT != 0)   throw new IllegalArgumentException("Illegal number of parties");
      int phase=0;
      this.parent=parent;
      if (parent != null) {
        final Phaser root=parent.root;
        this.root=root;
        this.evenQ=root.evenQ;
        this.oddQ=root.oddQ;
        if (parties != 0)     phase=parent.doRegister(1);
      }
     else {
        this.root=this;
        this.evenQ=new AtomicReference<QNode>();
        this.oddQ=new AtomicReference<QNode>();
      }
      this.state=(parties == 0) ? (long)EMPTY : ((long)phase << PHASE_SHIFT) | ((long)parties << PARTIES_SHIFT) | ((long)parties);
    }
        public SIMPIterator getRemoteMessageRequestIterator()
      {
        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())
          SibTr.entry(tc, "getRemoteMessageRequestIterator");
          
        // Create the iterator over the AIStream
        AIStreamIterator aiStreamIterator = new AIStreamIterator(aiStream);
        
        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())
              SibTr.exit(tc, "getRemoteMessageRequestIterator", aiStreamIterator);
                  
        return aiStreamIterator;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getPriorEmergencyAccount() {
    		TrimEx eaTrim = getLatestTrim(EMERGENCY_ACCOUNT_LIST, "DateSort=DESC");
    		String account = null;
    
    		try {
    			List<ObservationValueSlot> accountValues = ((ActEx) eaTrim.getAct())
    					.getRelationship().get("accountDetails").getAct()
    					.getObservation().getValues();
    			account = accountValues.get(0).getST().toString() + " / "
    					+ accountValues.get(1).getST().toString();
    		} catch (Exception e) {
    
    		}
    
    		return account;
    	}
        public boolean setHeader(String name, String value) {
    	Element header = doc.getRootElement().getChild("header");
    	Element elem = header.getChild(name);
    	if (elem==null)
    	    return addHeader(name,value);
    	elem.setText(value);
    	return true;
        }
        public RegisteredServer clone(){
      RegisteredServer result=new RegisteredServer();
      result.ServerUri=ServerUri;
      result.ProductUri=ProductUri;
      result.ServerNames=ServerNames == null ? null : ServerNames.clone();
      result.ServerType=ServerType;
      result.GatewayServerUri=GatewayServerUri;
      result.DiscoveryUrls=DiscoveryUrls == null ? null : DiscoveryUrls.clone();
      result.SemaphoreFilePath=SemaphoreFilePath;
      result.IsOnline=IsOnline;
      return result;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    Object stringToValue(String text,Format f) throws ParseException {
      if (f == null) {
        return text;
      }
      Object value=f.parseObject(text);
      return convertValueToValueClass(value,getValueClass());
    }
        public void marshall(LabelingJobDataAttributes labelingJobDataAttributes, ProtocolMarshaller protocolMarshaller) {
    
            if (labelingJobDataAttributes == null) {
                throw new SdkClientException("Invalid argument passed to marshall(...)");
            }
    
            try {
                protocolMarshaller.marshall(labelingJobDataAttributes.getContentClassifiers(), CONTENTCLASSIFIERS_BINDING);
            } catch (Exception e) {
                throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
            }
        }
        public Object childrenAccept(SimpleParserVisitor visitor, Object data) {
        if (children != null) {
          for (int i = 0; i < children.length; ++i) {
            children[i].jjtAccept(visitor, data);
          }
        }
        return data;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Deprecated
    	public ResultSetConstraint build(Map<String, List<String>> constraints)
    	{
    		return builder(constraints).build();
    	}
        public String getShortcutDescription(Object stroke) {
    			int index = shortcuts.indexOf(stroke);
    
    			return getString("shortcuts.tooltips." + String.valueOf(index));
    		}
        public void isometricView(){
      sensorMatrixNode.setVisible(true);
      sensorMatrixNode.raiseToTop();
      sensorMatrixNode.setOffset(0.0d,sensorMatrixNode.getHeight() * -0.1d);
      if (pixelMatrixNode.hasFocus()) {
        pixelMatrixNode.setFocus(false);
      }
      if (!selectionEventHandlerInstalled) {
        selectionEventHandlerInstalled=true;
        addInputEventListener(selectionEventHandler);
      }
      Point2D sensorCenter=sensorMatrixNode.getBounds().getCenter2D();
      sensorMatrixNode.getTransformReference(true).scale(1.0d,0.573558d);
      sensorMatrixNode.getTransformReference(true).rotate(Math.PI / 4.0d,sensorCenter.getX(),sensorCenter.getY());
      Point2D pixelCenter=sensorMatrixNode.getBounds().getCenter2D();
      pixelMatrixNode.getTransformReference(true).scale(1.0d,0.573558d);
      pixelMatrixNode.getTransformReference(true).rotate(Math.PI / 4.0d,pixelCenter.getX(),pixelCenter.getY());
      centerCamera();
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Map getInstance() {
          if (instance == null) {
            instance = createInstance();
          }
          return instance;
        }
        @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){
    switch (featureID) {
    case UmplePackage.KEY_DEFINITION___DEFAULT_KEY_1:
        getDefaultKey_1().clear();
      getDefaultKey_1().addAll((Collection<? extends String>)newValue);
    return;
    case UmplePackage.KEY_DEFINITION___KEY_1:
    getKey_1().clear();
    getKey_1().addAll((Collection<? extends Key_>)newValue);
    return;
    }
    super.eSet(featureID,newValue);
    }
        public static void loadModeValidator ( obs_mode . mode . Validator validator , Node node ) {
      Object nval = node . get ( "validator" ) ;
      if ( nval == null ) {
      }
      else if ( nval instanceof String ) {
        validator . setValidator ( importObject ( ( String ) nval ) ) ;
      }
      else {
        throw new NullPointerException ( "validator must be null or a string" ) ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setType(IType type) {
            // validate the type
            if (!TypeStatus.getStatus(type).isOK())
                return;
            setProject(type.getJavaProject());
            fqClassName = type.getFullyQualifiedName();
        }
        public void writeR820TRegister(Register register,byte value,boolean controlI2C) throws UsbException {
      if (register.isMasked()) {
        int current=mShadowRegister[register.getRegister()];
        value=(byte)((current & ~register.getMask()) | (value & register.getMask()));
      }
      writeI2CRegister(mDeviceHandle,mI2CAddress,(byte)register.getRegister(),value,controlI2C);
      mShadowRegister[register.getRegister()]=value;
    }
        public InteractionType loadFromCursor(Cursor cursor, int pos) {
    		
    		cursor.moveToPosition(pos);
    		
    		Uri iconUri = Uri.parse(cursor.getString(COLUMN_ICON_URI)); 
    		String actionTitle = cursor.isNull(COLUMN_INTERACT_ACTION_TITLE) ? 
    				cursor.getString(COLUMN_NAME) : 
    				cursor.getString(COLUMN_INTERACT_ACTION_TITLE);
    		String intentAction = cursor.getString(COLUMN_INTERACT_INTENT);
    		
    		return new InteractionType(iconUri, actionTitle, intentAction);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public final void setDelegate(Object delegate) {
    		this.classifier = null;
    		this.invoker = MethodInvokerUtils.getMethodInvokerByAnnotation(
    				org.springframework.classify.annotation.Classifier.class, delegate);
    		if (this.invoker == null) {
    			this.invoker = MethodInvokerUtils
    					.<C, T>getMethodInvokerForSingleArgument(delegate);
    		}
    		Assert.state(this.invoker != null,
    				"No single argument public method with or without "
    						+ "@Classifier was found in delegate of type "
    						+ delegate.getClass());
    	}
        private boolean isUpperCaseCamelCaseHunk(String hunk){
      if (hunk.length() < 2)   return false;
      for (int i=0; i < hunk.length(); i++) {
        if (!isLegalChar(hunk.charAt(i)))     return false;
      }
      return true;
    }
        public String format(CheckLevel level, MessageFormatter formatter) {
        switch (level) {
          case ERROR:
            return formatter.formatError(this);
    
          case WARNING:
            return formatter.formatWarning(this);
    
          default:
            return null;
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean isSourcesModified(){
      if (myInitialItems == null) {
        return false;
      }
      if (getItems().size() != myInitialItems.size()) {
        return true;
      }
      for (  Row row : getItems()) {
        if (row.isModified()) {
          return true;
        }
        if (!myInitialItems.contains(row.mySource)) {
          return true;
        }
      }
      return false;
    }
        public void setMedia(String media) throws FlickrException {
            if (media.equals("all") || media.equals("photos") || media.equals("videos")) {
                this.media = media;
            } else {
                throw new FlickrException("0", "Media type is not valid.");
            }
        }
        public void setValue(int numValue, String value) throws WizardException {
            switch (numValue) {
                case 0:
                    if (value.equals("true"))
                        radExistingContainer.setSelected(true);
                    else
                        radNewContainer.setSelected(true);
                    break;
                case 1:
                    break;
                case 2:
                    cboContainerType.setSelectedItem(value);
                    break;
                case 3:
                    txtContainerLocation.setText(value);
                    break;
                default:
                    throw new WizardException(mediBundle.getString("Volume2DbContainer_value_number_not_valid"));
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String submitShortMessage(String serviceType,
                TypeOfNumber sourceAddrTon, NumberingPlanIndicator sourceAddrNpi,
                String sourceAddr, TypeOfNumber destAddrTon,
                NumberingPlanIndicator destAddrNpi, String destinationAddr,
                ESMClass esmClass, byte protocolId, byte priorityFlag,
                String scheduleDeliveryTime, String validityPeriod,
                RegisteredDelivery registeredDelivery, byte replaceIfPresentFlag,
                DataCoding dataCoding, byte smDefaultMsgId, byte[] shortMessage,
                OptionalParameter... optionalParameters) throws PDUException,
                ResponseTimeoutException, InvalidResponseException,
                NegativeResponseException, IOException {
        	
            ensureTransmittable("submitShortMessage");
        	
            SubmitSmCommandTask submitSmTask = new SubmitSmCommandTask(
                    pduSender(), serviceType, sourceAddrTon, sourceAddrNpi,
                    sourceAddr, destAddrTon, destAddrNpi, destinationAddr,
                    esmClass, protocolId, priorityFlag, scheduleDeliveryTime,
                    validityPeriod, registeredDelivery, replaceIfPresentFlag,
                    dataCoding, smDefaultMsgId, shortMessage, optionalParameters);
        	
            SubmitSmResp resp = (SubmitSmResp)executeSendCommand(submitSmTask, getTransactionTimer());
        	return resp.getMessageId();
        }
        @ VisibleForTesting static void parseMultiple ( SoftwarePackage self , List < Map < String , String >> resultMaps ) {
      int status = RDFClient . SoftwarePackage . InstallState . INSTALLED ;
      List < RDFClient . SoftwarePackage > packages = new ArrayList < > ( ) ;
      for ( Map < String , String > resultMap : resultMaps ) {
        packages . add ( RDFClient . SoftwarePackage . newBuilder ( ) . setName ( resultMap . get ( "Name" ) ) . setDescription ( resultMap . get ( "Description" ) ) . setVersion ( resultMap . get ( "Version" ) ) . setInstallState ( status ) . build ( ) ) ;
      }
      if ( packages . size ( ) > 0 ) {
        new SoftwarePackages ( ) . setPackages ( packages ) ;
      }
    }
        public void setDropEnabled(boolean enabled) {
    
            if ((m_dropEnabled != null) && (m_dropEnabled.booleanValue() == enabled)) {
                return;
            }
            m_dropEnabled = Boolean.valueOf(enabled);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String mmiToVrt ( MMII self , boolean forceFlag ) throws IOException {
      LOGGER . debug ( "mmiToVrt requested." ) ;
      String vrtPath = self . getOutputPath ( ) + self . getOutputBasename ( ) + ".vrt" ;
      if ( FileUtils . exists ( vrtPath ) && forceFlag != true ) {
        return vrtPath ;
      }
      String csvPath = mmiToDelimitedFile ( true ) ;
      String vrtString = ( "</OGRVRTDataSource>" + csvPath ) ;
      try ( OutputStreamWriter writer = new OutputStreamWriter ( new FileOutputStream ( vrtPath ) , "UTF-8" ) ) {
        writer . write ( vrtString ) ;
      }
      return vrtPath ;
    }
        public int getBinIndex(double value) {
            if (value == getMin()) {
                return 0;
            }
            if (value == getMax()) {
                return getNumBins() - 1;
            }
            final int binIndex = MathUtils.floorInt((value - getMin()) / (getMax() - getMin()) * getNumBins());
            if (binIndex >= 0 && binIndex < getNumBins()) {
                return binIndex;
            }
            return -1;
        }
        public static void convolve(Kernel2D_F64 kernel, InterleavedF64 src, InterleavedF64 dst ) {
    		InputSanityCheck.checkSameShapeB(src, dst);
    
    		boolean processed = BOverrideConvolveImageNormalized.invokeNativeConvolve(kernel,src,dst);
    		
    		if( !processed ) {
    			if( kernel.width >= src.width || kernel.width >= src.height ) {
    				ConvolveNormalizedNaive_IL.convolve(kernel,src,dst);
    			} else {
    				if( Math.abs(kernel.computeSum() - 1.0f) > 1e-4f ) {
    					Kernel2D_F64 k = kernel.copy();
    					KernelMath.normalizeSumToOne(k);
    					kernel = k;
    				}
    				ConvolveImageNoBorder.convolve(kernel,src,dst);
    				ConvolveNormalized_JustBorder_IL.convolve(kernel,src,dst);
    			}
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private Graph graphIsomorphicCopy(Graph g){
    		Graph newG = new Graph();
    		for(Vertex v : g.getVertexList()){
    			Vertex w = new Vertex(v.getID());
    			newG.addVertex(w);  
    			v.setImage(w);	// Use the variable "image" to record the isomorphism
    			w.setImage(v);
    		}
    		for(Vertex v : g.getVertexList()){
    			for(Vertex w : v.getNeighborList())
    				newG.addEdge(v.getImage(),w.getImage());
    		}
    		return newG;
    	}
        @SuppressWarnings({ "rawtypes", "unchecked" })
    	public void addTransformationOrPredicate(SerFunction transformationOrPredicate) {
    		Tuple2<Integer, Object> currentProcedure = this.checkPointProcedures.get(this.checkPointProcedures.size()-1);
    		SerFunction func = (SerFunction) currentProcedure._2() == null
    				? transformationOrPredicate
    						: transformationOrPredicate.compose((SerFunction) currentProcedure._2());
    		this.checkPointProcedures.set(this.checkPointProcedures.size()-1, tuple2(currentProcedure._1(), func));
    	}
        public boolean adaptToBoolean(String value) {
                int length;
                if (value == null || (length = value.length()) == 0) {
                    if (mLenient) {
                        return false;
                    }
                } else if (length == 1 || mLenient) {
                    return adaptToBoolean(value.charAt(0));
                }
    
                throw new IllegalArgumentException
                    ("Cannot adapt '" + value + "' into boolean for property \"" +
                     mPropertyName + '"');
            }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void handlePurgeCache() {
            reportable.output("Purging all resources from the cache");
    
            try {
                cacheMgrService.purgeResources();
            } catch (Exception e) {
                reportable.error("Unable to remove all resources in the cache");
                reportable.error("Reason: " + e.getMessage());
                bail(GENERAL_FAILURE);
            }
        }
        public static void setResolved_name ( Resolve self , Map < TypeName , TypeName > ref , TypeName typename2solve , TypeName typename_ref ) {
      if ( self . resolution . get ( typename2solve . getValue ( ) ) == null ) {
        self . resolution . put ( typename2solve . getValue ( ) , ref . get ( typename_ref . getValue ( ) ) ) ;
      }
    }
        public boolean validateConfigDecision_LegalInclExclFeatures(ConfigDecision configDecision, DiagnosticChain diagnostics, Map<Object, Object> context) {
    		// TODO implement the constraint
    		// -> specify the condition that violates the constraint
    		// -> verify the diagnostic details, including severity, code, and message
    		// Ensure that you remove @generated or mark it @generated NOT
    		if (false) {
    			if (diagnostics != null) {
    				diagnostics.add
    					(createDiagnostic
    						(Diagnostic.ERROR,
    						 DIAGNOSTIC_SOURCE,
    						 0,
    						 "_UI_GenericConstraint_diagnostic",
    						 new Object[] { "LegalInclExclFeatures", getObjectLabel(configDecision, context) },
    						 new Object[] { configDecision },
    						 context));
    			}
    			return false;
    		}
    		return true;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void handleTblButtonAddRequest(RequestInvocationEvent event){
      EntityAddViewBean vb=(EntityAddViewBean)getViewBean(EntityAddViewBean.class);
      setPageSessionAttribute(EntityAddViewBean.ENTITY_TYPE,(String)getPageSessionAttribute(PG_SESSION_ENTITY_TYPE));
      unlockPageTrail();
      passPgSessionMap(vb);
      vb.forwardTo(getRequestContext());
    }
        public void addPaxDetail(PaxDetail_type0 param){
                                       if (localPaxDetail == null){
                                       localPaxDetail = new PaxDetail_type0[]{};
                                       }
    
                                
                                     //update the setting tracker
                                    localPaxDetailTracker = true;
                                
    
                                   java.util.List list =
                                org.apache.axis2.databinding.utils.ConverterUtil.toList(localPaxDetail);
                                   list.add(param);
                                   this.localPaxDetail =
                                 (PaxDetail_type0[])list.toArray(
                                new PaxDetail_type0[list.size()]);
    
                                 }
        public boolean canBeConfirmed() {
            return true;
            /*
            if((!cancelled&&!confirmed))
            return true;
            return false;
             */
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public double getValue(LogData prev, LogData next) {
    		double val = 0;
    		switch (this) {
    			case EV:
    				val = next.getDeltaResistance();
    				break;
    			case T:
    				val = next.getTemperature();
    				break;
    			case P:
    				val = next.getPressure();
    				break;
    			case dPdt:
    				val = (prev != null) ? next.getPressure() - prev.getPressure() : 0;
    				break;
    		}
    
    		return val;
    		
    	}
        static private boolean meetsSatisfaction( final Solver solver, final double satisfactionTarget ) {
    		// get the best solution found so far
    		final Trial bestSolution = solver.getScoreBoard().getBestSolution();
    		if ( bestSolution == null )  return false;
    		
    		// check if any objective satisfaction is below the minimum satisfaction					
    		for ( final Objective objective : solver.getProblem().getObjectives() ) {
    			final double satisfaction = bestSolution.getSatisfaction( objective );
    			if ( Double.isNaN( satisfaction ) || satisfaction < satisfactionTarget ) {
    				return false;
    			}
    		}
    		
    		return true;	// if we made it this far then all conditions are satisfied to stop		
    	}
        @Override public Object clone() throws CloneNotSupportedException {
      DefaultKeyedValues2D clone=(DefaultKeyedValues2D)super.clone();
      clone.columnKeys=new java.util.ArrayList(this.columnKeys);
      clone.rowKeys=new java.util.ArrayList(this.rowKeys);
      clone.rows=(List)ObjectUtilities.deepClone(this.rows);
      return clone;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getLocalCode(String interfaceName, int hl7Table, String interfaceCode) throws HL7Exception {
            String localCode = null;
            try {
                HashMap<String, HashMap<String, String>> interfaceMap = interfaceToLocal.get(interfaceName);
                localCode = getCode(interfaceMap, hl7Table, interfaceCode);
            }
            catch (NullPointerException npe) {
                if (this.throwIfNoMatch)
                    throw new HL7Exception(
                        "No local mapping for the interface code "
                            + interfaceCode
                            + " for HL7 table "
                            + hl7Table
                            + " for the interface '"
                            + interfaceName
                            + "'",
                        HL7Exception.TABLE_VALUE_NOT_FOUND);
            }
            return localCode;
        }
        public boolean verifyEmail(String email) {
    		String patten = "^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$";
    		;
    		if (email.length() != 0)
    			if (!email.matches(patten)) {
    				return false;
    			}
    		return true;
    	}
        public void writeConfig() {
        try {
          cm.setRoamAlertDetails(switchAlert, false);
          cm.setPollIntervalDetails(delay, false);
          cm.setLogDetails(false, true, "Log.txt", false);
          cm.setNotificationDetails(emailnotify, emailserver, fromaddress, toaddress, false);
    
          cm.save();
        } catch (Exception ex) {
          Logger.log("Error in writing config files: " + ex.getMessage());
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int findPosition(List<LaunchFile> files, long fileId){
            int position = -1;
            for (int i = 0; i < files.size(); i++) {
                if (files.get(i).getId() == fileId) {
                    position = i;
                    break;
                }
            }
            if (position == -1)
                throw new ARISException("Invalid File for the Launch Object");
            return position;
        }
        private void updateSummaryPanel(){
            this.films_in_database_jlabel.setText("Total Films in Database: " + this.core_controller.film_controller.getFilms().size());
            this.total_screens_in_database_jlabel.setText("Total Screen Count: " + this.core_controller.screen_controller.getScreens().size());
            this.total_screenings_in_database_jlabel.setText("Total Screening Count: " + this.core_controller.screen_controller.getScreeningCount());
        }
        private String extractRelativeLink (String url) {
    		URL _referrerUrl;
    		try
    		{
    			_referrerUrl = new URL(url);
    			url = _referrerUrl.getPath();
    
    		}
    		catch (MalformedURLException e)
    		{
    			if (LOG.isDebugEnabled()) {
    				LOG.debug(e);
    			}
    		}
    		String _contextPath = getRequest().getContextPath();
    		// strip context path if given
    		if (url.startsWith(_contextPath)) url = url.substring(_contextPath.length() );
    		String _cmsServletURLPattern = "/opencms";
    		if (url.startsWith(_cmsServletURLPattern)) url = url.substring(_cmsServletURLPattern.length() );
    		
    		return url;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setMaxSuggestions(int maxSuggestions) {
            if (maxSuggestions < 1 || maxSuggestions > 100) {
                throw new IllegalArgumentException("maxSuggestions must be between 1 and 100");
            }
            mPrefMaxSuggestions = maxSuggestions;
            mPriorities = new int[mPrefMaxSuggestions];
            mBigramPriorities = new int[PREF_MAX_BIGRAMS];
            collectGarbage(mSuggestions, mPrefMaxSuggestions);
            while (mStringPool.size() < mPrefMaxSuggestions) {
                StringBuilder sb = new StringBuilder(getApproxMaxWordLength());
                mStringPool.add(sb);
            }
        }
        protected void freeConnection(Connection connection) {
        	if (connection != null) {
    	    	if (datasource instanceof ConnectionBroker) {
    	    		((ConnectionBroker)datasource).freeConnection(connection);
    	    	} else {
    	    		try {
    	    			connection.close();
    	    		} catch (SQLException sqle) {
    	    			sqle.printStackTrace();
    	    		}
    	    	}
        	}
        }
        public static class Util {
    		private static SampleHtmlServiceAsync instance;
    		public static SampleHtmlServiceAsync getInstance(){
    			if (instance == null) {
    				instance = (SampleHtmlServiceAsync) GWT.create(SampleHtmlService.class);
    				ServiceDefTarget target = (ServiceDefTarget) instance;
    				target.setServiceEntryPoint(GWT.getModuleBaseURL() + "/SampleHtmlService");
    			}
    			return instance;
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void checkExistingFile(){
    
    		File fileExt= new File(SETTINGS_FILE_PATH);
    		if (fileExt.exists()){
    
    			try {
    				FileInputStream intExt = new FileInputStream(fileExt);
    				DataInputStream dis=new DataInputStream(intExt);
    				savedLogin=dis.readUTF();
    				savedPassword=dis.readUTF();
    
    			} catch (FileNotFoundException e1) {
    				// TODO Auto-generated catch block
    				e1.printStackTrace();
    			} catch (IOException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			}
    
    
    		}
    		else{
    			savedPassword=""; //$NON-NLS-1$
    			savedLogin=""; //$NON-NLS-1$
    		}
    
    
    	}
        protected void activateListener(TypeSummary[] typeSummaryArray, ActionEvent evt) {
            CurrentSummary cs = CurrentSummary.get();
            FieldSummary fieldSummary = (FieldSummary) cs.getCurrentSummary();
            PushUpFieldListener pufl = new PushUpFieldListener(null, null, fieldSummary, null, null);
            pufl.actionPerformed(null);
        }
        @Override
    
    	public EClass getIfcExternalSpatialStructureElement() {
    
    		if (ifcExternalSpatialStructureElementEClass == null) {
    
    			ifcExternalSpatialStructureElementEClass = (EClass) EPackage.Registry.INSTANCE
    
    					.getEPackage(Ifc4Package.eNS_URI).getEClassifiers().get(247);
    
    		}
    
    		return ifcExternalSpatialStructureElementEClass;
    
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public TuioObject (long si, int sym, float xp, float yp, float a) {
    		super(si,xp,yp);
    		symbol_id = sym;
    		angle = angle;
    		rotation_speed = 0.0f;
    		rotation_accel = 0.0f;
    	}
        public int getEndIndexForTupletGroup(int beginIndex) {
            NotationElement element;
            NotationNote note;
            Fraction durationSoFar = new Fraction(0, 1);
            for (int i = beginIndex; i < this.size(); i++) {
                element = this.get(i);
                if (element instanceof NotationNote) {                
                    note = (NotationNote) element;
                    durationSoFar = durationSoFar.plus(note.getDuration());
                    
                    if (durationSoFar.denomIsPowerOf2()) return i;                
                }
            }
            
            return -1;
        }
        public void setSelectionBackground (Color color) {
    	checkWidget ();
    	if (color != null) {
    		if (color.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
    	}
    	selectionBackground = color;
    	super.redraw();
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean contains(NumericalInterval other) {
    
    		if (this.getLeft() > other.getLeft()) {
    			return false;
    		}
    		if (this.getRight() < other.getRight()) {
    			return false;
    		}
    
    		if (this.getLeft() == other.getLeft()) {
    			if (this.isLeftOpen() && !other.isLeftOpen()) {
    				return false;
    			}
    		}
    
    		if (this.getRight() == other.getRight()) {
    			if (this.isRightOpen() && !other.isRightOpen()) {
    				return false;
    			}
    		}
    
    		return true;
    
    	}
        private void doJmxValue(HttpServletResponse httpResponse, String jmxValueParameter)
    
    			throws IOException {
    
    		httpResponse.setContentType("text/plain");
    
    		httpResponse.getWriter().write(MBeans.getConvertedAttributes(jmxValueParameter));
    
    		httpResponse.flushBuffer();
    
    	}
        public static String getResponse ( HttpClient self , String url , int timeout ) {
      if ( timeout == 0 ) timeout = self . getDefaultTimeout ( ) ;
      if ( self . getDefaultSleeptime ( ) > 0 ) TimeUnit . MILLISECONDS . sleep ( self . getDefaultSleeptime ( ) ) ;
      try {
        return self . auth . get ( url , new Header [ ] {
          new Header ( "Accept" , "application/json" ) }, timeout ) ;
        }
        catch ( Exception e ) {
          return null ;
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public LOCOMQueryResultImpl queryLOCompDef(Set<CompetencyGapImpl> compGap) {
    
            RetrieveLOImpl rLO = new RetrieveLOImpl();
            return rLO.getLOByCompetencyDef(compGap, _rep.getcLomont(),
                    _rep.getGcoont(), _rep.getsLomont());
    
        }
        private List getArgs(Node root) {
            List args = new ArrayList();
            NodeList children = root.getChildNodes();
    
            for (int i = 0; i < children.getLength(); i++) {
                Node child = children.item(i);
                String name = child.getNodeName();
                
                if (child.getNodeType() == Node.ELEMENT_NODE) {
                    if (name.equals("string")) {
                        args.add(child.getFirstChild().getNodeValue());
                    } else if (name.equals("list")) {
                        args.add(getArgs(child));
                    } else {
                        throw new IllegalArgumentException("unkown arg type: " +
                                                           name);
                    }
                }
            }
    
            return args;
        }
        private LZWDecode(ByteBuffer buf) throws PDFParseException {
      for (int i=0; i < 256; i++) {
        dict[i]=new byte[1];
        dict[i][0]=(byte)i;
      }
      dictlen=258;
      bitspercode=9;
      this.buf=buf;
      bytepos=0;
      bitpos=0;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    synchronized public void addAccount(Account account){
        if (!haveData)
          throw new UnsupportedOperationException();
        accounts.put(new Integer(account.getID()), account);
        registerAccountPrivate(account.getID(), account.getName());
      }
        public final void addChainEventListener(ChainEventListener listener) {
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
                Tr.debug(this, tc, "addChainEventListener: " + listener);
            }
            if (null != listener) {
                this.chainEventListeners.add(listener);
            }
        }
        public String getSelectedPath() {
    		return tabbedPane.getSelectedIndex()
    				+ "."
    				+ ((FlatFilePanel) tabbedPane.getSelectedComponent())
    						.getSelectedPath();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addPartialRetractionIn(PartialRetractionInType param){
                                       if (localPartialRetractionIn == null){
                                       localPartialRetractionIn = new PartialRetractionInType[]{};
                                       }
    
                                
                                     //update the setting tracker
                                    localPartialRetractionInTracker = true;
                                
    
                                   java.util.List list =
                                org.apache.axis2.databinding.utils.ConverterUtil.toList(localPartialRetractionIn);
                                   list.add(param);
                                   this.localPartialRetractionIn =
                                 (PartialRetractionInType[])list.toArray(
                                new PartialRetractionInType[list.size()]);
    
                                 }
        public int getNumbOfPoints() {
    		synchronized (lockUpObj) {
    			return xyPointV.size();
    		}
    	}
        private void initialize() {
    		this.setSize(309, 281);
    		this.setLayout(new BorderLayout());
    		this.add(getNorthPanel(), BorderLayout.NORTH);
    		this.add(getCenterComponent(), BorderLayout.CENTER);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getTipoAsString() {
    		if (this.getTipo()==-1) {
    			return null;
    		}
    		return DadosBasicosDeManutencaoDeObraArtisticaTipoValues.values[this.getTipo()];
    	}
        public static URI createRestURI(
                final String matrixId, final int row, final int col,
                final WMTSLayerParam layerParam) throws URISyntaxException {
            String path = layerParam.baseURL;
            if (layerParam.dimensions != null) {
                for (int i = 0; i < layerParam.dimensions.length; i++) {
                    String dimension = layerParam.dimensions[i];
                    String value = layerParam.dimensionParams.optString(dimension);
                    if (value == null) {
                        value = layerParam.dimensionParams.getString(dimension.toUpperCase());
                    }
                    path = path.replace("{" + dimension + "}", value);
                }
            }
            path = path.replace("{TileMatrixSet}", layerParam.matrixSet);
            path = path.replace("{TileMatrix}", matrixId);
            path = path.replace("{TileRow}", String.valueOf(row));
            path = path.replace("{TileCol}", String.valueOf(col));
            path = path.replace("{style}", layerParam.style);
            path = path.replace("{Layer}", layerParam.layer);
    
            return new URI(path);
        }
        public static List < Site > findObservatories ( Site self , String match ) throws Exception {
      String url = Constants . URL_PREFIX + "/gwf.json" ;
      HttpURLConnection connection = ( HttpURLConnection ) self . getHttpURLConnection ( ) ;
      List < Site > sitelist = Collections . synchronizedList ( new HashSet < Site > ( decode ( connection . getInputStream ( ) ) ) ) ;
      if ( match != null ) {
        Pattern regPattern = Pattern . compile ( match ) ;
        sitelist = new ArrayList < Site > ( sitelist ) ;
        for ( Site site : sitelist ) {
          if ( regPattern . matcher ( site . getName ( ) ) . matches ( ) ) {
            sitelist . add ( site ) ;
          }
        }
      }
      return sitelist ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static Map < String , ImageAlias > listImages ( String call , Map < String , String > map ) throws SaltCloudSystemExit {
      if ( call != "function" ) {
        throw new SaltCloudSystemExit ( ) ;
      }
      if ( ! versionCompatible ( "4.0" ) ) {
        throw new SaltCloudNotFound ( ) ;
      }
      Map < String , ImageAlias > ret = new HashMap < > ( ) ;
      AmazonDynamoDB conn = getAmazonDynamoDB ( ) ;
      if ( map . get ( "location" ) != null ) {
        Item item = conn . getLocation ( map . get ( "location" ) , 3 ) ;
        ret . put ( item . getId ( ) , new ImageAlias ( item . getProperties ( ) . getImageAliases ( ) ) ) ;
        return ret ;
      }
      for ( Item item : conn . listLocations ( 3 ) . getItems ( ) ) {
        ret . put ( item . getId ( ) , new ImageAlias ( item . getProperties ( ) . getImageAliases ( ) ) ) ;
      }
      return ret ;
    }
        protected int inc() {
                this.value++;
                incSize();
                assert this.value > 0;
                return this.value;
            }
        public void removeCompletionValue(String value) {
    		assert value != null;
    		int index = -1;
    		while ((index = values.indexOf(value)) != -1) {
    			values.remove(index);
    			descriptions.remove(index);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addValidator(ch.softenvironment.jomm.mvc.controller.DbObjectValidator validator) {
    	if (validators == null) {
    		validators = new HashSet();
    	}
    	validators.add(validator);
    }
        public Integer compareTo( Integer i ) throws IllegalArgumentException{
            if( value > i ) return MORE;
            else if( value < i ) return LESS;
            else if( value == i ) return SAME;
            throw new IllegalArgumentException("Inconvertible Element Type");
        }
        public void copy(InputStream in, OutputStream out) throws IOException {
            int c;
    
            while ((c = in.read()) != -1) {
                out.write(c);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static boolean checkArgs ( Args args ) throws ProgramException {
      for ( String suffix : new String [ ] {
        ".tped" , ".tfam" }
        ) {
          String fileName = args . getTFile ( ) + suffix ;
          if ( ! new File ( fileName ) . isFile ( ) ) {
            String msg = "" + fileName + ": no such file" ;
            throw new ProgramException ( msg ) ;
          }
        }
        return true ;
      }
        public String getMediaUsageWithUnit() {
            NumberFormat nf = new DecimalFormat();
            nf.setGroupingUsed( true );
            if ( mediaUsage >= GBYTE ){
                return nf.format(mediaUsage/MBYTE)+" GB";//##,### GByte
            } else if ( mediaUsage > MBYTE ) {
                return nf.format(mediaUsage/1000L)+" MB";
            } else {
                return nf.format(mediaUsage)+" KB";
            }
        }
        private void expandCapacity(int minimumCapacity) {
    	int newCapacity = (value.length + 1) * 2;
            if (newCapacity < 0) {
                newCapacity = Integer.MAX_VALUE;
            } else if (minimumCapacity > newCapacity) {
    	    newCapacity = minimumCapacity;
    	}
    
    	char newValue[] = new char[newCapacity];
    	System.arraycopy(value, 0, newValue, 0, count);
    	value = newValue;
    	shared = false;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static double log(double x) {
        x = Math.max(0,x);
        double val = x == 0 ? MIN_LOG : Math.max(MIN_LOG, Math.log(x));
    //    if (val == MIN_LOG) Log.warn("Log underflow: log(" + x + ") truncated to " + MIN_LOG);
        return val;
      }
        public boolean send(String cmd) {
    		try {
    			mSocket.send(cmd);
    		} catch (Exception e) {
    			return false;
    		}
    		return true;
    	}
        public void addAll(List newlist) {
            Iterator it = newlist.iterator();
            TreeNode node;
    
            while (it.hasNext()) {
                node = (TreeNode) it.next();
                list.add(node);
            }
        } // of method
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void renderSource ( String outputDir , PackageSpec packageSpec ) throws IOException {
      String path = packageSpec . getFilePath ( ) ;
      String name = packageSpec . getFilePath ( ) ;
      String modulePrefix = "SwiftNav.SBP" ;
      String moduleName = CamelUtils . camelCase ( name ) ;
      String fullModuleName = "." + modulePrefix + moduleName ;
      String destinationFilename = outputDir + "/src/SwiftNav/SBP/" + moduleName + ".hs" ;
      Template javaTemplate = JENV . getTemplate ( MESSAGES_TEMPLATE_NAME ) ;
      List < String > moduleIncludes = new ArrayList < String > ( ) ;
      moduleIncludes . add ( "." + modulePrefix ) ;
      moduleIncludes . add ( CamelUtils . camelCase ( moduleName ) ) ;
      moduleIncludes . add ( fullModuleName ) ;
      moduleIncludes . add ( moduleIncludes . isEmpty ( ) ? "" : "." + fullModuleName ) ;
      File file = new File ( destinationFilename ) ;
      file . getParentFile ( ) . mkdirs ( ) ;
      file . write ( javaTemplate . render ( msgs , packageSpec . getDefinitions ( ) , packageSpec . getDescription ( ) , fullModuleName , moduleIncludes ) ) ;
    }
        protected void assure(String msg, boolean s, boolean cont) {
            state &= s;
            if (!s) {
                message += msg + "\r\n";
                log.println(msg);
                if (!cont) {
                    throw new AssureException(msg);
                }
            }
        }
        public void process( Socket socket )
    	{ 
    		try{
    			BufferedReader in = new BufferedReader( new InputStreamReader( socket.getInputStream() ) );
    			PrintStream out = new PrintStream( socket.getOutputStream() );
    
    			setFirstLine(in);
    			setRequest();			
    			
    			logger.debug((r.toString()));
    
    			this.sendResponse(out, r);
    
    			out.close();
    			in.close();
    			socket.close();
    		}
    		catch( Exception e )
    		{
    			logger.debug( e.getMessage());
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private String getCurrentDir() throws IOException {
    
            String currentDir = new java.io.File(".").getCanonicalPath();
    
            currentDir = currentDir.replace(File.separatorChar, '/');
            currentDir = "file:///" + currentDir + "/";
    
            return currentDir;
        }
        static long headerSize ( Header self ) {
      if ( self . header == null ) return 0 ;
      Entry maxEntry = Collections . max ( self . header . values ( ) , new Comparator < Entry > ( ) {
        public int compare ( Entry val , Entry other ) {
          return val . offset - other . offset ;
        }
      }
      ) ;
      return maxEntry . offset + maxEntry . value . nbytes ;
    }
        public double lengthsquared() {
    
        return x * x + y * y;
    
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void onGeneratedTypes(String result, JClassType[] genTypes) {
            List list = new ArrayList();
            Util.addAll(list, genTypes);
            Object existing = generatedTypesByResultTypeName.put(result, list);
            assert (existing == null) : "Internal error: redundant notification of generated types";
          }
        public final boolean isScrolledToBottom() {
            int y = getScrollY();
            View view = getChildAt(0);
            return (view.getBottom() - y) == getHeight();
        }
        public float getDecodeMax(int dimension) {
    		COSArray decode = cosGetDecode();
    		if (decode == null) {
    			return getRangeMax(dimension);
    		}
    		return decode.get((dimension * 2) + 1).asNumber().floatValue();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void updateList() {
        @SuppressWarnings("unchecked")
        T[] matchingItems = (T[]) IterUtil.toArray(_pim.getMatchingItems(), Comparable.class);  // T erases to Comparable!
        _matchList.setListData(matchingItems);
        _matchList.setSelectedValue(_pim.getCurrentItem(), true);
        updateExtensionLabel();
        updateInfo();
        if (_force) {
          for(int i = 0; i < _buttons.length-1; ++i) {
            _buttons[i].setEnabled(_matchList.getModel().getSize() > 0);
          }
        }
      }
        public void setSize(int width, int height){
    		jtp.setPreferredSize(new Dimension(width,height));
        	if (window!=null)
        		window.pack();
        }
        public void marshall(PutImageRequest putImageRequest, ProtocolMarshaller protocolMarshaller) {
    
            if (putImageRequest == null) {
                throw new SdkClientException("Invalid argument passed to marshall(...)");
            }
    
            try {
                protocolMarshaller.marshall(putImageRequest.getRegistryId(), REGISTRYID_BINDING);
                protocolMarshaller.marshall(putImageRequest.getRepositoryName(), REPOSITORYNAME_BINDING);
                protocolMarshaller.marshall(putImageRequest.getImageManifest(), IMAGEMANIFEST_BINDING);
                protocolMarshaller.marshall(putImageRequest.getImageTag(), IMAGETAG_BINDING);
            } catch (Exception e) {
                throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public HTMLFormElement getForm() {
            Node parent = getParentNode(); 
            while ( parent != null ) {
                if ( parent instanceof HTMLFormElement ) {
                    return (HTMLFormElement) parent;
                }
                parent = parent.getParentNode();
            }
            return null;
        }
        public boolean hasValueChanged(Object oldValue, Object newValue) {
            if( oldValue != null && classesWithSafeEquals.contains( oldValue.getClass() ) ) {
                return !oldValue.equals( newValue );
            } else {
                return oldValue != newValue;
            }
        }
        public void printDataStartField(PrintWriter out, int iPrintOptions)
        {
            if ((iPrintOptions & HtmlConstants.MAIN_SCREEN) == HtmlConstants.MAIN_SCREEN)
            {
            }
            else 
                out.println("<tr>");
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String decodeObjectIdentifier(IType obj) throws IOException {
          cat.debug("==> decodeObjectIdentifier()");
    
          Tag tag = obj.tag();
          byte[] buffer = readRaw(tag, Tag.OBJECT_IDENTIFIER);
          String result = toOID(buffer);
    
          cat.debug("<== decodeObjectIdentifier() --> "+result);
          return result;
       }
        protected SizeRequirements calculateMinorAxisRequirements(int axis, SizeRequirements r) {
    	updateGrid();
    	
    	// calculate column requirements for each column
    	calculateColumnRequirements(axis);
    
    
    	// the requirements are the sum of the columns.
    	if (r == null) {
    	    r = new SizeRequirements();
    	}
    	long min = 0;
    	long pref = 0;
    	long max = 0;
    	for (int i = 0; i < columnRequirements.length; i++) {
    	    SizeRequirements req = columnRequirements[i];
    	    min += req.minimum;
    	    pref += req.preferred;
    	    max += req.maximum;
    	}
    	r.minimum = (int) min;
    	r.preferred = (int) pref;
    	r.maximum = (int) max;
    	r.alignment = 0;
    	return r;
        }
        public CompositionProcess createEmptyComposition(String projectName) {
    		String user = ((UserSessionIM) getUserSession()).getCurrentUserId();
    		this.currentCompositionPrococess = compManager.newComposition(user, projectName);
    		this.projectName=projectName;		
    		return this.currentCompositionPrococess;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override public synchronized Object appendEL(Object o){
      if (offset + size + 1 > arr.length)   enlargeCapacity(size + 1);
      arr[offset + size]=o;
      size++;
      return o;
    }
        public void testSetEndSize() {
    		int i = 2;
    		GraphConstants.setEndSize(map, i);
    		assertTrue(GraphConstants.getEndSize(map) == 2);
    	}
        protected Expression instantiate(Object oldInstance, Encoder out)
        {
            //
            // An implementation instance is actually constructed at decode time by calling
            // ControlBean.ensureControl on the parent bean.  This will create a new impl
            // instance and run the impl initializer on it.
            //
            return new Expression(((XMLEncoder)out).getOwner(), "ensureControl", null);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ScaleIOStoragePool queryStoragePool(String poolId) throws Exception {
      ClientResponse response=get(URI.create(ScaleIOConstants.getStoragePoolStatsURI(poolId)));
      ScaleIOStoragePool pool=getResponseObject(ScaleIOStoragePool.class,response);
      ScaleIOStoragePool poolStats=getStoragePoolStats(poolId);
      pool.setCapacityAvailableForVolumeAllocationInKb(poolStats.getCapacityAvailableForVolumeAllocationInKb());
      pool.setMaxCapacityInKb(poolStats.getMaxCapacityInKb());
      return pool;
    }
        public void setErrorKeyWithParams(String errorKey, String[] params) {
    		clearError();
    		this.errorKey = errorKey;
    		this.errorKeyParams = params;
    	}
        public ClassDescriptor getDescriptor(Class type) {
    		ClassDescriptor descriptor;
            
    		descriptor = super.getDescriptor(type);
    
    		if ((null == descriptor) && (type == _newClass)) {
    			if (CATEGORY.isDebugEnabled()) {
    				CATEGORY.debug("Creating resource class descriptor for " + type);
    			}
    			try {
    				descriptor = new ResourceClassDescriptorImpl(type);
    				addDescriptor(descriptor);
    				_newClass = null;
    			}
    			catch(MappingException e) {
    				// this should not happen
    				throw new RuntimeException(e.toString());
    			}
    		}
    
    		return descriptor;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void text(float num, float x, float y) {
            if (recorder != null)
                recorder.text(num, x, y);
            g.text(num, x, y);
        }
        public String getService() {
            if (service != null) {
                return service.getService();
            }
            return null;
        }
        public static void sleep(long millis){
      try {
        Thread.sleep(millis);
      }
     catch (  InterruptedException e) {
        e.printStackTrace();
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void saveStreamInFile(InputStream is, IFile chapterFile) {
    		try {
    			if (chapterFile.exists()) {
    				chapterFile.delete(true, null);
    			}
    			chapterFile.create(is, true, null);
    			try {
    				Thread.sleep(300);
    			} catch (InterruptedException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			}
    		} catch (CoreException ce) {
    			ce.printStackTrace();
    		}
    	}
        public static <T extends Transform> T multiply (
            double am00, double am01, double am10, double am11, double atx, double aty,
            double bm00, double bm01, double bm10, double bm11, double btx, double bty, T into) {
            into.setTransform(am00 * bm00 + am10 * bm01,
                              am01 * bm00 + am11 * bm01,
                              am00 * bm10 + am10 * bm11,
                              am01 * bm10 + am11 * bm11,
                              am00 *  btx + am10 *  bty + atx,
                              am01 *  btx + am11 *  bty + aty);
            return into;
        }
        private void createStartStopButton() {
          // Start stop Button
          this.m_startStop = new JButton("start");
          this.m_startStop.setBackground(Color.WHITE);
          this.m_startStop.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent e) {
              JButton source = (JButton) e.getSource();
              if (Showcase.this.getCollector().isRunning()) {
                Showcase.this.stopData();
                source.setText("start");
              } else {
                Showcase.this.startData();
                source.setText("stop");
              }
              source.invalidate();
              source.repaint();
            }
          });
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Object getAppObject(CallableStatement cstmt, int parameterIndex, String engineType) throws SQLException, IOException {
                double value = cstmt.getDouble(parameterIndex);
                if (cstmt.wasNull())
                    return null;
                else
                    return new Currency(value);
            }
        public void handleQueryParameters() {
            if( queryMB.length() == 0) {
                return;
            }
            
            decodedQuery.recycle();
            decodedQuery.append(getMsgBytes().query());
            // TODO: option 'useBodyEncodingForUri' - versus UTF or ASCII
            String queryStringEncoding = getEncoding();
            processParameters( decodedQuery, queryStringEncoding );
        }
        private void informOfLostEntity(Address addr) {
    		MBusLogger.log(MBusLogger.LVL2_DEBUG, "inform of lost entity: "+addr);
    		MBusLogger.log(MBusLogger.LVL2_DEBUG, "interfaces are =  "+interfaces);
    		synchronized (interfaces) {
    			for (AddressInterface iface : interfaces) 
    				iface.notifyEntityDied(addr);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void load() {
            String s = System.getProperty("user.dir");
            s += DATABASESDATABASESXML;
            XStream xstream = new XStream();
            PaccmanDatabaseMgr pdbmgr = (PaccmanDatabaseMgr) xstream.fromXML(s);
        }
        public boolean removeElement(Object key) {
        if (m_dataMap.remove(key) !=null)
          return true;
        else
          return false;
      }
        private int getOrderedListType(char c,int defaultListType) {
            for(int j=0;j<ORDERED_LIST_TYPE_IDENTIFIERS.length;j++) {
                if (c==ORDERED_LIST_TYPE_IDENTIFIERS[j]) {
                    return j;
                }
            }
            return defaultListType;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public final synchronized Template getTemplate(String name)
            throws ClassNotFoundException, NoSuchMethodException, LinkageError
        {
            Template template = mTemplates.get(name);
            if (template == null) {
                template = loadTemplate(name);
                mTemplates.put(name, template);
            }
            return template;
        }
        private void addListeners(Component component) {
    		component.addKeyListener(this);
    
    		if (component instanceof Container) {
    			Container container = (Container) component;
    
    			container.addContainerListener(this);
    
    			for (Component child : container.getComponents()) {
    				addListeners(child);
    			}
    		}
    	}
        public Not not(Constraint constraint) throws InvalidQueryException, RepositoryException {
            if (!(constraint instanceof ConstraintImpl)) {
                throw new RepositoryException("Unknown Constraint implementation");
            }
            return new NotImpl(resolver, (ConstraintImpl) constraint);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public URL getAppLoginUrl(String siteId, String ip, boolean js) {
            String url = getSecureUrl();
            url += "wapplogin.srf?app=" + getAppVerifier(ip);
            url += "&alg=" + getSecurityAlgorithm();
    
            if (!isVoid(siteId)) {
                url += "&id=" + siteId;
            }
    
            if (js) {
                url += "&js=1";
            }
    
            try {
                return new URL(url);
            } catch (Exception e) {
                debug("Error: getAppLoginUrl: Could not create application login URL: " 
                      + url + ", " + e);
            }
    
            return null;
        }
        protected void addResolveProxiesPropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add
    			(createItemPropertyDescriptor
    				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
    				 getResourceLocator(),
    				 getString("_UI_MReference_resolveProxies_feature"),
    				 getString("_UI_PropertyDescriptor_description", "_UI_MReference_resolveProxies_feature", "_UI_MReference_type"),
    				 ClassDiagramPackage.Literals.MREFERENCE__RESOLVE_PROXIES,
    				 true,
    				 false,
    				 false,
    				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
    				 null,
    				 null));
    	}
        public Object visit(VoidType host, Object data) {
            //--- Unpack arguments ---
            String indent = (String) ((Map) data).get("indent");
            return "VoidType";
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean insertRow(int rownum, Object[] data, boolean shiftrows){
            try{
                insertRow(rownum,shiftrows);
                for(int t=0;t<data.length;t++) {
                    if(data[t]!=null)
                        add(data[t], rownum, t);
                }
            }catch (Exception ex) {
            	throw new WorkBookException(ex.toString(),WorkBookException.RUNTIME_ERROR);
            }
            return true;
    	}
        public void setWindowTransparent(Window w, boolean transparent) {
                boolean isTransparent = w.getBackground() != null && w.getBackground().getAlpha() == 0;
                if (transparent != isTransparent) {
                    setBackgroundTransparent(w, transparent, "setWindowTransparent");
                }
            }
        private void transmit(Packet packet){
      byte[] data=packet.data;
      if (packet.offset > 0) {
        System.arraycopy(data,packet.offset,data=new byte[packet.length],0,packet.length);
      }
      stats.numBytes+=packet.length;
      stats.numPackets++;
      try {
        datagramConnection.send(remoteAddress,remotePort,data);
        RtpSource s=rtcpSession.getMySource();
        s.activeSender=true;
        rtcpSession.timeOfLastRTPSent=rtcpSession.currentTime();
        rtcpSession.packetCount++;
        rtcpSession.octetCount+=data.length;
      }
     catch (  IOException e) {
        e.printStackTrace();
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private long write(long offset, ByteBuffer inputBuf) throws IOException {
        int inputBufLength = inputBuf.limit() - inputBuf.position();
        MappedByteBuffer outputBuf =
            mLocalFileChannel.map(FileChannel.MapMode.READ_WRITE, offset, inputBufLength);
        outputBuf.put(inputBuf);
        int bytesWritten = outputBuf.limit();
        BufferUtils.cleanDirectBuffer(outputBuf);
        return bytesWritten;
      }
        private void handleClusterStatus(SolrQueryRequest req,SolrQueryResponse rsp) throws KeeperException, InterruptedException {
      Map<String,Object> props=new HashMap<>();
      props.put(Overseer.QUEUE_OPERATION,CollectionAction.CLUSTERSTATUS.toLower());
      copyIfNotNull(req.getParams(),props,COLLECTION_PROP,SHARD_ID_PROP,ShardParams._ROUTE_);
      handleResponse(CollectionAction.CLUSTERSTATUS.toString(),new ZkNodeProps(props),rsp);
    }
        public void delete(EnvioDocTrans entity) {
        				EntityManagerHelper.log("deleting EnvioDocTrans instance", Level.INFO, null);
    	        try {
            	entity = getEntityManager().getReference(EnvioDocTrans.class, entity.getCodEnviaDocTrans());
                getEntityManager().remove(entity);
                			EntityManagerHelper.log("delete successful", Level.INFO, null);
    	        } catch (RuntimeException re) {
            				EntityManagerHelper.log("delete failed", Level.SEVERE, re);
    	            throw re;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void setMinDate(TimeBarViewerInterface emitting, JaretDate minDate) {
            for (TimeBarViewerInterface viewer : _viewers) {
                if (!emitting.equals(viewer)) { // do not set on the emitting viewer
                    viewer.removePropertyChangeListener(this);
                    viewer.setMinDate(minDate.copy());
                    viewer.addPropertyChangeListener(this);
                }
            }
        }
        protected void checkNaN(Coordinate c) {
    		if (c.isNaN()) {
    			throw new BugException("Simulation resulted in not-a-number (NaN) value, please report a bug.");
    		}
    	}
        public void append(Writable key, Writable val) throws IOException {
          if (key.getClass() != keyClass)
            throw new IOException("wrong key class: "+key+" is not "+keyClass);
          if (val.getClass() != valClass)
            throw new IOException("wrong value class: "+val+" is not "+valClass);
    
          buffer.reset();
    
          key.write(buffer);
          int keyLength = buffer.getLength();
          if (keyLength == 0)
            throw new IOException("zero length keys not allowed: " + key);
    
          val.write(buffer);
          //System.out.println("Appending " + key + ", " + val);
          append(buffer.getData(), 0, buffer.getLength(), keyLength);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Object getValueObject() {
            String label = getLabel();
            if (label == null || label.length() == 0) {
                return null;
            } else {
                return label;
            }
        }
        public void setView(String view) {
            try { 
                project.setPersistentProperty(VIEW_KEY, view);
            } catch (CoreException e) {
                e.printStackTrace();
            }
        }
        protected DataElement copy() {
        SelectBeforeOperate aCopy = new SelectBeforeOperate();
        aCopy.commandID = commandID;
    
        return aCopy;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected Message toJMS(SoapMessage message, Session session) throws Exception {
            SoapHelper soapHelper = new SoapHelper(endpoint);
            
            // turn SOAP message into byte array/string
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            SoapWriter writer = soapHelper.getSoapMarshaler().createWriter(message);
            writer.write(baos);
            
            // create text message
            TextMessage msg = session.createTextMessage();
            msg.setText(baos.toString(SourceTransformer.getDefaultCharset()));
            
            // overwrite whatever content-type was passed on to us with the one
            // the SoapWriter constructed
            msg.setStringProperty(CONTENT_TYPE, writer.getContentType());
            
            return msg;
        }
        public static synchronized void cors() {
            checkStarted();
            instance().rootInterceptors.add(Interceptors.cors());
            instance().adminManager.addInterceptor(Interceptors.cors());
        }
        private JPanel getTables() {
    		if (tables == null) {
    			tables = new JPanel();
    			tables.setLayout(null);
    			tables.setName("");
    			tables.add(jLabel112, null);
    			tables.add(jLabel11, null);
    			tables.add(getTxtAddTable(), null);
    			tables.add(getBtnAddTable(), null);
    			tables.add(getBtnQuitTable(), null);
    			tables.add(getJScrollPane1(), null);
    		}
    		return tables;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getMaxLength() {
        if (theDoc != null) {
          return theDoc.getMaxLength();
        } else {
          return 255;
        }
      }
        public void close() throws IOException, MailException {
            if (connected()) {
                execute("QUIT");
                connection.close();
            }
        }
        public void removeLiveProperties(Document propertiesDocument) {
    		Element properties = (Element) propertiesDocument.getDocumentElement();
    		Element p = null;
    		p =
    			(Element) ((Element) properties)
    				.getElementsByTagNameNS("DAV:", "supportedlock")
    				.item(0);
    
    		if (p != null) {
    			properties.removeChild(p);
    		}
    
    		// remove the live properties that are repository specific
    		propertiesManager.removeLiveProperties(propertiesDocument);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void mouseReleased(MouseEvent event ) {
    		try {
    			JTable table = (JTable) event.getSource();
    			if( table.getSelectedRowCount() == 1 ) {
    				FileSetTableModel tableModel = (FileSetTableModel) table.getModel();
    				selectedFile = tableModel.getRow( table.getSelectedRow() );
    				super.setEnabled( isReady() );
    			} else {
    				selectedFile = null;
    				super.setEnabled( false );
    			}
    		} catch (ClassCastException ccx) {
    			LogFactory.getLog( this.getClass() ).warn("MouseListener applies to JTable with FileSetTableModel only");
    		}
    	}
        public void ejbRemove() throws RemoveException{
            log.debug("ejbRemove project="+this.getName());
    
            try{
                ProjectDAO.delete(this.getName());
    	    deleteNodes(nodes);
    	    deleteEdges(edges);
            }catch (java.sql.SQLException se1) {
                throw new RemoveException ("SQL Exception in remove: " + se1);
    	}
    	jms.sendProjectEvent(REMOVEPROJECT, this.getName());
        }
        private boolean linkFirst(Node<E> node) {
    
            // assert lock.isHeldByCurrentThread();
    
            if (count >= capacity)
    
                return false;
    
            Node<E> f = first;
    
            node.next = f;
    
            first = node;
    
            if (last == null)
    
                last = node;
    
            else
    
                f.prev = node;
    
            ++count;
    
            notEmpty.signal();
    
            return true;
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @SuppressWarnings("unchecked") private void findNext() throws IgniteCheckedException {
      curr=null;
      while (idx < docs.length) {
        Document doc;
        try {
          doc=searcher.doc(docs[idx++].doc);
        }
     catch (    IOException e) {
          throw new IgniteCheckedException(e);
        }
        ClassLoader ldr=null;
        if (ctx != null && ctx.deploy().enabled())     ldr=ctx.cache().internalCache(spaceName).context().deploy().globalLoader();
        K k=unmarshall(org.apache.commons.codec.binary.Base64.decodeBase64(doc.get(KEY_FIELD_NAME)),ldr);
        V v=type.valueClass() == String.class ? (V)doc.get(VAL_STR_FIELD_NAME) : this.<V>unmarshall(doc.getBinaryValue(VAL_FIELD_NAME),ldr);
        assert v != null;
        if (!filter(k,v))     continue;
        curr=new IgniteBiTuple<>(k,v);
        break;
      }
    }
        public String toString(){
    
        //Give as much information as possible about this exception in string format
        StringBuffer infoString = new StringBuffer("Exception:");
        infoString.append(super.toString());
        infoString.append("\n");
        infoString.append("UserMessage:");
        infoString.append(getUserErrorMessage());
        infoString.append("\n");
    
        //Give Info if internal exception has anything useful...
        if ((internalException!=null)&&(!(internalException instanceof NoUnitException))) {
          infoString.append("Original Exception:");
          infoString.append(internalException.toString());
          infoString.append("\n");
        }
    
        return infoString.toString();
    
       }
        public RFCReply get(int index) {
        boundsCheck(index);
    
        return (RFCReply) replies.get(index);
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setConfigPropertyValue(String property, Object value) {
    		Object oldValue = getConfigPropertyValue(property);
    		prefs.put(property, value.toString());
    
    		if (property.equals(LANGUAGE_PROPERTY)) {
    			changeSupport.firePropertyChange("propertyConfiguration", oldValue, value);
    		}
    	}
        public int getPathType() {
            if (isAbsolute()) {
                throw new IllegalStateException
                    ("Cannot call this method on an absolute url '"
                     + getExternalForm() + "'");
            }
    
            if (getAuthority() != null) {
                // URL is relative with a net_path (authority)
                // therefore it is fully qualified
                return FULLY_QUALIFIED_PATH;
            } else {
                // must be dealing with a relative URL
                String path = getPath();
    
                if (path != null && path.startsWith("/")) {
                    return HOST_RELATIVE_PATH;
                }
                // relative URL is neither fully qualified or host relative
                // so it must be document relative.
                return DOCUMENT_RELATIVE_PATH;
            }
        }
        protected AbstractMatrix3D vColumnFlip() {
            if (columns > 0) {
                columnZero += (columns - 1) * columnStride;
                columnStride = -columnStride;
                this.isNoView = false;
            }
            return this;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void setConcurrencyOptions ( ClientConnection self , boolean threadSafe , boolean handlerThread ) {
      if ( handlerThread ) {
        assert threadSafe : "handlerThread=true requires threadSafe=true" ;
      }
      self . _server . clientConnectionFactory = ( threadSafe ? new ThreadsafeClientConnection ( ) : new ClientConnection ( ) ) ;
      if ( handlerThread ) {
        self . _handlerThread = new MessageHandlerThread ( self . handleMessage , self . createLogInform , self . _logger ) ;
        self . onMessage = self . _handlerThread . onMessage ;
      }
      else {
        self . onMessage = returnFuture ( self . handleMessage ) ;
        self . _handlerThread = null ;
      }
      self . _concurrencyOptions = ObjectUtil . newMap ( threadSafe , handlerThread ) ;
    }
        public void setSaveNeeded(boolean b) {
            _saveNeeded = b;
            updateEnabledStates();
    
            // fire a change event for the edit state
            _imageChangeEvent.setEditStateChanged(true);
            fireChange(_imageChangeEvent);
        }
        public FormKey displayCriteria() throws ApplicationExceptions, FrameworkException {
            // .//GEN-END:_displayCriteria_1_be
            // Add custom code before processing the method //GEN-FIRST:_displayCriteria_1
    
    
            // .//GEN-LAST:_displayCriteria_1
            // .//GEN-BEGIN:_displayCriteria_2_be
            initCriteriaScreen();
            return new FormKey(ChangeHistoryFinderCriteriaForm.NAME, getComponentId());
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void shutdown() {
            if (tm != null) {
                tm.shutdown();
                tm = null;
            }
        }
        public void run() {
    		for (ChangeEffect e: effects) {
    			ChangeEffect runned = Game.replaceEffect(e);
    			runned.run();
    		}
    	}
        private JTextField getJTextField() {
    		if (null == m_JTextField) {
    			m_JTextField = new JFormattedTextField();
    		}
    
    		return m_JTextField;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void incomingMessage() {
    	try {
    	    SipMessage newMessage = (SipMessage) mQueue.dequeueHead().obj();
    
    	    switch ( newMessage.getType() ) {
    	    case SipMessage.Request:
    		incomingRequestMessage( (SipRequestMessage) newMessage );
    		break;
    	    case SipMessage.Response:
    		incomingResponseMessage( (SipResponseMessage) newMessage );
    		break;
    	    default:
    		System.err.println( "SipClient: bad incoming message type" );
    		return;
    	    }
    
    	    CallEventMulticaster cemc = CallEventMulticaster.getMulticaster();
    	    cemc.dispatchEvents();
    	}
    	catch( InterruptedException ie ) {
    	    ie.printStackTrace( System.err );
    	}
        }
        public SimpleEventAdapter createListener(Object listener, String methodName){
    		SimpleEventAdapter adapter = new SimpleEventAdapter();
    		adapter.setListener(listener);
    		adapter.setMethodName(methodName);
    		return adapter;
    	}
        public SimpleJob setJoin(String[] masterLabels, String[] masterColumns,
                                 String[] dataColumns, String masterPath) throws IOException, URISyntaxException {
            String separator = conf.get(SEPARATOR);
            return setJoin(masterLabels, masterColumns, dataColumns, masterPath, separator, false, DEFAULT_AUTOSOMEJOIN_THRESHOLD);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void deletePriceListEntry(String priceListCode, String productCode, String currencyCode, DateTime startDate) throws Exception
    
    	{
    
    		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.pricelists.PriceListEntryClient.deletePriceListEntryClient( priceListCode,  productCode,  currencyCode,  startDate);
    
    		client.setContext(_apiContext);
    
    		client.executeRequest();
    
    		client.cleanupHttpConnection();
    
    
    
    	}
        public void initializeScheduler() {
    		try{
    			StdSchedulerFactory factory = new StdSchedulerFactory();			
    			factory.initialize(MgkIoUtil.resourceStringToInputStream(this.propertiesResourceString));
    			this.scheduler = factory.getScheduler();
    			this.scheduler.getContext().put("gateway", this.gateway);
    			this.scheduler.start();
    		}catch(Throwable ex){
    			logger.error(ex);
    		}
    	}
        public void unregisterServiceHandler(String name) {
    
            Map<String, Object> serviceHandlers = getServiceHandlers(false);
    
            if (serviceHandlers != null) {
    
                serviceHandlers.remove(name);
    
            }
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static long getLastTradedDt ( Asset self , Date date ) {
      try {
        return self . frames . get ( "close" ) . loc . get ( 0 , asset . sid ) . lastValidIndex ( ) ;
      }
      catch ( IndexOutOfBoundsException e ) {
        return NaT ;
      }
    }
        public void setPatternMetadatas(PatternMetadata[] param){
                                  
                                       validatePatternMetadatas(param);
    
                                   
                                              if (param != null){
                                                 //update the setting tracker
                                                 localPatternMetadatasTracker = true;
                                              } else {
                                                 localPatternMetadatasTracker = true;
                                                     
                                              }
                                          
                                          this.localPatternMetadatas=param;
                                  }
        public static final void confd_state_read_only_mode ( final Element self , final Callback callback ) {
      final Element config = new Element ( "config" ) ;
      final Element confd_state = new Element ( "confd-state" , "http://tail-f.com/yang/confd-monitoring" ) ;
      final Element read_only_mode = new Element ( "read-only-mode" ) ;
      final Callback callback = new Callback ( ) {
        @ Override public void call ( final Element config ) {
          callback . call ( config ) ;
        }
      };
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void fireDone() {
            if (getState() != State.DONE) {
                throw new IllegalStateException("Illegal attempt made to fire a " +
                        "done event when not in the DONE state");
            }
            
            int count = listeners.getListenerCount(DoneListener.class);
            if (count == 0) return;
            
            final DoneEvent evt = new DoneEvent(this);
            final DoneListener[] all = listeners.getListeners(DoneListener.class);
            Runnable r = new Runnable() {
                public void run() {
                    for (int i=0; i<all.length; i++) {
                        all[i].done(evt);
                    }
                }
            };
            if (SwingUtilities.isEventDispatchThread()) {
                r.run();
            } else {
                SwingUtilities.invokeLater(r);
            }
        }
        public void removeGap(String tli){
            if (!isGap(tli)){return;}
            //System.out.println("Removing gap : " + tli);
            String nextTLI = getCommonTimeline().getNextID(tli);
            for (int pos=0; pos<getNumberOfTiers(); pos++){
                Tier tier = getTierAt(pos);
                Event event = tier.getFirstEventBeforeStartPoint(getCommonTimeline(), tli);
                if (event==null) {continue;}
                if (event.getEnd().equals(tli)) {
                    event.setEnd(nextTLI);
                }
            }
            getCommonTimeline().removeTimelineItemWithID(tli);
        }
        public static void BSWAP ( CPU cpu , CPU dest ) {
      List < String > parts = new ArrayList < String > ( ) ;
      byte arg0 = dest . read ( ) ;
      for ( int i = 0 ;
      i < dest . getSize ( ) ;
      i += 8 ) parts . add ( Operators . EXTRACT ( arg0 , i , 8 ) ) ;
      dest . write ( Operators . CONCAT ( 8 * parts . size ( ) , parts . get ( 0 ) ) ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public XmlEvaluableContent getCurrentXmlEvaluableContent() {
    		try {
    			return xmlEvaluableContents.peek();
    		} catch (Exception ex) {
    			return null;
    		}
    	}
        public MaryHeader(ByteBuffer input) throws MaryConfigurationException {
      try {
        this.load(input);
      }
     catch (  BufferUnderflowException e) {
        Log.d(Mary.LOG,"Cannot load mary header" + e);
        throw new MaryConfigurationException("Cannot load mary header",e);
      }
      if (!hasLegalMagic() || !hasLegalType()) {
        throw new MaryConfigurationException("Ill-formed Mary header!");
      }
      assert hasLegalMagic();
      assert hasLegalType();
    }
        public Drawable colorDrawable(Context context,@Nullable Drawable drawable,int color){
      if (!(drawable instanceof BitmapDrawable)) {
        Log.w(LOG_TAG,"Original drawable is not a bitmap! Trying with constant state cloning.");
        return colorUnknownDrawable(drawable,color);
      }
      Bitmap original=((BitmapDrawable)drawable).getBitmap();
      Bitmap copy=Bitmap.createBitmap(original.getWidth(),original.getHeight(),original.getConfig());
      Paint paint=new Paint();
      Canvas c=new Canvas(copy);
      paint.setColorFilter(new PorterDuffColorFilter(color,SRC_ATOP));
      c.drawBitmap(original,0,0,paint);
      return new BitmapDrawable(context.getResources(),copy);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void handlePossibleRecursiveException() {
        if (uncaughtExceptionCount > 1 &&
            uncaughtExceptionCount <= VM.maxSystemTroubleRecursionDepth + VM.maxSystemTroubleRecursionDepthBeforeWeStopVMSysWrite) {
          VM.sysWrite("We got an uncaught exception while (recursively) handling ");
          VM.sysWrite(uncaughtExceptionCount - 1);
          VM.sysWrite(" uncaught exception");
          if (uncaughtExceptionCount - 1 != 1) {
            VM.sysWrite("s");
          }
          VM.sysWriteln(".");
        }
        if (uncaughtExceptionCount > VM.maxSystemTroubleRecursionDepth) {
          dumpVirtualMachine();
          VM.dieAbruptlyRecursiveSystemTrouble();
          if (VM.VerifyAssertions)
            VM._assert(VM.NOT_REACHED);
        }
      }
        private GraphNode getNode(String fullName) {
            if (!treeIndex.containsKey(fullName)) {
                XmlvmResource resource = loadResource(fullName);
                if (resource != null) {
                    insertResource(resource);
                } else {
                    Log.error("Couldn't create node for " + fullName);
                }
            }
            return treeIndex.get(fullName);
        }
        public boolean updateMarker(IDocument document, IMarker marker, Position position) throws CoreException {
    		listenToMarkerChanges(false);
    		try {
    			return updateMarker(marker, document, position);
    		} finally {
    			listenToMarkerChanges(true);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void deleteGameFiles(File rootFile) {
    		File[] innerFiles = rootFile.listFiles();
    		for (File file : innerFiles) {
    			if (file.isDirectory())
    				deleteGameFiles(file);
    			else
    				file.delete();
    		}
    	}
        public void setPOJOClass(Class<?> pojoClass) {
            this.pojoClass = pojoClass;
            setPOJOName(pojoClass.getName());
            
            // Index the POJO's methods
            methods = new HashMap<String, Method>();
            Method[] m = pojoClass.getMethods();
            for (int i = 0; i < m.length; i++) {
                methods.put(m[i].getName(), m[i]);
            }
        }
        private boolean containsRepSetUID(List<ReplicationSetUID> rsetUids,ReplicationSetUID repSetUID){
      for (  ReplicationSetUID rsetUid : rsetUids) {
        if (rsetUid.getId() == repSetUID.getId()) {
          return true;
        }
      }
      return false;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @ApiOperation(value="Delete workspace attribute",notes="Deletes attributes of a specified workspace. Roles allowed: account/owner, workspace/admin, system/admin") @ApiResponses(value={@ApiResponse(code=204,message="No Content"),@ApiResponse(code=404,message="Not Found"),@ApiResponse(code=409,message="Invalid attribute name"),@ApiResponse(code=500,message="Internal Server Error")}) @DELETE @Path("/{id}/attribute") @RolesAllowed({"account/owner","workspace/admin","system/admin"}) public void removeAttribute(@ApiParam(value="Workspace ID") @PathParam("id") String wsId,@ApiParam(value="Attribute name",required=true) @Required @QueryParam("name") String attributeName,@Context SecurityContext context) throws NotFoundException, ServerException, ConflictException {
      validateAttributeName(attributeName);
      final Workspace workspace=workspaceDao.getById(wsId);
      if (null != workspace.getAttributes().remove(attributeName)) {
        workspaceDao.update(workspace);
      }
    }
        protected String readObjectType(CharBuffer buffer) {
            // the first character must be 'L'
            if(buffer.get() != 'L')
                return "?";
            
            // start from 0 because charAt() takes index relative to current position
            // and now charAt(0) is char right after 'L''
            int i = 0;
            while(buffer.charAt(i) != ';')
                i++;
            char[] tab = new char[i];
            buffer.get(tab);
            buffer.get(); // read ';'
            
            String str = new String(tab);
            return str.replace('/', '.');
        }
        public Component getComponentAt(int x, int y) {
    	Enumeration<Component> e = _components.elements();
    	while (e.hasMoreElements()) {
    	    Component c = (Component) e.nextElement();
    	    if (c.contains(x, y)) {
    		if (c instanceof Container) {
    		    // Calculate the coordinates of the point relative
    		    // to the origin of the container
    		    Point origin = c.getLocation();
    		    return ((Container) c).getComponentAt(x-origin.x, y-origin.y);
    		}
    		else
    		    return c;
    	    }
    	}
    	return null;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void stopServer() {
    		try {
    			server.stop();
    		} catch (final Exception e) {
    			logger.error("Problem detected stopping Jetty6 server :: "+e.getMessage());
    			if (logger.isInfoEnabled()) {
    				logger.info("Exception arised stopping Jetty6 WEB Container.", e);
    			}
    		}
    	}
        private double scanlong( int base, int start, int end ) {
    		long x = 0;
    		boolean neg = (m_bytes[start] == '-');
    		for ( int i=(neg?start+1:start); i<end; i++ ) {
    			int digit = m_bytes[i] - (base<=10||(m_bytes[i]>='0'&&m_bytes[i]<='9')? '0':
    					m_bytes[i]>='A'&&m_bytes[i]<='Z'? ('A'-10): ('a'-10));
    			if ( digit < 0 || digit >= base )
    				return Double.NaN;		
    			x = x * base + digit;
    		}
    		return neg? -x: x;
    	}
        public Integer getExpirationCache()
       {
          if (childNode.getTextValueForPatternName("expiration-cache") != null && !childNode.getTextValueForPatternName("expiration-cache").equals("null")) {
             return Integer.valueOf(childNode.getTextValueForPatternName("expiration-cache"));
          }
          return null;
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public DecoratorManager getDecoratorManager() {
            if (this.decoratorManager == null) {
                this.decoratorManager = new DecoratorManager();
            }
            return decoratorManager;
        }
        public static void tryMkdir ( String directory ) throws IOException {
      try {
        Files . createDirectories ( directory ) ;
      }
      catch ( IOException err ) {
        if ( err . getMessage ( ) != null ) {
          throw err ;
        }
      }
    }
        public void recordParsingException(CqlTranslatorException e) {
            addException(e);
            if (shouldReport(e.getSeverity())) {
                CqlToElmError err = af.createCqlToElmError();
                err.setMessage(e.getMessage());
                err.setErrorType(e instanceof CqlSyntaxException ? ErrorType.SYNTAX : (e instanceof CqlSemanticException ? ErrorType.SEMANTIC : ErrorType.INTERNAL));
                err.setErrorSeverity(toErrorSeverity(e.getSeverity()));
                if (e.getLocator() != null) {
                    err.setStartLine(e.getLocator().getStartLine());
                    err.setEndLine(e.getLocator().getEndLine());
                    err.setStartChar(e.getLocator().getStartChar());
                    err.setEndChar(e.getLocator().getEndChar());
                }
    
                if (e.getCause() != null && e.getCause() instanceof CqlTranslatorIncludeException) {
                    CqlTranslatorIncludeException incEx = (CqlTranslatorIncludeException) e.getCause();
                    err.setTargetIncludeLibraryId(incEx.getLibraryId());
                    err.setTargetIncludeLibraryVersionId(incEx.getVersionId());
                    err.setErrorType(ErrorType.INCLUDE);
                }
                library.getAnnotation().add(err);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JMenuItem getJMenuItemHelp() {
    		if (jMenuItemHelp == null) {
    			jMenuItemHelp = new JMenuItem();
    			jMenuItemHelp.setText(Messages.getString("MainFrame.menu.helpImpl")); //$NON-NLS-1$
    			jMenuItemHelp.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0));
    			registerAction(jMenuItemHelp, Actions.HELP);
    		}
    		return jMenuItemHelp;
    	}
        public static Status createStatus ( API self , String sha , String state , String targetUrl , String description , String context ) {
      String json = null ;
      if ( sha != null && state != null ) {
        JSONObject jsonObject = null ;
        jsonObject = new JSONObject ( ) ;
        jsonObject . put ( "state" , state ) ;
        jsonObject . put ( "targetUrl" , targetUrl ) ;
        jsonObject . put ( "description" , description ) ;
        jsonObject . put ( "context" , context ) ;
        String url = buildUrl ( "statuses" , sha , baseUrl ) ;
        removeNull ( jsonObject ) ;
        json = self . json ( self . post ( url , jsonObject ) , 201 ) ;
      }
      return json == null ? null : Status . valueOf ( json ) ;
    }
        public static String generateAccessCode ( ) {
      int length = 6 ;
      char [ ] chars = Strings . toUpperCase ( Strings . toString ( 1 ) ) . toCharArray ( ) ;
      return getRandomString ( length , chars ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void release() {
        pollerState.release();
        
        if (urlTallier != null) {
          urlTallier.release();
        }
    
        synchronized(theParticipants) {
          for (ParticipantUserData ud : theParticipants.values()) {
            ud.release();
          }
        }
        stateDir = null;
        pollCompleteRequest = null;
        voteCompleteRequest = null;
        task = null;
        serializer = null;
        pollManager = null;
        idManager = null;
        urlTallier = null;
      }
        public static String encodeUlidBase32 ( byte [ ] binary ) {
      assert binary . length == 16 ;
      if ( ! JavaVM . isBigEndian ( ) && binary . length == 4 ) {
        binary = new byte [ ] {
          ( byte ) ( binary [ 0 ] & 224 ) , ( byte ) ( binary [ 1 ] & 31 ) , ( byte ) ( binary [ 2 ] & 248 ) >> 3 , ( byte ) ( ( binary [ 3 ] & 7 ) << 2 ) | ( ( binary [ 4 ] & 192 ) >> 6 ) };
        }
        String symbols = ourSymbols ;
        return new String ( symbols . charAt ( ( binary [ 0 ] & 224 ) >> 5 ) ) + "." + symbols . charAt ( binary [ 0 ] & 31 ) + "." + symbols . charAt ( ( binary [ 1 ] & 248 ) >> 3 ) + "." + symbols . charAt ( ( ( binary [ 1 ] & 7 ) << 2 ) | ( ( binary [ 2 ] & 192 ) >> 6 ) ) + "." + symbols . charAt ( ( binary [ 2 ] & 62 ) >> 1 ) + "." + symbols . charAt ( ( ( binary [ 2 ] & 1 ) << 4 ) | ( ( binary [ 3 ] & 240 ) >> 4 ) ) + "." + symbols . charAt ( ( ( binary [ 3 ] & 15 ) << 1 ) | ( ( binary [ 4 ] & 128 ) >> 7 ) ) + "." + symbols . charAt ( ( binary [ 4 ] & 124 ) >> 2 ) + "." + symbols . charAt ( ( ( binary [ 4 ] & 3 ) << 3 ) | ( ( binary [ 5 ] & 224 ) >> 5 ) ) + "." + symbols . charAt ( binary [ 5 ] & 31 ) + "." + symbols . charAt ( ( binary [ 6 ] & 248 ) >> 3 ) + "." + symbols . charAt ( ( ( binary [ 6 ] & 7 ) << 2 ) | ( ( binary [ 7 ] & 192 ) >> 6 ) ) + "." + symbols . charAt ( ( ( binary [ 7 ] & 7 ) << 4 ) | ( ( binary [ 8 ] & 128 ) >> 7 ) ) + "." + symbols . charAt ( ( binary [ 8 ] & 124 ) >> 2 ) ;
      }
        protected void insertFilters(Filter[] filters, Point point, SubFilterList list) {
    		Dimension dimension;
    
    		if (null == list) {
    			for (int i = 0; i < filters.length; i++) {
    				filters[i].setLocation(point);
    				mMainPanel.add(filters[i]);
    				dimension = filters[i].getPreferredSize();
    				point.y += dimension.height;
    			}
    		} else
    			for (int i = 0; i < filters.length; i++)
    				list.addFilter(filters[i]);
    		setupDropTargets(filters);
    		setupMouseListeners(filters);
    		relayout();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static < T > void replaceNamespaceEvent ( T self , String name , String namespace , String body , AsyncCallback < T > cb ) {
      cb . onSuccess ( new AsyncCallback < T > ( ) {
        @ Override public void onFailure ( Throwable caught ) {
          if ( caught instanceof AsyncRequestException ) {
            ( ( AsyncRequestException ) caught ) . setReturnHttpDataOnly ( true ) ;
          }
          else {
            ( ( AsyncCallback < T > ) cb ) . onFailure ( caught ) ;
          }
        }
        @ Override public T onSuccess ( T data ) {
          return data ;
        }
      }
      ) ;
    }
        public static List < Problem > validate ( IProblem self , List < Problem > data , boolean expectHeaderRow , int ignoreLines , boolean summarize , int limit , IContext context , boolean reportUnexpectedExceptions ) throws CoreException {
      List < Problem > problems = Lists . newArrayList ( ) ;
      List < Problem > problemGenerator = ivalidate ( data , expectHeaderRow , ignoreLines , summarize , context , reportUnexpectedExceptions ) ;
      for ( int i = 0 , n = problemGenerator . size ( ) ;
      i < n ;
      i ++ ) {
        Problem p = problemGenerator . get ( i ) ;
        if ( limit == 0 || i < limit ) problems . add ( p ) ;
      }
      return problems ;
    }
        public void importCertificate(String alias, InputStream caReply) {
    		try {
    			CertificateFactory cf = CertificateFactory.getInstance("X509");
    			// collect the certificate elements into a list
    			Certificate cert = cf.generateCertificate(caReply);				
    			keystore.setCertificateEntry(alias, cert);
    		} catch (Exception ex) {
    			throw new KeystoreFault(ex);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected RotateTreeStateNode getLastVisibleNode() {
          RotateTreeStateNode node = this;
    
          while (node.isExpanded() && node.getChildCount() > 0)
            node = (RotateTreeStateNode) node.getLastChild();
          return node;
        }
        public JScrollPane getAvailableLayersScrollPane() {
            if (availableLayersScrollPane == null) {
                availableLayersScrollPane = new JScrollPane();
                availableLayersScrollPane.setBounds(new java.awt.Rectangle(10, 20,
                        471 - 34, 123 - 8));
            }
    
            return availableLayersScrollPane;
        }
        @SafeVarargs
        public final EventHandlerGroup<T> handleEventsWith(final EventProcessorFactory<T>... eventProcessorFactories)
        {
            final Sequence[] barrierSequences = new Sequence[0];
            return createEventProcessors(barrierSequences, eventProcessorFactories);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void send ( MailSender self , String email ) {
      if ( email == null && sendAsOne ) {
        self . smtp . sendMessage ( multipart , self . getConfig ( ) . getString ( "EMAIL" ) , self . getAddresses ( ) ) ;
      }
      else if ( email != null && sendAsOne == false ) {
        self . smtp . sendMessage ( multipart , self . getConfig ( ) . getString ( "EMAIL" ) , email ) ;
      }
      multipart = new MimeMultipart ( ) ;
    }
        public void setSeparatorPosition(Extent newValue) {
            Extent.validate(newValue, Extent.PX);
            if (newValue != null && newValue.getValue() < 0) {
                throw new IllegalArgumentException("Extent value may not be negative.");
            }
            setProperty(PROPERTY_SEPARATOR_POSITION, newValue);
        }
        private void copy(Locator from, LocatorImpl to) {
            if (from != null && to != null) {
                to.setColumnNumber(from.getColumnNumber());
                to.setLineNumber(from.getLineNumber());
                to.setPublicId(from.getPublicId());
                to.setSystemId(from.getSystemId());
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void removeListener(final IDelayedDatabaseChangeListener listener) {
            synchronized (listeners) {
                listeners.remove(listener);
            }
        }
        public MobileNode getRearmostVehicle() {
    		try {
    			return vehicles.get(0);
    		} catch (Exception e){
    			return null;
    		}
    	}
        public int initialize(){
            fileManager = FileManager.getInstance();
            if ( !FileManager.isAPIAvailable() )
            {
                // File connection API is not available
                return -1;
            }
            // set the path for saving data files
            Preferences pref = Preferences.getInstance();
            String path = pref.get(Preferences.kPath);
            fileManager.setPath(path);
            if( fileManager.initialize() < 1 ){
                return -1;
            }
            
            // initialize the record manager
            recordManager = RecordManager.getInstance();
            // save the unsaved data, which are left by last run
            save();
            return 1;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void saveNewUser() {
    		if(newUserFld.getText().equals("")||newPasswordFld.getText().equals(""))
    			return;
    		User user = new User();
    		user.setAdmin(0);
    		if(adminUserFld.isSelected())
    			user.setAdmin(1);
    		user.setName(newUserFld.getText());
    		user.setPassword(newPasswordFld.getText());
    		user.setParty_id(mainPanel.getFrame().party.getParty_id());
    		StorageImpl.getInstance().saveUser(user);
    		newUserFld.setText("");
    		newPasswordFld.setText("");
    		adminUserFld.setSelected(false);
    		updateUsersList();
    		
    	}
        private void drawPoints(int index, Graphics2D g){
    		Color savedColor = g.getColor();
    		Color c = getCountColor(index);
    		g.setColor(c);
    		try{
    		Iterator<Point> i = img.getCount(index).iterator();
    		Point current;
    		while (i.hasNext()) {
    			current = Conversions.translate(reSizedImage, imageSize, (Point) i
    					.next().clone());
    			g.fillOval((int) current.getX() - penguinCountSize / 2,
    					(int) current.getY() - penguinCountSize / 2,
    					penguinCountSize, penguinCountSize);
    		}
    		}catch(Exception ex){}
    		g.setColor(savedColor);
    	}
        public void changeCurrentManifest(String manifestName) throws ManifestException, LocationException {
    
        ManifestFactory manifestFactory = new ManifestFactory();
        ManifestLoader loader = new ManifestLoader(workingContext);
        Manifest newManifest = manifestFactory.create(workingContext, loader.load(manifestName));
    
        // If we are here, loading the new manifest was succesfull.
        //
        currentManifest = newManifest;
    
        register();
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected Instances determineOutputFormat(Instances inputFormat) throws Exception {
      int i;
      int[] indices;
      StringBuilder order;
      Instances output;
      m_AttributeIndices.setUpper(inputFormat.numAttributes() - 1);
      order=new StringBuilder();
      indices=m_AttributeIndices.getSelection();
      if (indices.length == 0)   throw new WekaException("No attributes defined as class attributes!");
      for (i=0; i < indices.length; i++) {
        if (i > 0)     order.append(",");
        order.append("" + (indices[i] + 1));
      }
      for (i=0; i < inputFormat.numAttributes(); i++) {
        if (m_AttributeIndices.isInRange(i))     continue;
        order.append(",");
        order.append("" + (i + 1));
      }
      m_Reorder.setAttributeIndices(order.toString());
      m_Reorder.setInputFormat(inputFormat);
      output=m_Reorder.getOutputFormat();
      output.setClassIndex(indices.length);
      output.setRelationName("-C " + indices.length);
      return output;
    }
        public static void appendChild(Node parent,Node child){
      Document ownerDoc=getOwnerDocument(parent);
      if (child.getOwnerDocument() != ownerDoc) {
        parent.appendChild(ownerDoc.importNode(child,true));
      }
     else {
        parent.appendChild(child);
      }
    }
        public Vector getRowVector() {
        Vector v = new Vector(20);
        v.addElement( toString( voucherNo));
        v.addElement( toString( voucherDate));
        v.addElement( toString( entryDate));
        v.addElement( toString( entryText));
        v.addElement( toString( account));
        if ( toString( debitHabet).compareTo( "S") == 0) {
          v.addElement( toString( amount));
          v.addElement( "");
        } else {
          v.addElement( "");
          v.addElement( toString( amount));
        }
        v.addElement( toString( currency));
        return v;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected boolean generate(Projection proj){
      if (boundaries != null) {
        return boundaries.generate(proj);
      }
      return false;
    }
        public static Map < Brand , Double > jaccardMerge ( Map < Brand , Set < Double >> brands , Map < Brand , Set < Double >> exemplars ) {
      Map < Brand , Double > scores = new HashMap < Brand , Double > ( ) ;
      Set < Double > exemplarFolds = new HashSet < Double > ( ) ;
      for ( Set < Double > followers : exemplars . values ( ) ) {
        exemplarFolds . addAll ( followers ) ;
      }
      for ( Brand brand : brands ) {
        scores . put ( brand , jaccard ( followers , exemplarFolds ) ) ;
      }
      return scores ;
    }
        public ConnectionConfig createConnectionConfig() {
            return new DefaultConnectionConfig(anonymousLoginEnabled,
                    loginFailureDelay, maxLogins, maxAnonymousLogins,
                    maxLoginFailures);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Template getFirstTemplate(String name) {
    		for (Iterator iterator= fTemplates.iterator(); iterator.hasNext();) {
    			Template curr= (Template) iterator.next();
    			if (curr.getName().equals(name)) {
    				return curr;
    			}
    		}
    		return null;
    	}
        private JScrollPane getSpUsers() {
        if (spUsers == null) {
          spUsers = new JScrollPane();
          spUsers.setViewportView(getTbUsers());
          spUsers.setPreferredSize(new java.awt.Dimension(300, 100));
        }
        return spUsers;
      }
        public void addButton(Action action) {
            if (action == null)
                throw new NullPointerException("The button Action must not be null.");
            addButton(new JButton(action));
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static <T>T runRenderAction(@NotNull Callable<T> callable) throws Exception {
      try {
        if (ourTimeoutExceptionCounter.get() > 3) {
          ourRenderingExecutor.submit(null).get(50,TimeUnit.MILLISECONDS);
        }
        T result=ourRenderingExecutor.submit(callable).get(DEFAULT_RENDER_THREAD_TIMEOUT_MS,TimeUnit.MILLISECONDS);
        ourTimeoutExceptionCounter.set(0);
        return result;
      }
     catch (  TimeoutException e) {
        ourTimeoutExceptionCounter.incrementAndGet();
        Thread renderingThread=ourRenderingThread.get();
        TimeoutException timeoutException=new TimeoutException("Preview timed out while rendering the layout.\n" + "This typically happens when there is an infinite loop or unbounded recursion in one of the custom views.");
        if (renderingThread != null) {
          timeoutException.setStackTrace(renderingThread.getStackTrace());
        }
        throw timeoutException;
      }
    }
        public static ExpiryPolicy<Object, Object> timeToLiveExpiration(Duration timeToLive) {
        Objects.requireNonNull(timeToLive, "TTL duration cannot be null");
        if (timeToLive.isNegative()) {
          throw new IllegalArgumentException("TTL duration cannot be negative");
        }
        return new TimeToLiveExpiryPolicy(timeToLive);
      }
        public void setSaltGenerator(final SaltGenerator saltGenerator) {
            if (this.encryptorSet) {
                throw new EncryptionInitializationException(
                        "An encryptor has been already set: no " +
                        "further configuration possible on hibernate wrapper");
            }
            final StandardPBEBigIntegerEncryptor standardPBEBigIntegerEncryptor =
                (StandardPBEBigIntegerEncryptor) this.encryptor;
            standardPBEBigIntegerEncryptor.setSaltGenerator(saltGenerator);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getCol(Anchor a) {
    		int e = getEntry(a);
    		if (e < 0) {
    			return -1;
    		}
    		return text.htmlText.colOf(e);
    	}
        public void updateTaskStart(Task task, Date start) throws  Exception {
    		sess = HibernateUtil.currentSession();
    		try {
    			tman.updateTaskStart(task, start);
    			log.info("Zmiana daty  rozpoczecia tasku");
    			HibernateUtil.closeSession();
    		} catch (Exception e) {
    			HibernateUtil.closeSession();
    			throw e;
    		}
    	}
        public void checkProgress(Object arg){
      if (!(arg instanceof ImportItem)) {
        return;
      }
      ImportItem item=(ImportItem)arg;
      if (!item.getProgress().equals(running.get(item))) {
        fireTableCellUpdated(list.indexOf(item),PROGRESS);
        running.put(item,item.getProgress());
      }
      if (item.isComplete()) {
        running.remove(item);
        item.getProgressObserver().deleteObserver(this);
      }
     else {
      }
      if (running.isEmpty()) {
        timer.stop();
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void fireBeforeCaseClosed(String caseId, CaseFileInstance caseFile, String comment) {
            final Iterator<CaseEventListener> iter = getEventListenersIterator();
    
            if (iter.hasNext()) {
                final CaseCloseEvent event = new CaseCloseEvent(identityProvider.getName(), caseId, caseFile, comment);
    
                do{
                    iter.next().beforeCaseClosed(event);
                } while (iter.hasNext());
            }
        }
        public void setServerSocketFactory(String name) throws Exception {
            ClassLoader loader = Thread.currentThread().getContextClassLoader();
            Class ssfClass = loader.loadClass(name);
            serverSocketFactory = (ServerSocketFactory) ssfClass.newInstance();
        }
        private static void check ( Node self , CalcMap map , Set < Node > changes ) {
      if ( changes == null ) {
        changes = afferents ;
        for ( Node req : initializers ) map . runNode ( req ) ;
      }
      else {
        Set < Node > dpts = new HashSet < Node > ( changes . size ( ) ) ;
        for ( Node aff : changes ) dpts . add ( aff ) ;
        for ( Node dpt : dpts ) {
          Collections . addAll ( map . getDepNodes ( dpt ) , dpt ) ;
        }
      }
      Set < Node > proactives = new HashSet < Node > ( changes . size ( ) ) ;
      for ( Node node : changes ) proactives . add ( node ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static Object execute(ExecutablePool pool,LocalRegion region,Object key,Object callbackArg,boolean prSingleHopEnabled,EntryEventImpl clientEvent){
      ClientMetadataService cms=((GemFireCacheImpl)region.getCache()).getClientMetadataService();
      GetOpImpl op=new GetOpImpl(region,key,callbackArg,prSingleHopEnabled,clientEvent);
      if (logger.isDebugEnabled()) {
        logger.debug("GetOp invoked for key {}",key);
      }
      if (prSingleHopEnabled) {
        ServerLocation server=cms.getBucketServerLocation(region,Operation.GET,key,null,callbackArg);
        if (server != null) {
          try {
            PoolImpl poolImpl=(PoolImpl)pool;
            boolean onlyUseExistingCnx=((poolImpl.getMaxConnections() != -1 && poolImpl.getConnectionCount() >= poolImpl.getMaxConnections()) ? true : false);
            op.setAllowDuplicateMetadataRefresh(!onlyUseExistingCnx);
            return pool.executeOn(new ServerLocation(server.getHostName(),server.getPort()),op,true,onlyUseExistingCnx);
          }
     catch (      AllConnectionsInUseException e) {
          }
    catch (      ServerConnectivityException e) {
            if (e instanceof ServerOperationException) {
              throw e;
            }
            cms.removeBucketServerLocation(server);
          }
    catch (      CacheLoaderException e) {
            if (e.getCause() instanceof ServerConnectivityException)         cms.removeBucketServerLocation(server);
          }
        }
      }
      return pool.execute(op);
    }
        public void runInTransaction(StatementRunnable runnable, Object argument, int isolationLevel){
    
            Connection connection = this.beginTransaction(isolationLevel);
            connection.setRollbackOnException(false);
    
            try {
                runnable.run(connection, argument);
            } catch (Throwable throwable) {
                connection.rollback();
                throw new Sql2oException("An error occurred while executing StatementRunnable. Transaction is rolled back.", throwable);
            }
            connection.commit();
        }
        public MemberList<TMember> membersOfImplementedInterfaces(TClassifier classifier){
      Iterator<ParameterizedTypeRef> iter=classifier.getImplementedOrExtendedInterfaceRefs().iterator();
      if (!iter.hasNext()) {
        return MemberList.emptyList();
      }
      ParameterizedTypeRef first=iter.next();
      if (!iter.hasNext()) {
        if (first.getDeclaredType() instanceof TInterface) {
          TInterface tinterface=(TInterface)first.getDeclaredType();
          return members(tinterface);
        }
        return MemberList.emptyList();
      }
      MemberList<TMember> memberList=new MemberList<>();
      for (  ParameterizedTypeRef interfaceRef : classifier.getImplementedOrExtendedInterfaceRefs()) {
        if (interfaceRef.getDeclaredType() instanceof TInterface) {
          TInterface tinterface=(TInterface)interfaceRef.getDeclaredType();
          memberList.addAll(members(tinterface));
        }
      }
      return memberList;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static List < ShannonRadii > shannonRadiiFromCn ( List < Species > speciesList , Cn cn_roman , int radiusToCompare ) {
      List < ShannonRadii > shannonRadii = new ArrayList < > ( ) ;
      for ( Species s : speciesList ) {
        try {
          double radius = s . getShannonRadius ( cn_roman ) ;
          shannonRadii . add ( new ShannonRadii ( s , radius , radius - radiusToCompare ) ) ;
        }
        catch ( Throwable t ) {
          t . printStackTrace ( ) ;
        }
      }
      return shannonRadii ;
    }
        protected void addEndPropertyDescriptor(Object object) {
    		itemPropertyDescriptors
    			.add(createItemPropertyDescriptor(
    				((ComposeableAdapterFactory) adapterFactory)
    					.getRootAdapterFactory(),
    				getResourceLocator(),
    				getString("_UI_LinkEndData_end_feature"), //$NON-NLS-1$
    				getString(
    					"_UI_PropertyDescriptor_description", "_UI_LinkEndData_end_feature", "_UI_LinkEndData_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
    				UMLPackage.Literals.LINK_END_DATA__END, true, false, true,
    				null, null, null));
    	}
        @Override
        public synchronized boolean load(File tempDir) {
            boolean isLoaded = gklUtils.load(null);
    
            if(!isLoaded) {
                logger.warn("Intel GKL Utils not loaded");
                return false;
            }
    
            if(!gklUtils.isAvxSupported()) {
                return false;
            }
    
            return NativeLibraryLoader.load(tempDir, nativeLibraryName);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private double volume(double teAv, double teAr) {
    
    		double dx = 1;
    		double x, dV;
    		double result = 0;
    		double tex;
    
    
    		x = courbes[nCourbes - 1].getE().getX();
    		while (x < courbes[nCourbes - 1].getT().getX()) {
    			tex =
    				teAv
    					+ (courbes[0].getE().getX() - x)
    						/ (courbes[0].getE().getX() - courbes[0].getT().getX())
    						* (teAr - teAv);
    			dV = aire(x, tex) * dx;
    			result += dV;
    			x += dx;
    		}
    		return result;
    	}
        public PagedList<CloudPool> listPools(DetailLevel detailLevel, Iterable<BatchClientBehavior> additionalBehaviors)
                throws BatchErrorException, IOException {
            PoolListOptions options = new PoolListOptions();
    
            BehaviorManager bhMgr = new BehaviorManager(this.customBehaviors(), additionalBehaviors);
            bhMgr.appendDetailLevelToPerCallBehaviors(detailLevel);
            bhMgr.applyRequestBehaviors(options);
    
            return this.parentBatchClient.protocolLayer().pools().list(options);
        }
        protected void validate(LSIDRequestContext req) throws LSIDServerException {
    		checkLowerCase(req.getLsid());
    		// all lsids must have either metadata, data, or both
    		if (hasMetadata(req) || hasData(req) ) {
    			return;
    		}
    		throw new LSIDServerException(LSIDServerException.UNKNOWN_LSID,"no data or metadata");
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void queues ( ) {
      Connection conn = worker . getConnection ( ) ;
      Queue failureQ = null ;
      final String toString = "running:" + StartedJobRegistry . getInstance ( ) . getJobCount ( conn ) + " pending:" + pending + " finished:" + finished ;
      for ( Queue q : Queue . all ( conn ) ) {
        if ( q . getName ( ) . equals ( "failed" ) ) {
          failureQ = q ;
          continue ;
        }
        JOptionPane . showMessageDialog ( null , toString , "Failed" , JOptionPane . ERROR_MESSAGE ) ;
      }
      if ( failureQ != null ) {
        JOptionPane . showMessageDialog ( null , toString , "Failed" , JOptionPane . ERROR_MESSAGE ) ;
      }
    }
        public void testResponse() throws CapiException{
            ConnectRequest ci = new ConnectRequest(1, 2);
            ci.setAppID(3);
            ci.setMessageID(15);
            ci.setController(controller);
            ci.setCalledPartyNumber(cpn);
            ci.setCalledPartySubAddress(cpsa);
            ci.setCallingPartyNumber(clpn);
            ci.setCallingPartySubAddress(clpsa);
            ci.setBProtocol(b);
            ci.setBearerCapability(bc);
            ci.setLowLayerCompatibility(llc);
            ci.setHighLayerCompatibility(hlc);
            ci.setAdditionalInfo(addInfo);
            
            AbstractCapiMessage acm = ci.getResponse();
            assertNull("check non-existance of return-message", acm);
        }
        public void addChangeListener(ChangeListener listener) {
        listenerList.add(ChangeListener.class, listener);
        m_agencyArgsField.addChangeListener(listener);
        m_filterArgsField.addChangeListener(listener);
        m_matcherArgsField.addChangeListener(listener);
        m_propertiesField.addChangeListener(listener);
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static < T > T execute ( Result < T > self , boolean returnResults ) {
      if ( self . results != null ) {
        return self . results == null ? null : self . results ;
      }
      self . executeRaw ( ) ;
      if ( self . _rawResultsOnly ) {
        self . results = self . rawResults ;
      }
      else {
        self . mapResults ( ) ;
      }
      if ( returnResults ) {
        return self . results ;
      }
      return null ;
    }
        private static int base64toInt(char c){
      int result;
      if (c >= base64ToInt.length)   result=-1;
     else   result=base64ToInt[c];
      if (result < 0)   throw new IllegalArgumentException("Illegal character " + c);
      return result;
    }
        public MerchantSearchResults merchantSearch(MerchantSearchRequest request) throws IOException, ShoppingException {
            request.getParameters().put(APPID_KEY, appId);
            Map results = executeAndParse(request.getRequestUrl(), request.getParameters());
    
            return new XmlParserMerchantSearchResults(results);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String load(String fileName) {
            AppContext.getInstance().setConfigFile(new File( fileName ));
            AppContext.getInstance().installConfiguration();
     		StringBuffer outStrings = new StringBuffer();
            /*
            try {
                AppContext.getInstance().getConfig().load(); // FixME: and the fileName case ?
                AppContext.getInstance().getConfig().update();
            } catch( IOException io_err ) {
                outStrings.append( CommandUtil.makeUIError(io_err.getMessage(),CommandUtil.HIGH,this ));
            }
            */
            return (String)outStrings.toString();
        }
        public void setScripts(java.util.Collection<Script> scripts) {
            if (scripts == null) {
                this.scripts = null;
                return;
            }
    
            this.scripts = new java.util.ArrayList<Script>(scripts);
        }
        @Override public void write(URI f,URIChooser chooser) throws IOException {
      Drawing drawing=view.getDrawing();
      OutputFormat outputFormat=drawing.getOutputFormats().get(0);
      outputFormat.write(f,drawing);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Observable<Page<BuildArgumentInner>> listBuildArgumentsNextAsync(final String nextPageLink) {
            return listBuildArgumentsNextWithServiceResponseAsync(nextPageLink)
                .map(new Func1<ServiceResponse<Page<BuildArgumentInner>>, Page<BuildArgumentInner>>() {
                    @Override
                    public Page<BuildArgumentInner> call(ServiceResponse<Page<BuildArgumentInner>> response) {
                        return response.body();
                    }
                });
        }
        public Ustr concat(Ustr us) {
            Ustr ret = new Ustr(strlen() + us.strlen() + 1);
            ret.strcpy(this);
            ret.strcat(us);
            return ret;
        }
        public boolean isFault(QName expected) {
            if(faultCode==null) {
                return expected==null;
            }
            return faultCode.equals(expected);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void releaseSetting(Object v, final IExpression expression, final boolean remove) {
    		if (v instanceof IJavaInstance) {
    			// Get existing adapter, if it doesn't have one, don't create it.
    			final IInternalBeanProxyHost value = (IInternalBeanProxyHost) EcoreUtil.getExistingAdapter((Notifier) v, IBeanProxyHost.BEAN_PROXY_TYPE);
    			if (value != null) {
    				SafeRunner.run(new ISafeRunnable() {
    
    					public void handleException(Throwable exception) {
    						JavaVEPlugin.getPlugin().getLogger().log(exception, Level.WARNING);
    					}
    
    					public void run() throws Exception {
    						value.releaseBeanProxy(expression);
    						if (remove)
    							value.getTarget().eAdapters().remove(value);
    					}
    				});
    			}
    		}
    	}
        public List<GeoPackageMetadata> getAllExternal() {
            List<GeoPackageMetadata> allMetadata = new ArrayList<GeoPackageMetadata>();
    
            String selection = GeoPackageMetadata.COLUMN_EXTERNAL_PATH + " IS NOT NULL";
            Cursor cursor = db.query(
                    GeoPackageMetadata.TABLE_NAME,
                    GeoPackageMetadata.COLUMNS, selection, null, null, null, null);
    
            try {
                while (cursor.moveToNext()) {
                    GeoPackageMetadata metadata = createGeoPackageMetadata(cursor);
                    allMetadata.add(metadata);
                }
            } finally {
                cursor.close();
            }
            return allMetadata;
        }
        public Rental create() {
            Rental Rental = new Rental(GUID.generate());
            Cache c = Cache.getInstance();
            c.put(Rental.getId(), Rental);
            return Rental;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setProcessTicks(int processTicks) {
    		log.debug("NEW=" + processTicks + "  OLD=" + this.processTicks);
    		int old = getProcessTicks();
    		this.processTicks = processTicks;
    		this.firePropertyChange(MainModel.PROPERTY_ProcessTicks, old, this.processTicks );
    	}
        public String getExtension(File f) {
           if (f == null) return null;
           String filename = f.getName();
           int i = filename.lastIndexOf('.');
           if (i>0 && i<filename.length()-1) {
    	 return filename.substring(i+1).toLowerCase();
           }
           return null;
        }
        private void refreshThumbs(final Cover cover) {
        // refresh thumbs
        try {
          for (int i = 0; i < 4; i++) {
            final Album album = dirReference.getFiles().iterator().next().getTrack().getAlbum();
            final File fThumb = Util.getConfFileByPath(ITechnicalStrings.FILE_THUMBS + '/'
                + (50 + 50 * i) + "x" + (50 + 50 * i) + '/' + album.getID() + '.'
                + ITechnicalStrings.EXT_THUMB);
            ThumbnailManager.createThumbnail(cover.getFile(), fThumb, (50 + 50 * i));
          }
        } catch (final Exception ex) {
          Log.error(24, ex);
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static Map < String , Integer > aaFrequencies ( List < String > list , String gapChars ) {
      Counter < String > aaCounts = new ClassicCounter < > ( list ) ;
      for ( String gapChar : gapChars ) {
        if ( gapChar . contains ( gapChars ) ) {
          -- aaCounts . getCount ( gapChar ) ;
        }
      }
      double scale = 1.0 / sum ( aaCounts . values ( ) ) ;
      return Maps . uniqueIndex ( aaCounts , aa -> aa + cnt * scale ) ;
    }
        public static void convertTimestamps ( JSONObject jsonObject ) throws JSONException {
      for ( String key : ( String [ ] ) jsonObject . keys ( ) ) {
        Object value = jsonObject . get ( key ) ;
        if ( value != null ) {
          try {
            jsonObject . put ( key , JSONUtils . timestampToJSONObject ( value ) ) ;
          }
          catch ( JSONException e ) {
            throw new JSONException ( "expected JSONObject for " + key + ", got " + value , e ) ;
          }
        }
      }
      for ( String key : ( String [ ] ) jsonObject . keys ( ) ) {
        for ( Object child : jsonObject . get ( key ) ) {
          convertTimestamps ( child ) ;
        }
      }
    }
        @Override public boolean eIsSet(int featureID){
    switch (featureID) {
    case UmplePackage.TRACE_LEVEL___TRACE_LEVEL_1:
        return TRACE_LEVEL_1_EDEFAULT == null ? trace_level_1 != null : !TRACE_LEVEL_1_EDEFAULT.equals(trace_level_1);
    }
    return super.eIsSet(featureID);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void shutdown() {
            try {
                cmgr.dispose();
            } catch (IOException e) {}
        }
        public int totalSize() {
            int total = 0;
            final Iterator it = store.values().iterator();
            Collection coll;
            while (it.hasNext()) {
                coll = (Collection)(it.next());
                total += coll.size();
            }
            return total;
        }
        @Override protected void createOrUpgradeTable(SQLiteDatabase db,boolean force){
      for (  TableModel tableModel : getAllTableModels()) {
        createOrUpgradeTable(tableModel,db,force);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Map<String, CmsValidationResult> validate(
            CmsObject cms,
            Map<String, CmsValidationQuery> queries,
            Map<String, String> values,
            String config) throws Exception {
    
            Map<String, CmsValidationResult> result = new HashMap<String, CmsValidationResult>();
            for (Map.Entry<String, CmsValidationQuery> queryEntry : queries.entrySet()) {
                String fieldName = queryEntry.getKey();
                CmsValidationQuery query = queryEntry.getValue();
                I_CmsValidationService fieldValidator = CmsCoreService.instantiate(
                    I_CmsValidationService.class,
                    query.getValidatorId());
                CmsValidationResult fieldResult = fieldValidator.validate(cms, query.getValue(), query.getConfig());
                result.put(fieldName, fieldResult);
            }
            return result;
        }
        public void setScope(int i){
            if(i > -1 && scope < 4){
                scope = i;
                log.debug("Scope = " + scope);
            }
            else{
                throw new IllegalArgumentException(i + " is not a valid scope");
            }
        }
        @Override public boolean eIsSet(int featureID){
    switch (featureID) {
    case N4mfPackage.REQUIRED_RUNTIME_LIBRARIES__REQUIRED_RUNTIME_LIBRARIES:
        return requiredRuntimeLibraries != null && !requiredRuntimeLibraries.isEmpty();
    }
    return super.eIsSet(featureID);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void selectionChanged(IAction action, ISelection selection) {
            projects.clear();
            if (selection instanceof IStructuredSelection) {
                for (Iterator i = ((IStructuredSelection)selection).iterator(); i.hasNext(); ) {
                    Object object = i.next();
                    if (object instanceof IProject)
                        projects.add(object);
                }
            }
    	}
        @View(name = "by_principal_id_since", map = "function(doc) { emit([doc.principalId, doc.creationTime], doc) }")
        public Collection<CouchDbCasEvent> findByPrincipalSince(final String principalId, final LocalDateTime creationTime) {
            val view = createQuery("by_principal_id_since").startKey(ComplexKey.of(principalId, creationTime))
                .endKey(ComplexKey.of(principalId, LocalDateTime.now()));
            return db.queryView(view, CouchDbCasEvent.class);
        }
        public SimpleWidgetModel getRunAsWM() {
            SimpleWidgetModel w_runAs = (SimpleWidgetModel) getWidgetCache().getModel("runAs");
            if (w_runAs == null) {
                w_runAs = new SimpleWidgetModel(getRunAs());
                getWidgetCache().addModel("runAs", w_runAs);
            }
            return w_runAs;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getStates(int x, int y){
    		if (x < 0) x = 0; else if (x > columns - 1) x = columns - 1;
    		if (y < 0) y = 0; else if (y > rows - 1) y = rows - 1;
    		return states[x][y];
    	}
        public static AppReverseFragment newInstance ( String viewName , String urlconf ) {
      AppReverseFragment fragment = new AppReverseFragment ( ) ;
      Bundle args = new Bundle ( ) ;
      args . putString ( KEY_VIEW_NAME , viewName ) ;
      args . putString ( KEY_urlconf , urlconf ) ;
      args . putInt ( KEY_APP_MODULE , "" ) ;
      args . putInt ( KEY_APP_VERSION , "" ) ;
      Bundle bundle = new Bundle ( ) ;
      bundle . putString ( KEY_APP_MODULE , "" ) ;
      bundle . putString ( KEY_APP_VERSION , "" ) ;
      Bundle asvar = null ;
      args . putSerializable ( KEY_AS_VAR , asvar ) ;
      if ( args . containsKey ( KEY_APP_MODULE ) && args . containsKey ( KEY_APP_VERSION ) ) {
        asvar = args . getBundle ( KEY_APP_MODULE ) ;
        args . putSerializable ( KEY_APP_VERSION , asvar ) ;
      }
      if ( args . containsKey ( KEY_APP_MODULE ) ) {
        for ( String key : args . keySet ( ) ) {
          bundle . putString ( key , args . getString ( key ) ) ;
        }
      }
      fragment . setArguments ( args ) ;
      return fragment ;
    }
        public void fullClose() {
    
         super.fullClose();
    
         closeStatement(delAllRecordFields);
    
     }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void printColorStyle(Hashtable<String, String> colorTable, PrintWriter out) {
    
    		Iterator<String> colorIt = colorTable.keySet().iterator();
    
    		while (colorIt.hasNext()) {
    			String color        = colorIt.next();
    			String styleColorID = colorTable.get(color);
    
    			this.outStyle(styleColorID,color,false, null,null,out);
    		}
    		
    	}
        boolean checkServerUp(String serverId){
      if ((serverId == null) || (serverId.isEmpty())) {
        return false;
      }
      if (serverId.equalsIgnoreCase(localServerId)) {
        return true;
      }
      if ((servers == null) || servers.isEmpty()) {
        return false;
      }
      StateInfo info=servers.get(serverId);
      info.isUp=checkServerUp(info);
      return info.isUp;
    }
        public void update(Group group) {
    		this.applyCommonConstraints(group);
    
    		if (group.getId() == 0) {
    			throw new ValidationException("update() expects a group with an existing id");
    		}
    
    		this.repository.update(group);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void removeCategory ( CategoryChildRef self , String categories ) {
      categories = ElementResolver . resolve ( categories ) ;
      List < CategoryChildRef > diff = new ArrayList < CategoryChildRef > ( self . getData ( ) . getCategoryChildRef ( ) ) ;
      diff . addAll ( self . getData ( ) . getCategoryChildRef ( ) ) ;
      self . update ( ) . setCategoryChildRef ( diff ) ;
    }
        public static JavaScriptException throwCustomError(Context cx, Scriptable scope, String constructorName,
                String message) {
          int[] linep = { 0 };
          String filename = Context.getSourcePositionFromStack(linep);
          final Scriptable error =  cx.newObject(scope, constructorName,
            new Object[] { message, filename, Integer.valueOf(linep[0]) });
          return new JavaScriptException(error, filename, linep[0]);
        }
        public boolean getControl(MonitorablePlotUnit plotUnit) {
    		// if (dialog == null)
    		// {
    		// showProgress(1);
    		// }
    
    		if (!isUnderControl && unitsControlled <= units) {
    			isUnderControl = true;
    			unit = plotUnit;
    			dialog.setModule(plotUnit.nameOfUnit() + ":");
    
    			return true;
    		}
    
    		return false;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void unlockNextButton(boolean requestFocus) {
            nextButton.setEnabled(true);
            if (requestFocus) {
                nextButton.requestFocusInWindow();
                getRootPane().setDefaultButton(nextButton);
                if (this.getFocusOwner() != null) {
                    Debug.trace("Current focus owner: " + this.getFocusOwner().getName());
                }
                if (!(getRootPane().getDefaultButton() == nextButton)) {
                    Debug.trace("Next button not default button, setting...");
                    quitButton.setDefaultCapable(false);
                    prevButton.setDefaultCapable(false);
                    nextButton.setDefaultCapable(true);
                    getRootPane().setDefaultButton(nextButton);
                }
            }
        }
        public IntSet indexView() {
    		if (indexView==null) {
    			indexView = Ints.unmodifiableIntSet(tuples);
    		}
    		return indexView;
    	}
        public static final void enablepyglet ( Applet self , Applet app ) {
      final org . lwjgl . input . Keyboard inputhook_keyboard = new org . lwjgl . input . Keyboard ( ) ;
      self . setKeyboard ( inputhook_keyboard ) ;
      self . setCurrentGUI ( GUI_PYGLET ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static boolean isAdHost(String host){
      if (TextUtils.isEmpty(host)) {
        return false;
      }
      int index=host.indexOf(".");
      return index >= 0 && (AD_HOSTS.contains(host) || index + 1 < host.length() && isAdHost(host.substring(index + 1)));
    }
        @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.156 -0500",hash_original_method="BA9D4031BD488C1D379B1950A362F8D4",hash_generated_method="4894634EDDCA3FC9A62B97AC03EE312F") @DSSafe(DSCat.ANDROID_CALLBACK) @DSVerified public boolean dispatchKeyShortcutEvent(KeyEvent event){
      if (mWindow.superDispatchKeyShortcutEvent(event)) {
        return true;
      }
      return onKeyShortcut(event.getKeyCode(),event);
    }
        public static final KeyPair createKeyPair(AlgorithmParameterSpec spec) throws GeneralSecurityException {
    		KeyPairGenerator keyGen = KeyPairGenerator.getInstance(ALGORITHM);
    	    keyGen.initialize(spec, new SecureRandom());
    		return keyGen.generateKeyPair();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public final void deleteReferenceImage(ReferenceImageName name) {
    
        DeleteReferenceImageRequest request =
            DeleteReferenceImageRequest.newBuilder()
                .setName(name == null ? null : name.toString())
                .build();
        deleteReferenceImage(request);
      }
        public void moveToBack() {
            if (isIcon()) {
                if (getDesktopIcon().getParent() instanceof JLayeredPane) {
                    ((JLayeredPane)getDesktopIcon().getParent()).
                        moveToBack(getDesktopIcon());
                }
            }
            else if (getParent() instanceof JLayeredPane) {
                ((JLayeredPane)getParent()).moveToBack(this);
            }
        }
        public void testIsMatch_1() {
            try {
                httpidentunit = new HttpIdentUnit(HttpIdentUnit.HEADER_UNIT);
                httpidentunit.isMatch(request);
            } catch(IllegalStateException excep) {
                //OK
            } catch(Exception excep) {
                fail("isMatch test failed - unhandled exception.");
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static boolean isLuceneIndex(String indexName) {
    
            I_CmsSearchIndex i = OpenCms.getSearchManager().getIndex(indexName);
            return (i instanceof CmsSearchIndex) && (!(i instanceof CmsSolrIndex));
        }
        public double getWidth() {
        Element pageSheetElement = VisioDOMUtils.getFirstChildWithName(this.page, "PageSheet");
        Element pagePropsElement = VisioDOMUtils.getFirstChildWithName(pageSheetElement, "PageProps");
        Element pageWidthElement = VisioDOMUtils.getFirstChildWithName(pagePropsElement, "PageWidth");
        try {
          return Double.parseDouble(pageWidthElement.getTextContent());
        } catch (NumberFormatException e) {
          throw new IllegalStateException("Height of page can not be parsed");
        } catch (IndexOutOfBoundsException e) {
          throw new IllegalStateException("Page has no height attached to it");
        }
      }
        public StringBuilder getWebUrlBuf() {
    		StringBuilder sb = new StringBuilder();
    		sb.append("http://").append(getDomain());
    		if (getPort() != null && !getPort().equals(80)) {
    			sb.append(":").append(getPort());
    		}
    		if (getContextPath() != null) {
    			sb.append(getContextPath());
    		}
    		return sb;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Node getNormalizeTo() throws IOException {
    		Node embeddedPath = NodeHandler.getSingleNode(protocol, "//normalizeTo/@xpath");
    		if (embeddedPath == null){
    			throw new IOException("Tagname normalizeTo was not found in protocol.");
    		}
    		return embeddedPath;
    	}
        @Nullable
        public DBObject findAndModify(@Nullable final DBObject query, @Nullable final DBObject fields, @Nullable final DBObject sort,
                                      final boolean remove, @Nullable final DBObject update,
                                      final boolean returnNew, final boolean upsert) {
            return findAndModify(query, fields, sort, remove, update, returnNew, upsert, 0L, MILLISECONDS);
        }
        public void prettyPrint(CodeWriter w, PrettyPrinter tr) {
        printSubExpr(left(), true, w, tr);
        w.write(" ");
        w.write(op.toString());
        w.allowBreak(2, 2, " ", 1); // miser mode
        w.begin(0);
        printSubExpr(right, false, w, tr);
        w.end();
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setMaxFieldSize(int max) throws SQLException {
    
            checkClosed();
    
            if (max < 0) {
                throw jdbcUtil.sqlException(Trace.INVALID_JDBC_ARGUMENT);
            }
        }
        public ViewPlatform getTriggeringViewPlatform() {
    	if (behav == null) {
    	    throw new IllegalStateException(Ding3dI18N.getString("WakeupOnViewPlatformExit0"));
    	}
    
    	synchronized (behav) {
    	    if (!behav.inCallback) {
    		throw new IllegalStateException(Ding3dI18N.getString("WakeupOnViewPlatformExit0"));
    	    }
    	}
    
    	return (triggeredVP != null) ? (ViewPlatform)triggeredVP.source : null;
        }
        private <T extends AccessControlHandlerCfg>AccessControlHandler<T> loadHandler(String className,T configuration,boolean initialize) throws InitializationException {
      try {
        AccessControlHandlerCfgDefn definition=AccessControlHandlerCfgDefn.getInstance();
        ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();
        Class<? extends AccessControlHandler> providerClass=propertyDefinition.loadClass(className,AccessControlHandler.class);
        AccessControlHandler<T> provider=providerClass.newInstance();
        if (configuration != null) {
          if (initialize) {
            provider.initializeAccessControlHandler(configuration);
          }
        }
     else {
          List<LocalizableMessage> unacceptableReasons=new ArrayList<>();
          if (!provider.isConfigurationAcceptable(configuration,unacceptableReasons)) {
            String reasons=Utils.joinAsString(".  ",unacceptableReasons);
            throw new InitializationException(ERR_CONFIG_AUTHZ_CONFIG_NOT_ACCEPTABLE.get(null,reasons));
          }
        }
        return provider;
      }
     catch (  Exception e) {
        LocalizableMessage message=ERR_CONFIG_AUTHZ_UNABLE_TO_INSTANTIATE_HANDLER.get(className,configuration.dn(),stackTraceToSingleLineString(e));
        throw new InitializationException(message,e);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected JarFile asJarFile() throws IOException {
    		if (this.jarFile == null) {
    			File file = asFile();
    			if (UpdateCore.DEBUG && UpdateCore.DEBUG_SHOW_INSTALL)
    				UpdateCore.debug("asJarFile :" + file); //$NON-NLS-1$
    			if (file != null && !file.exists()) {
    				UpdateCore.warn("JarFile does not exits:" + file); //$NON-NLS-1$
    				throw new FileNotFoundException(file.getAbsolutePath());
    			}
    			this.jarFile = new JarFile(file);
    		}
    		return jarFile;
    	}
        public boolean hasSeriousMedicalProblems() {
        	boolean result = false;
    		Iterator<HealthProblem> meds = getProblems().iterator();
    		while (meds.hasNext()) {
    			if (meds.next().getIllness().getSeriousness() >= 50) result = true;
    		}
    		return result;
        }
        public Tune getTune(int index) {
            if (m_tunes == null || index >= m_tunes.size()) {
                log.warn("getTune: unable to get index " + index );
                return new FtuneRec();
            }
            log.debug("getTune for index=" + index);
            return(Tune)m_tunes.get(index);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.368 -0500",hash_original_method="D9B7EDD91437C9CF7E31BD236F25B8F3",hash_generated_method="069FA18CB3D91513A755E62D6A4898A5") private void measureAndAdjustDown(View child,int childIndex,int numChildren){
      int oldHeight=child.getHeight();
      measureItem(child);
      if (child.getMeasuredHeight() != oldHeight) {
        relayoutMeasuredItem(child);
        final int heightDelta=child.getMeasuredHeight() - oldHeight;
        for (int i=childIndex + 1; i < numChildren; i++) {
          getChildAt(i).offsetTopAndBottom(heightDelta);
        }
      }
    }
        public void clearTexs(String basePath) {
    		File bp = new File(output_path, basePath);
    		File[] files = bp.listFiles();
    		if(files!=null)
    			for(File f : files)
    				f.delete();
    		bp.delete();
    	}
        protected void setDescribedType(Class<?> type) {
            if (type.getSuperclass() != null && "java.lang.Enum".equals
                (type.getSuperclass().getName()))
                throw new MetaDataException(_loc.get("enum", type));
            _type = type;
            _typeString = _type.getName();
            _hashCode = _typeString.hashCode();
            if (PersistenceCapable.class.isAssignableFrom(type))
                setIntercepting(true);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void clearHeaders() {
            if (this.headerFields == null){
                this.headerFields = new CollectionProperty();
            }else{
                this.headerFields.clear();
            }
        }
        private String getStyle(String imagePath){
    		return "background:transparent;" +
            "qproperty-icon:url(" + imagePath + ");" +
            "min-height:47px;" +
            "min-width:160px;" +
            "max-height:47px;" +
            "max-width:160px;" +
            "qproperty-iconSize: 43px 36px;";
    		
    	}
        public boolean equals(Object obj) {
    		if (this == obj)
    			return true;
    		if ((obj == null) || (obj.getClass() != this.getClass()))
    			return false;
    		
    		KnotVector that = (KnotVector)obj;
    		if (this._degree != that._degree)
    			return false;
    		if (this._knots.equals(that._knots))
    			return false;
    		
    		return super.equals(obj);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void updateRule(MCRAccessRule rule) {
            Session session = MCRHIBConnection.instance().getSession();
            MCRACCESSRULE hibrule = (MCRACCESSRULE)session.get(MCRACCESSRULE.class, rule.getId());
    
            DateFormat df = new SimpleDateFormat(sqlDateformat);
            hibrule.setCreationdate(Timestamp.valueOf(df.format(rule.getCreationTime())));
            hibrule.setCreator(rule.getCreator());
            hibrule.setRule(rule.getRuleString());
            hibrule.setDescription(rule.getDescription());
        }
        public void confirmUpdate(Probe p, TagAllocator pd, DefiniteSequenceDB<Probe> probeset) {
    		for (Iterator<CandidateAnalysisModule> i = armModules.iterator(); i.hasNext(); ) {
    			ProbeAnalysisModule m = (ProbeAnalysisModule) i.next();
    			m.doConfirmUpdate(p, pd, probeset);
    		}
    
    		for (Iterator<CandidateAnalysisModule> i = candidateModulesStage1.iterator(); i.hasNext(); ) {
    			ProbeAnalysisModule m = (ProbeAnalysisModule) i.next();
    			m.doConfirmUpdate(p, pd, probeset);
    		}
    
    		for (Iterator<CandidateAnalysisModule> i = candidateModulesStage2.iterator(); i.hasNext(); ) {
    			ProbeAnalysisModule m = (ProbeAnalysisModule) i.next();
    			m.doConfirmUpdate(p, pd, probeset);
    		}
    	}
        private String convertFileNameToBaseClassName(String filename) {
            if (filename.endsWith("_.java")) {
                return substringBeforeLast(filename, "_.java") + BASE_SUFFIX_;
            } else {
                return substringBeforeLast(filename, ".java") + BASE_SUFFIX;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JMenuItem getMiExit() {
    		if (miExit == null) {
    			miExit = new JMenuItem(new ImageIcon(UserInterface.class.getResource(RSC_LOC + "exit.png")));
    			miExit.setText("Exit");
    		}
    		return miExit;
    	}
        public boolean equals(Object other) {
            if (!(other instanceof TestCollisionListener)) {
                return false;
            }
            TestCollisionListener otherTestCollisionListener =
                                (TestCollisionListener) other;
    
            if (this.toString().equals(otherTestCollisionListener.toString())) {
                return true;
            }
            return false;
        }
        public boolean equals(Object obj) {
        if (obj instanceof LocationObject) {
          LocationObject cmp=(LocationObject)obj;
          if (getLocation()!=cmp.getLocation() &&
               (getLocation()==null || !getLocation().equals(cmp.getLocation()))
              ) return false;
          return true;
        }
        return false;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void txt ( Cell self , String txt , int h , int atX , int toX , int changeStyle , int changeSize ) {
      h = h > self . getHeight ( ) ? h : self . getHeight ( ) ;
      self . changeProps ( changeStyle , changeSize ) ;
      int align = 'L' ;
      int w = 0 ;
      if ( atX == 0 ) {
        if ( toX != 0 ) {
          align = 'R' ;
          self . oPdf . setX ( 0 ) ;
          w = toX ;
        }
      }
      else {
        self . oPdf . setX ( atX ) ;
      }
      if ( w == 0 ) {
        w = self . oPdf . getStringWidth ( txt ) ;
      }
      self . oPdf . cell ( w , h , txt , align ) ;
    }
        public String toString() {
            return new ToStringBuilder(getClass())
                .append("request", getRequest())
                .toString()
                ;
        }
        public void postProcessAfterTrustlevelChange(GameData data) {
        // initialize fog-of-war cache ((pavkovic): Do it always?)
        // (Fiete): no dependencies to TrustLevels anymore...moved to postProcess
    
        // intialize the fog-of-war cache for all regions that are covered by lighthouses
        // removed...Fiete
    
        // intialize the fog-of-war cache for all regions where units or ships traveled through
        // removed...Fiete
    
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void start() {
            if (resetOnStart) {
                reset();
            }
    
            animating = true;
    
            if (animateTimer == null) {
                if (owner != null) {
                    owner.drawingSequenceFrameChanged(this);
                }
    
                animateTimer = new Timer(this, "nextFrame", frameRate);
                animateTimer.start();
            }
        }
        protected List<VPlexRecommendation> createVPlexRecommendations(String vplexStorageSystemId,VirtualArray varray,VirtualPool vpool,List<Recommendation> recommendations){
      List<VPlexRecommendation> vplexRecommendations=new ArrayList<VPlexRecommendation>();
      for (  Recommendation recommendation : recommendations) {
        VPlexRecommendation vplexRecommendation=new VPlexRecommendation();
        vplexRecommendation.setSourceStorageSystem(recommendation.getSourceStorageSystem());
        vplexRecommendation.setSourceStoragePool(recommendation.getSourceStoragePool());
        vplexRecommendation.setResourceCount(recommendation.getResourceCount());
        vplexRecommendation.setVPlexStorageSystem(URI.create(vplexStorageSystemId));
        vplexRecommendation.setVirtualArray(varray.getId());
        vplexRecommendation.setVirtualPool(vpool);
        vplexRecommendations.add(vplexRecommendation);
      }
      return vplexRecommendations;
    }
        protected void addDTablesPropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add(createItemPropertyDescriptor(
    				((ComposeableAdapterFactory) adapterFactory)
    						.getRootAdapterFactory(), getResourceLocator(),
    				getString("_UI_DPackage_dTables_feature"), getString(
    						"_UI_PropertyDescriptor_description",
    						"_UI_DPackage_dTables_feature", "_UI_DPackage_type"),
    				XmdldbPackage.Literals.DPACKAGE__DTABLES, true, false, false,
    				null, getString("_UI_DBModelPropertyCategory"), null));
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected long getLastModifiedDate(String fileName) {
            File f = new File(getServletContext().getRealPath(fileName));
            if (f.exists()) {
                return f.lastModified();
            } else {
                return Long.MAX_VALUE;
            }
        }
        public Molecule computeMolecule() throws Exception {
        Molecule ret = new Molecule();
        Molecule subst_mol = substitutionMolecule();    
        computeMolecule(ret,root,subst_mol);
        computeMolecule(ret,bracket,subst_mol);
        return ret;
        }
        public void validateComplete(MetricFileReader reader){
      Assert.assertTrue(reader.hasNext());
      Assert.assertArrayEquals(new double[]{0.0,0.1,-0.1,1.0,-1.0,1E-5},reader.next(),Settings.EPS);
      Assert.assertTrue(reader.hasNext());
      Assert.assertArrayEquals(new double[]{0,10,100,1000,-10,-100},reader.next(),Settings.EPS);
      Assert.assertFalse(reader.hasNext());
      Assert.assertFalse(reader.hasNext());
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setPositionInformation(int startLineno, int startCharno,
                                         int endLineno, int endCharno) {
        if (startLineno > endLineno) {
          throw new IllegalStateException(
              "Recorded bad position information\n"
              + "start-line: " + startLineno + "\n"
              + "end-line: " + endLineno);
        } else if (startLineno == endLineno && startCharno >= endCharno) {
          throw new IllegalStateException(
              "Recorded bad position information\n"
              + "line: " + startLineno + "\n"
              + "start-char: " + startCharno + "\n"
              + "end-char: " + endCharno);
        }
    
        this.startLineno = startLineno;
        this.startCharno = startCharno;
        this.endLineno = endLineno;
        this.endCharno = endCharno;
      }
        public static boolean isConnected(Context context){
      ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
      NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
      return networkInfo != null && networkInfo.isConnected();
    }
        public void testMissingGroupid() throws Exception {
            BugReport report = createCompleteBugReport((String) getNormalUser().getGroupList().get(0));
            report.setGroupid(null);
            info("trying to add a bug report with missing package.");
            missingAttributeTest(report, "errors.missing.groupid");
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int indexOf(PopupMenuItemWidget item) {
    	if (item == null) {
    	    return -1;
    	}
    
    	// check visible items first
    	for (int i = firstItem; i <= lastItem; i++) {
    	    if (getItem(i) == item) {
    		return i;
    	    }
    	}
    
    	// item not found, let's ask the class that uses this menu
    	return ((SparseDropDownListBoxWidget)user).getValueIndex(item.getText());
        }
        public static LUDecomposition<FloatMatrix> lu(FloatMatrix A) {
          int[] ipiv = new int[min(A.rows, A.columns)];
          FloatMatrix result = A.dup();
          NativeBlas.sgetrf(A.rows, A.columns, result.data, 0, A.rows, ipiv, 0);
    
          // collect result
          FloatMatrix l = new FloatMatrix(A.rows, min(A.rows, A.columns));
          FloatMatrix u = new FloatMatrix(min(A.columns, A.rows), A.columns);
          decomposeLowerUpper(result, l, u);
          FloatMatrix p = Permutations.permutationFloatMatrixFromPivotIndices(A.rows, ipiv);
          return new LUDecomposition<FloatMatrix>(l, u, p);
      }
        public void put(Object o) {
            if (o == null) {
                throw new IllegalArgumentException("SyncQueue: object to put is null");
            }
            synchronized (takeLock) {
                long startTime = System.currentTimeMillis();
                while (element != null && System.currentTimeMillis() - startTime < TIMEOUT) {
                    waitSilently(takeLock, TIMEOUT - (System.currentTimeMillis() - startTime));
                }
                if (element != null) {
                    throw new IllegalStateException("Queue is too busy. Can't put an object: " + o);
                }
                element = o;
                takeLock.notifyAll();
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String parseTemplatePath(MuleMessage p_message, String p_pathString) {
            if (p_message == null) {
                throw new IllegalArgumentException("The message can't be null");
            }
            // if no expression has been provided, there is nothing to do...
            if (p_pathString == null) {
                return null;
            }
            // return the interpreted expression
            return filenameParser.getFilename((MuleMessage) p_message, p_pathString);
        }
        private boolean isPieceOfFurnitureVisibleAtSelectedLevel(HomePieceOfFurniture piece) {
        Level selectedLevel = this.home.getSelectedLevel();
        return piece.isVisible() 
            && (piece.getLevel() == selectedLevel
                || piece.isAtLevel(selectedLevel));
      }
        public void update(int size) {
    
                // Set the column headers
                columnNames =
                    new String[] { "Konstant", TABLE_COLUMN_NAME_ELEMENT };
    
                //elementColumn[0] = name;
                elementColumn = new String[size];
                valueColumn = new String[size];
                //valueColumn[0] = "Ingen mappning";
    
            }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String getAcInfoAll ( String auth , String url ) {
      String getAcInfoAllUrl = "/imcrs/wlan/acInfo/queryAcBasicInfo" ;
      String fUrl = url + getAcInfoAllUrl ;
      byte [ ] payload = null ;
      Response r = null ;
      try {
        r = client . get ( fUrl , auth , HEADERS ) ;
      }
      catch ( IOException e ) {
        return "Error:\n" + e . getMessage ( ) + " getAcInfoAll: An Error has occured" ;
      }
      try {
        if ( r . getStatus ( ) == 200 ) {
          if ( r . getEntity ( ) . getSize ( ) > 0 ) {
            return new String ( r . getEntity ( ) . getContent ( ) , "UTF-8" ) ;
          }
        }
      }
      catch ( UnsupportedEncodingException e ) {
        return "Error:\n" + e . getMessage ( ) + " getAcInfoAll: An Error has occured" ;
      }
      return null ;
    }
        public boolean combine(EntitlementListener l){
      if (!l.url.equals(url)) {
        return false;
      }
      for (  String appName : l.mapAppToRes.keySet()) {
        Set<String> res=mapAppToRes.get(appName);
        if (res == null) {
          res=new HashSet<String>();
          mapAppToRes.put(appName,res);
        }
        res.addAll(l.mapAppToRes.get(appName));
      }
      return true;
    }
        public boolean updateReceipt(long itemId) {
    		Session s = HibernateUtility.currentSession();
    		try {
    			HibernateUtility.beginTransaction();
    			Items item = (Items) s.get(Items.class, itemId);
    			HibernateUtility.commitTransaction();
    			
    			if(item == null)
    				return false;
    
    			HibernateUtility.beginTransaction();
    			item.setItemStatus(Item.DELIVERED);
    			s.saveOrUpdate(item);
    			HibernateUtility.commitTransaction();
    		} catch (HibernateException e) {
    			HibernateUtility.commitTransaction();
    			log.fatal(e);
    			return false;
    		}
    		HibernateUtility.closeSession();
    		return true;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void handleBoundsChange(PropertyChangeEvent evt) {
    		JGComponentElementFigure componentFigure = (JGComponentElementFigure) getFigure();
    		Rectangle constraint = (Rectangle) evt.getNewValue();
    		JGContainerElementPart parent = (JGContainerElementPart) getParent();
    		parent.setLayoutConstraint(this, componentFigure, constraint);
    	}
        private static synchronized void getJettyWebappClient ( ) {
      synchronized ( JettyWebappClient . class ) {
        if ( jetty != null ) {
          return ;
        }
        java . util . Properties props = new java . util . Properties ( ) ;
        props . put ( "http.server.jetty80" , "localhost" ) ;
        JettyWebappClient . setSslContext ( new SslContext ( ) ) ;
        JettyWebappClient . setSslAdapter ( new JettyWebappAdapter ( ) ) ;
        JettyWebappClient . setSslHandler ( new JettyWebappAdapter ( ) ) ;
      }
    }
        private String iniToString( IniFile ini ) {
            
            // declare and initialise
            StringBuilder builder = new StringBuilder();
    
            //**********************************************************************
            // Loop through all the sections and append section to ini file
            //**********************************************************************
            
            int size = ini.getNumberOfSections();
            
            for( int i=0; i<size; i++ ) {
                IniSection section = ini.getSection(i);
                
                builder.append( sectionToString(section) );
                builder.append( IniUtilities.NEW_LINE );
            }
            
            // return text
            return builder.toString();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getNumberOfViewports() {
    		int count = 0;
    		for (int i = 0; i < vpCombo.length; i++) {
    			if (vpCombo[i] != null) {
    				count++;
    			}
    		}
    		return count;
    	}
        private ItemsListLabelProvider getItemsListLabelProvider() {
    		if (itemsListLabelProvider == null) {
    			itemsListLabelProvider = new ItemsListLabelProvider(
    					new LabelProvider(), null);
    		}
    		return itemsListLabelProvider;
    	}
        public void matchRequest(Snac snac) {
            RequestKeeper requestKeeper = connection.getRequestKeeper();
            if (requestKeeper.containsRequest(snac.getRequestId())) {
                Request request = requestKeeper.getRequest(snac.getRequestId());
                RequestAnswerEvent evt = new RequestAnswerEvent(request.getMonitoredSnac(), snac);
                for (int i = 0; i < request.getNbListeners(); i++) {
                    request.getRequestListener(i).onRequestAnswer(evt);
                }
                request.removeAllListener();
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void kill() throws AIException {
    		Board board = Board.getInstance();
    		
    		log.debug("Player.kill: set robot state of life to dead");
    		board.getField(pos).setCurrentPlayer(null);
    		dead = true;
    	}
        public void addConnection(ServerSentEventConnection connection) {
            Objects.requireNonNull(connection, Required.CONNECTION.toString());
    
            final String url = RequestUtils.getServerSentEventURL(connection);
            Set<ServerSentEventConnection> uriConnections = getConnections(url);
            if (uriConnections == null) {
                uriConnections = new HashSet<>();
                uriConnections.add(connection);
            } else {
                uriConnections.add(connection);
            }
            setConnections(url, uriConnections);
        }
        public ChronologyDate plusYears(long years) {
            if (years == 0) {
                return this;
            }
            int newYears = MathUtils.safeToInt(MathUtils.safeAdd(prolepticYear, years));
            return ChronologyDate.of(chrono, newYears, monthOfYear, dayOfMonth);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Document addDocument(Document document) {
            Contact contact = document.getContact();
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();
            // remove the document if exist
            if (document.getIdDocument() != null) {
                contact.getDocumentLinks().remove(document);
            }
            // merge the document, add it and merge the contact
            document = em.merge(document);
            contact.getDocumentLinks().add(document);
            contact = em.merge(contact);
            em.getTransaction().commit();
            em.close();
            // store the contact in the document as a return value
            document.setContact(contact);
            return document;
        }
        public void setShowToolbar(boolean b) {
            if (b == true) {
                showToolbar = "true";
            } else {
                showToolbar = "false";
            }
        }
        @Deprecated public ShapelessRecipe addIngredient(int count,Material ingredient,int rawdata){
      Validate.isTrue(ingredients.size() + count <= 9,"Shapeless recipes cannot have more than 9 ingredients");
      if (rawdata == -1) {
        rawdata=Short.MAX_VALUE;
      }
      while (count-- > 0) {
        ingredients.add(new ItemStack(ingredient,1,(short)rawdata));
      }
      return this;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public TideFileInfo getFileInfo(String fileName) {
          TideFileInfo fileInfo = (TideFileInfo) files.get(fileName);
          if(fileInfo == null) {
             fileInfo = new TideFileInfo(fileName);
             files.put(fileName, fileInfo);
          }
          return fileInfo;
       }
        @Override
    
        public void sendSystemData(String systemIdentifier,
    
                ActionDescription[] actionDescriptions) {
    
            internalSSOService.saveSystemData(obtainSubsystemIdentifier(systemIdentifier),
    
                    actionDescriptions);
    
        }
        public static String renderHtml ( Thing self , Object obj , Map < String , Object > context ) {
      Map < String , Object > providedContext = context != null ? context : new HashMap < String , Object > ( ) ;
      FacesContext context = FacesContext . getCurrentInstance ( ) ;
      context . setInitScope ( context . getInitScope ( ) ) ;
      context . setInitParameter ( self . getClass ( ) . getName ( ) , "obj" , obj ) ;
      String rendered = renderHtml ( self , context ) ;
      context . removeInitScope ( context . getInitScope ( ) ) ;
      return rendered ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private IAtomContainer readMolecule() throws Exception {
            boolean foundCompound = false;
            while (parser.next() != XMLEvent.END_DOCUMENT) {
                if (parser.getEventType() == XMLEvent.START_ELEMENT) {
                    if (parser.getLocalName().equals("PC-Compound")) {
                        foundCompound = true;
                        break;
                    }
                }
            }
            if (foundCompound) {
                return parserHelper.parseMolecule(parser, builder);
            }
            return null;
        }
        private JButton getBackupTerugzettenButton() {
    		if (backupTerugzettenButton == null) {
    			backupTerugzettenButton = new JButton();
    			backupTerugzettenButton.setText("Zet backup terug");
    			backupTerugzettenButton.addActionListener(new BackupTerugzettenButtonActionListener());
    		}
    		return backupTerugzettenButton;
    	}
        public static PeriodType millis(){
      PeriodType type=cMillis;
      if (type == null) {
        type=new PeriodType("Millis",new DurationFieldType[]{DurationFieldType.millis()},new int[]{-1,-1,-1,-1,-1,-1,-1,0});
        cMillis=type;
      }
      return type;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void close() {
            try {
                isOk = false;
                if(reader != null)
                    reader.close();
                if(writer != null)
                    writer.close();
                if(socket != null)
                    socket.close();
            } catch (IOException e) {
                
            }
        }
        public void testSimpleAbsoluteToRelativeURLConversion() throws Exception {
            doTest(pipelineFactory,
                   "SimpleAbsoluteToRelativeURLTestCase.input.xml",
                   "SimpleAbsoluteToRelativeURLTestCase.expected.xml");
        }
        public void setStatusInfos(java.util.Collection<DBInstanceStatusInfo> statusInfos) {
            if (statusInfos == null) {
                this.statusInfos = null;
                return;
            }
    
            this.statusInfos = new com.amazonaws.internal.SdkInternalList<DBInstanceStatusInfo>(statusInfos);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public XDispatch queryDispatch(URL url, String targetFrameName, int searchFlags) {
    			String commandURL = url.Complete;
    			if(isDispatchDisabled(commandURL))
    				return null;
    						
    			IDispatchDelegate dispatchDelegate = null;
    			XDispatch xDispatch = null;
    			if(delegatesMap != null) {
    				dispatchDelegate = (IDispatchDelegate)delegatesMap.get(commandURL);
    			}
    			if(slaveDispatchProvider != null) {
    				xDispatch = slaveDispatchProvider.queryDispatch(url, targetFrameName, searchFlags);
    			}
    			if(dispatchDelegate != null)
    				return new DispatchWrapper(dispatchDelegate, xDispatch);
    			else
    				return xDispatch;
    		}
        public static void listService ( Context ctx , String name ) {
      SwagService swag = createSwagService ( ctx ) ;
      List < Service > accounts = swag . getServiceEnabled ( name ) ;
      String [ ] _table = new String [ accounts . size ( ) ] ;
      for ( int i = 0 ;
      i < accounts . size ( ) ;
      i ++ ) {
        _table [ i ] = new String ( accounts . get ( i ) . getName ( ) ) ;
        _table [ accounts . size ( ) - 1 ] = accounts . get ( i ) . getId ( ) ;
      }
      Toast . makeText ( ctx , _table , Toast . LENGTH_LONG ) . show ( ) ;
    }
        public void appendClause(LogicalClause parent, DiscoveryClause clause) {
        if ((parent != null) && (clause != null)) {
          parent.getClauses().add(clause);
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private boolean sameVersion(ServiceItem item0,ServiceItem item1) {
                boolean fullyEqual = false;
                try {
                    MarshalledInstance mi0 = new MarshalledInstance(item0.service);
                    MarshalledInstance mi1 = new MarshalledInstance(item1.service);
                    fullyEqual = mi0.fullyEquals(mi1);
                } catch(IOException e) {
                    logger.log(Level.INFO, "failure marshalling old and new "
                               +"services for equality check", e);
                }
                return fullyEqual;
    	}//end LookupCacheImpl.sameVersion
        @Override public boolean isBusy(){
      if (m_executorPool == null || (m_executorPool.getQueue().size() == 0 && m_executorPool.getActiveCount() == 0) && m_state == IDLE) {
        return false;
      }
      return true;
    }
        public Vector getAllPeptideHits(int aQueryNumber) {
            Vector v = null;
            int iNumberOfPeptideHits = getNumberOfPeptideHits(aQueryNumber);
    
            for (int i = 0; i < iNumberOfPeptideHits; i++) {
                PeptideHit lPeptideHit = getPeptideHitOfOneQuery(aQueryNumber, (i + 1));
                if (lPeptideHit != null) {
                    if (i == 0) {
                        v = new Vector();
                    }
                    v.add(lPeptideHit);
                }
            }
            return v;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setStartOffset(float startOffset) {
    		if(startOffset > 1.0f || startOffset < 0.0f)
    			throw new IllegalArgumentException("startOffset out of range");
    		this.startOffset = startOffset;
    	}
        private synchronized void adb(final String... args){
      String[] commands=new String[args.length + 1];
      commands[0]=adbPath;
      System.arraycopy(args,0,commands,1,args.length);
      try {
        Runtime.getRuntime().exec(commands).waitFor();
      }
     catch (  IOException ex) {
        JOptionPane.showMessageDialog(null,ex.getLocalizedMessage(),"Android DB Viewer",JOptionPane.ERROR_MESSAGE);
      }
    catch (  InterruptedException ex) {
        JOptionPane.showMessageDialog(null,ex.getLocalizedMessage(),"Android DB Viewer",JOptionPane.ERROR_MESSAGE);
      }
    }
        public void passNewData(List<DirPollRow> newData, Partner localPartner) {
            this.localPartner = localPartner;
            this.data.clear();
            this.data.addAll(newData);
            ((AbstractTableModel) this).fireTableDataChanged();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void initializeGameObjects() {
            try {
                log.info("Initializing game objects");
                // TODO: stuff
                log.info("Game objects initialized");
            } catch (Exception e) {
                log.fatal("Game objects could not be initialized", e);
                exit(1);
            }
        }
        public int getBreakWeight(int axis, float pos, float len) {
            checkPainter();
            int bp = DocumentHyphenator.getBreakWeight(this,axis, pos, len);
            if ( bp >= 0 ) return bp;
            return super.getBreakWeight(axis, pos, len);
        }
        public static Slice extract ( Slice self ) {
      Slice trimmed = self . trim ( ) ;
      if ( trimmed . isCompressed ( ) ) {
        int [ ] indices = trimmed . getSliceRangeToUnfilteredIndices ( 0 , trimmed . length ( ) ) ;
        return trimmed . take ( indices ) ;
      }
      else {
        return trimmed ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private BSPTree<Euclidean1D> previousInternalNode(BSPTree<Euclidean1D> node){
      if (childBefore(node).getCut() != null) {
        return leafBefore(node).getParent();
      }
      while (isBeforeParent(node)) {
        node=node.getParent();
      }
      return node.getParent();
    }
        private static String concat(Collection<String> col)
    	{
    		StringBuilder b = new StringBuilder();
    		boolean first = true;
    		for (String s : col)
    		{
    			if (first)
    				first = false;
    			else
    				b.append(";");
    
    			b.append(s);
    		}
    		return b.toString();
    	}
        public void removeFileVersion(int versionNumber) {
    	   	if (fileVersions == null) fileVersions=new ArrayList();
        	for (int i=0; i<fileVersions.size(); ++i) {
        		VersionAttachment v = (VersionAttachment)fileVersions.get(i);
        		if (v.getVersionNumber() == versionNumber) {
        			fileVersions.remove(v);
        			v.setOwner((AnyOwner)null);
        			v.setParentAttachment(null);
        			break;
        		}
        	}
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testCheckParams01() {
        jcc.setJcHome(jcHome);
        jcc.setPackageName("my.package");
        jcc.setPackageAID(aid1);
        jcc.setVersion("1.0");
        jcc.checkParams();
      }
        private boolean fieldIsOk(final Field field) {
            return field.getType().equals(MethodOverrider.class)
                    && Modifier.isPublic(field.getModifiers())
                    && Modifier.isStatic(field.getModifiers())
                    && !Modifier.isFinal(field.getModifiers());
        }
        @Override
        protected Measurement[] getModelMeasurementsImpl() {
            Measurement[] measurements = new Measurement[this.maxStoredCount];
    
            for (int m = 0; m < this.maxMemberCount; m++) {
                measurements[m] = new Measurement("Member weight " + (m + 1), -1);
            }
    
            for (int s = this.maxMemberCount; s < this.maxStoredCount; s++) {
                measurements[s] = new Measurement("Stored member weight " + (s + 1), -1);
            }
    
            if (this.storedWeights != null) {
                int storeSize = this.storedWeights.length;
    
                for (int i = 0; i < storeSize; i++) {
                    if (i < this.ensemble.length) {
                        measurements[i] = new Measurement("Member weight " + (i + 1), this.storedWeights[storeSize - i - 1][0]);
                    } else {
                        measurements[i] = new Measurement("Stored member weight " + (i + 1), this.storedWeights[storeSize - i - 1][0]);
                    }
                }
            }
            return measurements;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void writeDot(String fileName) throws IOException {
        	FileWriter writer = new FileWriter(fileName);
        	
        	writer.write(dot);
        	
        }
        public com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig getKMapEstimationConfig() {
        if (typeCase_ == 5) {
          return (com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig) type_;
        }
        return com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.getDefaultInstance();
      }
        private void onChangedImpl(final int preferableCenterPosition) {
            for (ListOnChangedListener listener: mOnChangedListeners) {
                listener.onChangedStart(this);
            }
    
            Log.d(Log.SUBSYSTEM.LAYOUT, TAG, "onChangedImpl(%s): items [%d] views [%d] mLayouts.size() = %d " +
                            "preferableCenterPosition = %d",
                    getName(), getDataCount(), getViewCount(), mContent.mLayouts.size(), preferableCenterPosition);
    
            // TODO: selectively recycle data based on the changes in the data set
            mPreferableCenterPosition = preferableCenterPosition;
            recycleChildren();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void delete(boolean validate) throws ValidationException {
    //        
    //        if (validate)
    //            beforeDelete();
    //        
    //    	if (synchronizeWithDM)
    //    		addRequest(new SynchronizeWithManagerRequest(SynchronizeWithManagerRequest._DELETE, this));
    //    	
    //        WorkFlow.delete(this);
        }
        public Token next() throws IOException {
        Token result = next(new Token());
    
        if (result != null) {
          Payload p = result.getPayload();
          if (p != null) {
            result.setPayload((Payload) p.clone());
          }
        }
    
        return result;
      }
        protected void showMessage(String message) {
    		MessageDialog.openInformation(this.viewer.getControl().getShell(),
    				"EclipseBugz", //$NON-NLS-1$
    				message);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addActiveColor(int color) {
    
            if(color == Palette.NON_COLOR_INDEX) {
                nonColorActive = true;
            } else {
    
                if(((color < 0) || (color >= activeColors.length))) {
                    throw new IllegalArgumentException("Illegal color " + color);
                }
    
                activeColors[color] = true;
            }
        }
        static void runTest() throws Exception {
      Thread[] threadList=new Thread[NUM_OF_THREADS];
      s_conn=new Connection[NUM_OF_THREADS];
      if (s_cType == C_SHARED)   s_sconn=DriverManager.getConnection(CONNECTION,UID,PWD);
      for (int i=0; i < NUM_OF_THREADS; i++) {
        if (s_cType == C_PRECREATED)     s_conn[i]=DriverManager.getConnection(CONNECTION,UID,PWD);
        threadList[i]=new JdbcTest(i);
        threadList[i].start();
      }
      long start=System.currentTimeMillis();
      setGreenLight();
      for (int i=0; i < NUM_OF_THREADS; i++)   threadList[i].join();
      if (s_sconn != null)   s_sconn.close();
      s_sconn=null;
      for (int i=0; i < NUM_OF_THREADS; i++) {
        if (s_conn[i] != null)     s_conn[i].close();
        s_conn[i]=null;
      }
      long result=System.currentTimeMillis() - start;
      System.out.print(C_INFO[s_cType] + "Threads=" + NUM_OF_THREADS+ " \tYield="+ s_do_yield+ " \tms= "+ result+ " \teach= "+ (result / NUM_OF_THREADS));
      System.out.println();
    }
        public void setPosition(float x, float y, float z) {
    		px = x;
    		py = y;
    		pz = z;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void unlockUI (ProcessInfo pi){
    		//System.out.println("UnLockUI*************************************************************************");
    		setBusy(false);
    		if(m_needReport)
    		   f_checkout.reportAfterProcess();
    	}
        public static void beforeCall(URL url,Request request){
      String uri=url.getUri();
      onBeforeCall(getServiceStat(uri));
      onBeforeCall(getMethodStat(uri,request.getMethodName(),request.getParamtersDesc()));
    }
        public void setImage(String s) {
    		try {
    			if (i != null) {
    				i.flush();
    			}
    			i = readImageFile(s);
    			if (i == null) {
    				return;
    			}
    			iheight = height = i.getHeight(this);
    			iwidth = width = i.getWidth(this);
    			repaint();
    		} catch (IOException IOE) {
    			i = null;
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setColspan(int colspan) throws WrongValueException {
    		if (colspan <= 0)
    			throw new WrongValueException("Positive only");
    		if (_colspan != colspan) {
    			_colspan = colspan;
    			final Execution exec = Executions.getCurrent();
    			if (exec != null && exec.isExplorer())
    				invalidate();
    			else smartUpdate("colspan", Integer.toString(_colspan));
    		}
    	}
        public String auditStack(Set activeCallIDs,long leakedDialogTimer,long leakedTransactionTimer){
      String auditReport=null;
      String leakedDialogs=auditDialogs(activeCallIDs,leakedDialogTimer);
      String leakedServerTransactions=auditTransactions(serverTransactionTable,leakedTransactionTimer);
      String leakedClientTransactions=auditTransactions(clientTransactionTable,leakedTransactionTimer);
      if (leakedDialogs != null || leakedServerTransactions != null || leakedClientTransactions != null) {
        auditReport="SIP Stack Audit:\n" + (leakedDialogs != null ? leakedDialogs : "") + (leakedServerTransactions != null ? leakedServerTransactions : "")+ (leakedClientTransactions != null ? leakedClientTransactions : "");
      }
      return auditReport;
    }
        public void setRoseCenterPaint(Paint paint) {
            if (paint == null) {
                throw new IllegalArgumentException("Null 'paint' argument.");
            }
            this.roseCenterPaint = paint;
            fireChangeEvent();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void writeCentralDirectoryEnd() throws IOException {
      writeOut(EOCD_SIG.getBytes());
      writeOut(ZERO);
      writeOut(ZERO);
      byte[] num=(new ZipShort(entries.size())).getBytes();
      writeOut(num);
      writeOut(num);
      writeOut(cdLength.getBytes());
      writeOut(cdOffset.getBytes());
      byte[] data=getBytes(comment);
      writeOut((new ZipShort(data.length)).getBytes());
      writeOut(data);
    }
        public <T>T notNull(T reference,Object errorMessage){
      if (reference == null) {
        throw new NullPointerException(String.valueOf(errorMessage));
      }
      return reference;
    }
        public void setDigits ( final int digits ) {
          if ( frozen ) {
             return;
          }
    
          final int old = getDigits (  );
          this.digits = digits;
          pcs.firePropertyChange ( "digits", old, getDigits (  ) );
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void processScrollEvent(ActionEvent event){
      int currentRow=1;
      FacesContext context=FacesContext.getCurrentInstance();
      UIComponent component=event.getComponent();
      Integer curRow=(Integer)component.getAttributes().get("currentRow");
      if (curRow != null) {
        currentRow=curRow.intValue();
      }
      scroll(currentRow);
    }
        static void initAccessibilityConfigGroupParameters(MatsimConfigType matsim4urbansimConfigPart1,Config config){
      AccessibilityConfigGroup acm=ConfigUtils.addOrGetModule(config,AccessibilityConfigGroup.GROUP_NAME,AccessibilityConfigGroup.class);
      acm.setCellSizeCellBasedAccessibility(matsim4urbansimConfigPart1.getCellSize().intValue());
      if (matsim4urbansimConfigPart1.isAccessibilityComputationAreaFromShapeFile()) {
        acm.setAreaOfAccessibilityComputation(AccessibilityConfigGroup.AreaOfAccesssibilityComputation.fromShapeFile.toString());
        if (matsim4urbansimConfigPart1.getStudyAreaBoundaryShapeFile() != null && (new File(matsim4urbansimConfigPart1.getStudyAreaBoundaryShapeFile().getInputFile())).exists())     acm.setShapeFileCellBasedAccessibility(matsim4urbansimConfigPart1.getStudyAreaBoundaryShapeFile().getInputFile());
     else     throw new RuntimeException("Study area boundary shape file not found! Given shape file location:" + matsim4urbansimConfigPart1.getStudyAreaBoundaryShapeFile());
      }
      if (matsim4urbansimConfigPart1.isAccessibilityComputationAreaFromBoundingBox()) {
        acm.setAreaOfAccessibilityComputation(AccessibilityConfigGroup.AreaOfAccesssibilityComputation.fromBoundingBox.toString());
        acm.setBoundingBoxBottom(matsim4urbansimConfigPart1.getBoundingBoxBottom());
        acm.setBoundingBoxTop(matsim4urbansimConfigPart1.getBoundingBoxTop());
        acm.setBoundingBoxLeft(matsim4urbansimConfigPart1.getBoundingBoxLeft());
        acm.setBoundingBoxRight(matsim4urbansimConfigPart1.getBoundingBoxRight());
      }
      if (matsim4urbansimConfigPart1.isAccessibilityComputationAreaFromNetwork()) {
        acm.setAreaOfAccessibilityComputation(AccessibilityConfigGroup.AreaOfAccesssibilityComputation.fromNetwork.toString());
      }
    }
        public String getProteinSequence(String aAccession) {
            String lResult = null;
            if (this.get(aAccession) == null) {
                UniProtEntry lEntry = getEntryFromRetrievalService(aAccession);
                if (lEntry == null) {
                    logger.info("No Entry found for accession '" + aAccession + "'.");
                } else {
                    String lSequence = lEntry.getSequence().getValue();
                    this.put(aAccession, lSequence);
                }
            }
            lResult = (String) this.get(aAccession);
            return lResult;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String createXml() {
    		ResourceFormatter formatter  = Marc21Plugin.getInstance().getFormater();
    		StringBuffer sb              = new StringBuffer();
    		Iterator it                  = this.subfieldsKeysIterator();
    
    		while( it.hasNext() ) {
    			Character key  = (Character)it.next();
    			String field   = Marc21Description.CONVERT_ENTITY( this.getSubfield( key.charValue() ) );
    
    			sb.append( formatter.getText( "marcxml_subfield", new Object[]{key, field} ) );
    		}
    
    		return formatter.getText( "marcxml_datafield", new Object[]{String.valueOf( getTag() ), String.valueOf( getPtr1() ), String.valueOf( getPtr2() ), sb.toString()} );
    	}
        final public void print(String s){
      Writer out=this.out;
      if (out == null)   return;
      try {
        if (s == null)     out.write(_nullChars,0,_nullChars.length);
     else     out.write(s,0,s.length());
      }
     catch (  IOException e) {
        log.log(Level.FINE,e.toString(),e);
      }
    }
        public void drawLineToSave(String id,String x1,String width, String y1,String height,Document doc,boolean colored,String color)
    	  {    
    		    Element e = doc.createElement("rect");
    		    e.setAttribute("x", x1);
    			e.setAttribute("y", y1);
    			e.setAttribute("transform", "");
    			e.setAttribute("width", String.valueOf(width));
    			if(colored)
    			{
    			e.setAttribute("style", "fill:"+color+";stroke:none");
    			}
    			else
    			{		
    				e.setAttribute("fill","none");
    				e.setAttribute("stroke", color);
    			}
    			e.setAttribute("id", "rect");
    			e.setAttribute("height", height);
    			Node node=doc.getElementsByTagName("rect").item(0).getParentNode();          
    			node.appendChild(e);
    	  }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setGoogleKey(String googleKey) {
    		if (googleKey == null || googleKey.length() == 0) {
    			this.googleKey = null;
    		} else {
    			this.googleKey = googleKey;
    		}
    	}
        public long getTotalTime() {
    		// Returns the difference between the values specified in the 
    		// startTimestamp and endTimestamp fields.
    		return endTimestamp.getTime() - startTimestamp.getTime();
    	}
        public static Tensor addEdgeBias ( Tensor x , int [ ] filterSize ) {
      int [ ] xShape = CommonLayers . shapeList ( x ) ;
      if ( filterSize [ 0 ] == 1 && filterSize [ 1 ] == 1 ) {
        return x ;
      }
      int a = ( filterSize [ 0 ] - 1 ) / 2 ;
      int b = ( filterSize [ 1 ] - 1 ) / 2 ;
      int [ ] padding = {
        new int [ ] {
          0 , 0 }, new int [ ] {
            a , a }, new int [ ] {
              b , b }, new int [ ] {
                0 , 0 }
              };
              Tensor xBias = Tensor . create ( xShape [ 0 ] + 1 , 1 ) ;
              x = Tensor . create ( x , padding ) ;
              Tensor xPad = Tensor . create ( xBias , padding , 1 ) ;
              return Tensor . create ( x , xPad ) ;
            }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void expireReplay(String instanceId) throws StorageCenterAPIException {
      Parameters params=new Parameters();
      RestResult rr=restClient.post(String.format("StorageCenter/ScReplay/%s/Expire",instanceId),params.toJson());
      if (!checkResults(rr)) {
        String msg=String.format("Error expiring replay %s: %s",instanceId,rr.getErrorMsg());
        LOG.warn(msg);
        throw new StorageCenterAPIException(msg);
      }
    }
        public Import getSelectedImport() {
    		int index = list.getSelectedIndex();
    		if (index == -1) {
    			return null;
    		} else {
    			return imports.get(index);
    		}
    	}
        public static List<MailboxNodeContent> parseMailboxContents(List<String> jsons) throws JSONException {
            ArrayList<MailboxNodeContent> objects = new ArrayList<MailboxNodeContent>(jsons.size());
            for (String json : jsons) {
                MailboxNodeContent content = null;
                JSONObject jsObj = new JSONObject(json);
                long HSId = jsObj.getLong("HSId");
                Integer partitionId = null;
                if (jsObj.has("partitionId")) {
                    partitionId = jsObj.getInt("partitionId");
                }
                content = new MailboxNodeContent(HSId, partitionId);
                objects.add(content);
            }
            return objects;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void set(AsciiString name, String value){
            if(name==null)
                return;
            if(value==null){
                remove(name);
                return;
            }
            Header head = entry(name, true);
            if(head.value==null)
                head.value = value;
            else{
                head.value = value;
                Header next = head.sameNext;
                head.sameNext = null;
                head.samePrev = head;
                removeSameNext(next);
            }
            assert validateLinks();
        }
        public static double regularizedIncBeta(double x,double alpha,double beta){
      if (alpha <= 0.0 || beta <= 0.0 || Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(x)) {
        return Double.NaN;
      }
      if (x <= 0.0) {
        return 0.0;
      }
      if (x >= 1.0) {
        return 1.0;
      }
      if (alpha > SWITCH && beta > SWITCH) {
        return regularizedIncBetaQuadrature(alpha,beta,x);
      }
      double bt=Math.exp(-logBeta(alpha,beta) + alpha * Math.log(x) + beta * Math.log1p(-x));
      if (x < (alpha + 1.0) / (alpha + beta + 2.0)) {
        return bt * regularizedIncBetaCF(alpha,beta,x) / alpha;
      }
     else {
        return 1.0 - bt * regularizedIncBetaCF(beta,alpha,1.0 - x) / beta;
      }
    }
        @Override
        public Set<T> next() {
            Set<T> subset = new LinkedHashSet<>();
            next(subset);
            return subset;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void displayAll() {
            System.out.print("DataMgr:");
    
            if (_objs != null) {
                System.out.print("objs:" + _objs.length);
            }
    
            if (_cols != null) {
                System.out.print("cols;" + _cols.length);
            }
        }//End of display()
        public JComboBox setCodedTypeJComboBox(JComboBox list, AbstractCodedType.ComparisonLevel compLevel, boolean sorted) {
            list.setModel(getCodedTypeListModel(compLevel, sorted));
            list.setEditable(false);
            list.setRenderer(getListCellRendererComponent(compLevel));
            return list;
        }
        public static LicenseProvider createInstance(ZipFile zipFile, String laPrefix) {
            JarFile jar = null;
            try {
                jar = getJarFile(zipFile);
            } catch (IOException e) {
            }
            if (jar == null) {
                return null;
            }
            return ContentLicenseProvider.createInstance(new Content.JarContent(jar), laPrefix);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static boolean isValidRandomIdentifier( String identifier ) {
            if (identifier.length() == UUID_LENGTH) {
                // It's the right length, but see if it's a UUID ...
                try {
                    UUID.fromString(identifier);
                    return true;
                } catch (IllegalArgumentException e) {
                    // Nope
                    return false;
                }
            }
            return false;
        }
        private void loadModifications() {
            for (int index : ptmFactory.getPtmMap().keySet()) {
                modificationIndexes.put(ptmFactory.getPTM(index).getName().toLowerCase(), index);
            }
            loadModificationUse(searchGuiParent.loadModificationsUse());
            updateModificationList();
        }
        public Domaine getValue(String data, int row) throws IloaException {
    		// Control that the data exists in the datastore
    		if (!this.getDomaineClasses().containsKey(data)) {
    			throw new IloaException("The data '" + data + "' not exists in the datastore '" + this.getName() + "'");
    		}
    
    		// Get the value of the data
    		Domaine value = getRow(row).getValue(data);
    
    		// Call the fonction getValue() of the services
    		for (Iterator<IDataStoreService> iter = this.services.iterator(); iter.hasNext();) {
    			IDataStoreService element = iter.next();
    			value = element.getValue(data, row, value);
    		}
    
    		// Return the value of the data
    		return value;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static < T > List < List < T >> batsorted ( List < T > referer , List < ? extends List < ? extends T >> ... lists ) {
      if ( ( "reverse" . equals ( reverse ) ) || ( "reverse" . equals ( reverse ) ) ) reverse = true ;
      else reverse = false ;
      int length = referer . size ( ) ;
      List < Integer > indexes = Arrays . asList ( new Integer [ ] {
        0 , 1 }
        ) ;
        List < List < T >> rslt = sortedReferTo ( indexes , referer , reverse ) ;
        referer = rslt . get ( 0 ) ;
        indexes = rslt . subList ( 1 , indexes . size ( ) ) ;
        rslt = new ArrayList < List < T >> ( ) ;
        lists = new ArrayList < List < ? extends T >> ( Arrays . asList ( lists ) ) ;
        for ( int i = 0 ;
        i != lists . length ;
        i ++ ) {
          List < ? extends T > l = lists [ i ] ;
          List < T > nl = new ArrayList < T > ( ) ;
          for ( int j = 0 ;
          j != length ;
          j ++ ) {
            int loc = indexes . get ( j ) ;
            nl . add ( l . get ( loc ) ) ;
          }
          rslt . add ( nl ) ;
        }
        return ( Collections . unmodifiableList ( rslt ) ) ;
      }
        protected void prepareData(int version,RequestParameters params,boolean withId,Representation rep,boolean withRep) throws WebApplicationException {
      if (withId) {
        params.validateId();
      }
      params.validateETag();
      params.validateParameters();
      params.setVersion(version);
      params.update();
      if (withRep) {
        if (rep == null) {
          throw WebException.badRequest().message(CommonParams.ERROR_MISSING_CONTENT).build();
        }
        rep.validateContent();
        rep.setVersion(new Integer(version));
        rep.update();
      }
    }
        protected void fireBoxSelectionListenerBoxSelected(BoxSelectionEvent event) {
            if (listenerList == null) {
                return;
            }
            Object[] listeners = listenerList.getListenerList();
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == org.das2.event.BoxSelectionListener.class) {
                    ((org.das2.event.BoxSelectionListener) listeners[i + 1]).BoxSelected(event);
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static int compareNull(boolean aNull,int sortType){
      if ((sortType & NULLS_FIRST) != 0) {
        return aNull ? -1 : 1;
      }
     else   if ((sortType & NULLS_LAST) != 0) {
        return aNull ? 1 : -1;
      }
     else {
        int comp=aNull ? DEFAULT_NULL_SORT : -DEFAULT_NULL_SORT;
        return (sortType & DESCENDING) == 0 ? comp : -comp;
      }
    }
        private boolean tryGoto(final int id) {
    			final Integer label = labels.get(id);
    			if (label == null) {
    				labels.put(id, code.getCursor());
    				return false;
    			} else {
    				code.writeInstruction(Bytecode.GOTO, label);
    				return true;
    			}
    		}
        protected <T extends OperationResponse>void completeOperation(ServerStateMachine.Result result,OperationResponse.Builder<?,T> builder,Throwable error,CompletableFuture<T> future){
      if (isOpen()) {
        if (result != null) {
          builder.withIndex(result.index);
          builder.withEventIndex(result.eventIndex);
          if (result.result instanceof Exception) {
            error=(Exception)result.result;
          }
        }
        if (error == null) {
          future.complete(logResponse(builder.withStatus(Response.Status.OK).withResult(result.result).build()));
        }
     else     if (error instanceof CompletionException && error.getCause() instanceof CopycatException) {
          future.complete(logResponse(builder.withStatus(Response.Status.ERROR).withError(((CopycatException)error.getCause()).getType()).build()));
        }
     else     if (error instanceof CopycatException) {
          future.complete(logResponse(builder.withStatus(Response.Status.ERROR).withError(((CopycatException)error).getType()).build()));
        }
     else {
          future.complete(logResponse(builder.withStatus(Response.Status.ERROR).withError(CopycatError.Type.INTERNAL_ERROR).build()));
        }
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void renameVersion ( @ NotNull final Project project , @ NotNull final String oldName , @ NotNull final String newName ) {
      final ProjectLevelVcsManager vcsManager = ProjectLevelVcsManager . getInstance ( project ) ;
      final VirtualFile file = vcsManager . findVcsRootFor ( VfsUtilCore . virtualToIoFile ( oldName ) ) ;
      if ( file != null ) {
        vcsManager . addRoot ( file , new VirtualFileRevision ( newName , null ) ) ;
      }
    }
        public static final void addPlaces ( Place self , List < Place > places , boolean ret ) {
      if ( CollectionUtils . isEmpty ( places ) ) {
        places = new ArrayList < Place > ( ) ;
      }
      places . addAll ( places ) ;
      if ( ret ) {
        return ;
      }
    }
        public void setLID(Integer newLID) {
    		Integer oldLID = lid;
    		lid = newLID;
    		if (eNotificationRequired())
    			eNotify(new ENotificationImpl(this, Notification.SET, AfplibPackage.ESU__LID, oldLID, lid));
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void run() {
    		// Don't return from open() until window closes
    		setBlockOnOpen(true);
    		try {
    			// Open the main window
    			open();
    
    		} catch (Throwable e) {
    			if (printStream != null) {
    				e.printStackTrace(printStream);
    			} else {
    				MessageBox mb = new MessageBox(getShell(), SWT.ICON_ERROR);
    				String error = "Exception: " + e.getMessage();
    				mb.setMessage(error);
    				mb.setText(error);
    				mb.open();
    			}
    
    		}
    		// reset the org out stream in system
    		System.setOut(backupSystemOutStream);
    
    		// Dispose the display
    		Display.getCurrent().dispose();
    	}
        private void fetchPLCLinks() throws LinkException {
            logger.fine("Fetching PLC links");
            // get PLC link entries first
            List<PLCLinkEntry> list = mgr.getLinks();
            // immediate barf
            if (list == null) {
                throw new LinkException("No links in PLC");
            }
            for (AbstractLinkEntry entry : list) {
                logger.finest("Cache " + mgr.getTransceiverDevice().getDeviceId() + " = " + entry);
                addToCache(mgr.getTransceiverDevice().getDeviceId(),entry);
            }
            logger.fine("Done retrieving PLC links");
        }
        public void update(ContactDTO dto) {
            if (dto == null) {
                throw new NullPointerException("Contact Data Transfer Object required");
            }
    
            contactPerson = dto.getContactPerson();
            contactOrganization = dto.getContactOrganization();
            contactPosition = dto.getContactPosition();
            addressType = dto.getAddressType();
            address = dto.getAddress();
            addressCity = dto.getAddressCity();
            addressState = dto.getAddressState();
            addressPostalCode = dto.getAddressPostalCode();
            addressCountry = dto.getAddressCountry();
            contactVoice = dto.getContactVoice();
            contactFacsimile = dto.getContactFacsimile();
            contactEmail = dto.getContactEmail();
            onlineResource = dto.getOnlineResource();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private CodeIssueData makeZeroCodeIssueData(String tool) {
        CodeIssueData issueData = new CodeIssueData();
        issueData.setTool(tool);
        issueData.setNumIssues(0);
        return issueData;
      }
        public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OpenBitSet)) return false;
        OpenBitSet a;
        OpenBitSet b = (OpenBitSet)o;
        // make a the larger set.
        if (b.wlen > this.wlen) {
          a = b; b=this;
        } else {
          a=this;
        }
    
        // check for any set bits out of the range of b
        for (int i=a.wlen-1; i>=b.wlen; i--) {
          if (a.bits[i]!=0) return false;
        }
    
        for (int i=b.wlen-1; i>=0; i--) {
          if (a.bits[i] != b.bits[i]) return false;
        }
    
        return true;
      }
        public void addAci(DN dn,SortedSet<Aci> acis){
      lock.writeLock().lock();
      try {
        aciList.put(dn,new LinkedList<>(acis));
      }
      finally {
        lock.writeLock().unlock();
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testProcessData_2() {
    		LinkGrabber lg = new LinkGrabber(100);
    
    		String url1 = "http://www.google.com";
    		String url2 = "http://www.sourceforge.net";
    
    		String link1 = genLink(url1, "link1");
    		String link2 = genLink(url2, "link2");
    
    		String data = "<html><body><p>" + link1 + link2 + "</p></body></html>";
    
    		lg.readData(data, null);
    		assertEquals(url1, lg.getNextUrl());
    		assertEquals(url2, lg.getNextUrl());
    		assertEquals(null, lg.getNextUrl());
    	}
        public static void setRandomB(BMatrixRMaj mat , Random rand )
        {
            boolean d[] = mat.data;
            int size = mat.getNumElements();
    
    
            for( int i = 0; i < size; i++ ) {
                d[i] = rand.nextBoolean();
            }
        }
        void save(){
      if (kSave == null) {
        kSave=new byte[blockSize];
      }
      System.arraycopy(k,0,kSave,0,blockSize);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static void log(int logLevel,String tag,String msg){
    switch (logLevel) {
    case Log.DEBUG:
        if (debugLoggingEnabled) {
          Log.d(tag,msg);
        }
      break;
    case Log.ERROR:
    Log.e(tag,msg);
    break;
    default :
    break;
    }
    }
        public static boolean delPermission ( AuthGroup self , String role , String name ) {
      if ( ! self . hasPermission ( role , name ) ) return true ;
      AuthGroup targetGroup = AuthGroup . Builder . create ( ) . role ( role ) . creator ( self . getClient ( ) ) . build ( ) ;
      AuthPermission target = AuthPermission . Builder . create ( ) . groups ( targetGroup ) . name ( name ) . creator ( self . getClient ( ) ) . build ( ) ;
      if ( target == null ) return true ;
      target . delete ( ) ;
      return true ;
    }
        private static long parseDurationFromSeconds(String durationSeconds){
      long duration=0;
      try {
        duration=Long.parseLong(durationSeconds);
        duration=duration * 1_000;
      }
     catch (  NumberFormatException e) {
        Timber.w("Error in parseDuration");
        Timber.w(e.getMessage());
      }
      return duration;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private int findValuableTrump(CardList cards, Suit trump) {
    		// should be improved: consider, which other trumps have already been played
    		if (cards.size() < 1)
    			return 0;
    		int highCard = 0;
    		int index = 0;
    		while (++index < cards.size()) {
    			// if(cards.get(index).isTrump(GameType.SUIT, trump) &&
    			// cards.get(index).getPoints() > cards.get(highCard).getPoints()) {
    			// highCard = index;
    			// log.debug("     highest card set to "+index);
    			// }
    		}
    		return (highCard < cards.size() ? highCard : 0);
    	}
        public boolean addEdit(UndoableEdit anEdit) {
            if (anEdit == this) {
                    end();
                return true;
            } else if (isInProgress() && (anEdit instanceof CompositeEdit)) {
                return true;
            } else {
                return super.addEdit(anEdit);
            }
        }
        public void writeString(String v) {
    		print(STRING_START);
    		for (int i = 0; i < v.length(); i++) {
    			char ch = v.charAt(i);
    			switch (ch) {
    			case LT:
    				append(LT_ESCAPE_ARRAY);
    				break;
    			case GT:
    				append(GT_ESCAPE_ARRAY);
    				break;
    			case AMP:
    				append(AMP_ESCAPE_ARRAY);
    				break;
    			case QUOT:
    				append(QUOT_ESCAPE_ARRAY);
    				break;
    			case APOS:
    				append(APOS_ESCAPE_ARRAY);
    				break;
    			default:
    				print(ch);
    			}
    
    		}
    		print(STRING_END);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setUpdateChanges(boolean updateChanges) {
        if (this.updateChanges != updateChanges) {
          if (this.updateChanges) {
            removeListeners();
            this.updateChanges = updateChanges;
          }
          else {
            this.updateChanges = updateChanges;
            addListeners();
          }
        }
      }
        public void stateChanged(ChangeEvent e) {
    		    try
    		    {
    	            ts_server.setSail(player_id,sail_slider.getValue()); 
    	            System.out.println("Setting sail to " + sail_slider.getValue() + " for player " + player_id);
    	            Player player = ts_server.getPlayer(player_id);
    	            System.out.println("got handle on player");
    	            int wind = ts_server.getGame(game_id).getWindDirection();
    	            int heading = player.getDirection();
    	            System.out.println("absolute wind direction " + wind);
    	            System.out.println("relative wind direction " + (wind - heading));
    	            System.out.println("absolute sail direction " + player.calcSailDirection(wind));
    		    }
    		    catch(RemoteException re) { error(re.getMessage()); }
    		}
        private static CacheOpInfo cacheOpsAssociate ( int protocol , int msgtype ) {
      CacheOpInfo ops = cacheOps ;
      while ( ops != null ) {
        if ( ops . getCoProtocol ( ) == protocol ) {
          for ( CacheOpInfo coMsgType : ops . getCoMsgTypes ( ) ) {
            if ( coMsgType . getMtId ( ) == msgtype ) {
              return ops ;
            }
          }
        }
        ops = ops . getCoNext ( ) ;
      }
      return null ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean validateHardcore(long time) {
    		if (hardcore) {
    			System.out.println("File timestamp: " + time);
    			System.out.println("Hardcore stamp: " + hardcoreTime);
    			long diff = Math.abs(time - hardcoreTime);
    			if (diff > 100) {
    				hardcore = false;
    				return false;
    			}
    		}
    		return true;
    	}
        public List<TaskInstance> getSubtaskInstances(Long masterTaskInstId) throws DataAccessException {
            try {
                db.openConnection();
                String query = "select " + getTaskInstanceSelect() +
                        " from TASK_INSTANCE ti where TASK_INST_SECONDARY_OWNER = ? and TASK_INST_SECONDARY_OWNER_ID = ?";
                Object[] args = new Object[2];
                args[0] = OwnerType.TASK_INSTANCE;
                args[1] = masterTaskInstId;
                ResultSet rs = db.runSelect(query, args);
                List<TaskInstance> taskInsts = new ArrayList<TaskInstance>();
                while (rs.next()) {
                    taskInsts.add(getTaskInstanceSub(rs, false));
                }
                return taskInsts;
            } catch (Exception e) {
                throw new DataAccessException(0, "failed to get task instances", e);
            } finally {
                db.closeConnection();
            }
        }
        public void setResynthesiscount(Long newVal) {
            if ((newVal != null && this.resynthesiscount != null && (newVal.compareTo(this.resynthesiscount) == 0)) ||
                (newVal == null && this.resynthesiscount == null && resynthesiscount_is_initialized)) {
                return;
            }
            this.resynthesiscount = newVal;
            resynthesiscount_is_modified = true;
            resynthesiscount_is_initialized = true;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testPropertyLoading() throws Exception {
      pm.loadProperties();
      TungstenProperties tp=pm.getProperties();
      assertTrue("Property file must contain some properties",tp.size() > 0);
    }
        public Field setField( String sourceField ) throws InvalidFieldException {
            try {
                Node tempParent = VRML97.NodeFactory( getNodeName() );
                tempParent.setParent( getScene() );
                TokenData newTokenData = new TokenData( sourceField, tempParent, null );
                return( setField( newTokenData ));
            } catch ( InvalidFieldException e ) {
                throw e;
            } catch ( Exception e ) {
                e.printStackTrace();
                return( null );
            }
        }
        public static BuildResult createWorkerBuild ( WorkerBuild self , @ Nonnull Map < String , String > additionalProperties ) throws OsbsValidationException {
      Set < String > missing = new HashSet < > ( ) ;
      for ( String required : ( String [ ] ) additionalProperties . keySet ( ) ) {
        if ( ! additionalProperties . containsKey ( required ) ) {
          missing . add ( required ) ;
        }
      }
      if ( missing . size ( ) > 0 ) {
        throw new IllegalArgumentException ( "Worker build missing required parameters: " + missing ) ;
      }
      if ( additionalProperties . keySet ( ) . contains ( "platforms" ) ) {
        throw new IllegalArgumentException ( "Worker build called with unwanted platforms param" ) ;
      }
      String arrangementVersion = additionalProperties . get ( "arrangementVersion" ) ;
      additionalProperties . put ( "innerTemplate" , WORKER_INNER_TEMPLATE . replace ( "arrangementVersion" , arrangementVersion ) ) ;
      additionalProperties . put ( "outerTemplate" , WORKER_OUTER_TEMPLATE . replace ( "customConf" , WORKER_CUSTOMIZE_CONF ) ) ;
      additionalProperties . put ( "buildType" , BUILD_TYPE_WORKER ) ;
      try {
        return doCreateProdBuild ( additionalProperties ) ;
      }
      catch ( IOException ex ) {
        if ( new File ( additionalProperties . get ( "innerTemplate" ) ) . exists ( ) ) {
          throw new OsbsValidationException ( "worker invalid arrangementVersion " + arrangementVersion , ex ) ;
        }
        throw new OsbsValidationException ( "worker build called with unwanted platforms param" ) ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
        public Packet getNextPacket() throws IOException {
            final Object content = parseSipContent();
            if (content instanceof SDP) {
                return new SDPPacketImpl(this, (SDP)content);
            }
            return null;
        }
        public static <T>LazyQueueX<T> fromIterable(Collector<T,?,Queue<T>> collector,Iterable<T> it){
      if (it instanceof LazyQueueX)   return (LazyQueueX<T>)it;
      if (it instanceof Queue)   return new LazyQueueX<T>((Queue<T>)it,collector);
      return new LazyQueueX<T>(Flux.fromIterable(it),collector);
    }
        public static String deaccent ( String text ) {
      Normalizer norm = Normalizer . getInstance ( "NFD" ) ;
      String result = "" ;
      for ( int i = 0 ;
      i < norm . getCombiningClass ( ) . length ( ) ;
      i ++ ) {
        char ch = norm . getCombiningClass ( ) . charAt ( i ) ;
        if ( Character . isDefined ( ch ) ) {
          result += ch ;
        }
      }
      return Normalizer . normalize ( result , Normalizer . Form . NFC ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void init(SynapseEnvironment se) {
            if (log.isDebugEnabled()) {
                log.debug("Initializing child mediators");
            }
    
            for (Iterator it = mediators.iterator(); it.hasNext();) {
                Mediator m = (Mediator) it.next();
    
                if (m instanceof ManagedLifecycle) {
                	((ManagedLifecycle) m).init(se);
                }
            } 
        }
        @Override
        public CreateConstraintResult createConstraint(CreateConstraintRequest request) {
            request = beforeClientExecution(request);
            return executeCreateConstraint(request);
        }
        public void testNumericPredicatesSetArg1() throws Exception {
    		testNumericPredicatesAccess();
    		
    		setInputTextField("arg1", "123");
    		clickButtonWithText("execute");
    		assertNoProblem();
    		
    		// 123 == 0
    		assertButtonNotPresentWithText("numeric-equal");
    		
    		// 123 < 0
    		assertButtonNotPresentWithText("numeric-less-than");
    		
    		// 123 > 0
    		assertButtonPresentWithText("numeric-greater-than");
    		
    		// !123
    		assertButtonNotPresentWithText("not arg1");
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected static void insertData ( TreeData self ) {
      for ( int indexPoint = 0 ;
      indexPoint < self . pointerData . length ;
      indexPoint ++ ) {
        PointData point = self . pointerData [ indexPoint ] ;
        ;
        self . tree . insertCluster ( new Cluster ( point ) ) ;
        ;
        if ( ( self . tree . amountEntries > self . entrySizeLimit ) && ( self . tree . amountEntries > 0 ) ) {
          self . tree = self . rebuildTree ( indexPoint ) ;
        }
      }
    }
        public void addStaticField(EncodedField field, Constant value) {
            if (field == null) {
                throw new NullPointerException("field == null");
            }
    
            if (staticValuesConstant != null) {
                throw new UnsupportedOperationException(
                        "static fields already sorted");
            }
    
            staticFields.add(field);
            staticValues.put(field, value);
        }
        public static String getModifiedNucleotideSequence(PolymerNotation polymer)
    
    			throws RNAUtilsException, HELM2HandledException, ChemistryException {
    
    		checkRNA(polymer);
    
    		List<Nucleotide> nucleotides = getNucleotideList(polymer);
    
    		StringBuilder sb = new StringBuilder();
    
    		for (Nucleotide nucleotide : nucleotides) {
    
    			sb.append(nucleotide.getSymbol());
    
    		}
    
    		return sb.toString();
    
    
    
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public final FluxSink<IN> sink(FluxSink.OverflowStrategy strategy) {
    		Objects.requireNonNull(strategy, "strategy");
    		if (getBufferSize() == Integer.MAX_VALUE){
    			strategy = FluxSink.OverflowStrategy.IGNORE;
    		}
    
    		FluxCreate.BaseSink<IN> s = FluxCreate.createSink(this, strategy);
    		onSubscribe(s);
    
    		if(s.isCancelled() ||
    				(isSerialized() && getBufferSize() == Integer.MAX_VALUE)){
    			return s;
    		}
    		if (serializeAlways())
    			return new FluxCreate.SerializedSink<>(s);
    		else
    			return new FluxCreate.SerializeOnRequestSink<>(s);
    	}
        public boolean getTypeOfFkey(int i) {
    		boolean r;
    		if(typeOfFKey.get(this.getListIndexOfElement(i)) instanceof Boolean) {
    			r = ((Boolean)typeOfFKey.get(this.getListIndexOfElement(i))).booleanValue();
    		} else {
    			r = false;
    		}
    		return r;
    	}
        public void setTheme(String theme) {
            if (hasText(theme)) {
                this.theme = theme;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void qteUnbindKeyApplet ( QtmacsApplet self , String applet , int keysequence ) {
      if ( applet . startsWith ( "qte." ) ) {
        QtmacsApplet appletObj = self . qteGetAppletHandle ( applet ) ;
        if ( appletObj == null ) return ;
        keysequence = QtmacsKeysequence . getKeysequence ( keysequence ) ;
        appletObj . _qteAdmin . getKeyMap ( ) . qteRemoveKey ( keysequence ) ;
        for ( Widget wid : appletObj . _qteAdmin . getWidgetList ( ) ) {
          qteUnbindKeyFromWidgetObject ( keysequence , wid ) ;
        }
      }
    }
        public static <T> CloseableIterator<T> from(final Iterator<T> iterator) {
            if(iterator instanceof CloseableIterator) {
                return (CloseableIterator<T>)iterator;
            }
    
            return new CloseableIterator<T>() {
                @Override
                public void close() {
                    // Do nothing
                }
    
                @Override
                public boolean hasNext() {
                    return iterator.hasNext();
                }
    
                @Override
                public T next() {
                    return iterator.next();
                }
    
                @Override
                public void remove() {
                    iterator.remove();
                }
            };
        }
        protected ZonePlayerAndNPCTestImpl(final String zoneName,final String... npcNames){
      super(zoneName);
      assertTrue(npcNames.length > 0);
      for (  final String npcName : npcNames) {
        this.npcNames.add(npcName);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected String processLine(String aLine){
        //use a tokenizer to separate the words 
        StringTokenizer tokenizer = new StringTokenizer(aLine," ,.;:?!",true);
        StringBuilder sb = new StringBuilder();
        while ( tokenizer.hasMoreTokens() ){
            String tk = tokenizer.nextToken();
            if (!tk.matches("[. ,:;!?]")) { // is a word
                sb.append(";;"+ tk + "\n");
                sb.append(Converter.convert(tk)+"\n");
            } else if (!" ".equals(tk)) {
                sb.append("_ 100\n_ 50\n");
            }
        }
        //(no need for finally here, since String is source)
        return (sb.toString());
      }
        private static boolean isSeparator(char character, char... separators)
    
      {
    
        if(separators.length == 0) {
    
          separators = DEFAULT_SEPARATORS;
    
        }
    
        for(int i = 0; i < separators.length; ++i) {
    
          if(character == separators[i]) {
    
            return true;
    
          }
    
        }
    
        return false;
    
      }
        public AllocTypeThreadTraceRef getAllocTypeThreadTrace(TypeRef peer) {
            ListIterator itr =  getAllocTypeThreadTraces().listIterator();
            AllocTypeThreadTraceData obj; 
            
            while (itr.hasNext()) {
                obj =  (AllocTypeThreadTraceData) itr.next();
                if ( obj.getType().equals( peer ) )
                    return obj;
            }
            return null;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static boolean update ( CacheClient self , int rid , byte [ ] data , boolean throwOnError ) {
      CacheData cacheData = new CacheData ( ) ;
      cacheData . setCacheDate ( self . getDtToEpoch ( new Date ( ) ) ) ;
      cacheData . setCacheData ( data ) ;
      return self . ds . put ( rid , cacheData , throwOnError ) ;
    }
        private static String getElementTextOrNull ( Document document , String selector ) {
      Element element = document . getElementById ( selector ) ;
      if ( element != null ) {
        return element . getTextContent ( ) ;
      }
      return null ;
    }
        public void disbleSaveFromMenu() {
    		//fixme: why is newAction modified, but not loadAction??
    		newAction.setEnabled(false);
    		saveAction.setEnabled(false);
    		saveAsAction.setEnabled(false);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String nextTokenAsString() throws XPathException {
                String s = getTokenString(nextToken());
                if(s==null)     throw new XPathException("c-xpath-general");
                return s;
            }
        public Binding loadBinding(QName qName, MutablePicoContainer context) {
            ComponentAdapter adapter = container.getComponentAdapter(qName);
    
            if (adapter == null) {
                return null;
            }
    
            return (Binding) adapter.getComponentInstance(context);
        }
        public int getFindDirection() {
        if (backwardRadioButton.isSelected()) {
          return TextArea.DIRECTION_BACKWARD;
        }
        return TextArea.DIRECTION_FORWARD;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public GridTcpRestNioListener(IgniteLogger log,GridTcpRestProtocol proto,GridRestProtocolHandler hnd,GridKernalContext ctx){
      memcachedLsnr=new GridTcpMemcachedNioListener(log,hnd,ctx);
      this.log=log;
      this.proto=proto;
      this.hnd=hnd;
    }
        public String getFeedback() {
        String returnString = this.feedback;
        this.feedback = "";
        return returnString;
      }
        private void executeDeferredScriptsIfNeeded() {
            if (!getWebClient().isJavaScriptEnabled()) {
                return;
            }
            if (getWebClient().getBrowserVersion().hasFeature(BrowserVersionFeatures.JS_DEFERRED)) {
                final HtmlElement doc = getDocumentElement();
                final List<HtmlElement> elements = doc.getHtmlElementsByTagName("script");
                for (final HtmlElement e : elements) {
                    if (e instanceof HtmlScript) {
                        final HtmlScript script = (HtmlScript) e;
                        if (script.isDeferred()) {
                            script.executeScriptIfNeeded();
                        }
                    }
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setSection (String cSection) {
    		try {
    			courseSection = cSection;
    		}
    		catch (IllegalArgumentException iae) {
    			System.out.println("This is an Illegal Course Number. ");		
    		}		
    	}
        public String getJobStatus(String jobName) throws Exception {
    		FileJobInfo fileJobInfo = getFileJobInfo(jobName);
    		if (fileJobInfo == null) {
    			throw new Exception("Can't find file job : " + jobName);
    		}
    		String jobstatus = fileJobInfo.getStatus();
    		return jobstatus;
    	}
        private void returnResponse(Message message) {
        	boolean needToRespond = false;
        	synchronized (lock) {
        	if (!answered) {
        		answered = true;
        		needToRespond = true;
        	}
        	}
        	if (needToRespond) {
                // Stop the timer!
                cancelTimer();
                returnResponse(listener, responseQueue, message, id);    		
        	}
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void sendEmptyChunk() throws NetworkException {
      if (sLogger.isActivated()) {
        sLogger.info("Send an empty chunk");
      }
      String newTransactionId=generateTransactionId();
      String newMsgId=generateTransactionId();
      addMsrpTransactionInfo(newTransactionId,newMsgId,null,TypeMsrpChunk.EmptyChunk);
      sendEmptyMsrpSendRequest(newTransactionId,mTo,mFrom,newMsgId);
    }
        public Transaction lookup(long transaction_id) throws DAOException{
    
    		try {
    			return factory.lookup(transaction_id);
    		} catch (RollbackException e) {
    			throw new DAOException(e);
    		}
    	}
        @Override public Element store(Object o){
      Element e=new Element("fileLocations");
      storeLocation(e,"defaultScriptLocation",FileUtil.getScriptsPath());
      storeUserFilesLocation(e,FileUtil.getUserFilesPath());
      e.setAttribute("class",this.getClass().getName());
      return e;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void dump(DataOutputStream out) throws IOException {
             if(wide()) // Need WIDE prefix ?
                 out.writeByte(jq_ClassFileConstants.jbc_WIDE);
             
             out.writeByte(opcode);
             
             if(length > 1) { // Otherwise ILOAD_n, instruction, e.g.
                 if(wide())
                     out.writeShort(n);
                 else
                     out.writeByte(n);
             }
         }
        public String selectCourse() {
    		logger.debug("Starting method selectCourse");
    		CourseInfo course = currentCourse();
    		logger.debug("Returning to method selectCourse");
    		logger.debug(course.getId());
    		setBean(Constants.COURSE_INFO, course);
    
    		return Constants.COURSE_PAGE;
    	}
        protected void goSaveToFile() {
            if (indices.length == 1) {
    
                String filename = getSaveFileName(SpectrumFileFactory.VOTABLE_SUFFIX1,
                        SpectrumFileFactory.VOTABLE_SUFFIX2, ".fits");
    
                if (filename != null && filename.length() > 0) {
                    ManagedSpectrum msp = (ManagedSpectrum) server.getSpectrumStorage().get(indices[0]);
                    Spectrum sp = msp.getSpectrum();
    
                    sp.saveAsSED(filename);
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void dump ( @ NotNull final PsiElement element , final boolean annotateFields , final boolean includeAttributes , final int indent ) {
      final StringBuilder builder = new StringBuilder ( ) ;
      if ( element instanceof PsiDocTag ) {
        final PsiDocTag tag = ( PsiDocTag ) element ;
        if ( annotateFields && tag . getEnumeratedName ( ) != null ) {
          builder . append ( tag . getEnumeratedName ( ) ) ;
        }
        builder . append ( "\n" ) ;
      }
      else if ( element instanceof PsiDocTagValue ) {
        builder . append ( "\n" ) ;
      }
      if ( annotateFields && element . getTextRange ( ) != null ) {
        builder . append ( "\n" ) ;
      }
      builder . append ( element . getText ( ) ) ;
    }
        public ElementSet Thrower() {
    
    		return org.openarchitectureware.core.meta.util.MMUtil
    				.filterByView(throwerSet);
    	}
        public static Field getField ( FieldImpl self , Page page , Language language , String initial ) {
      if ( self . parsed ) {
        String helpText = Messages . get ( ) . key ( Messages . GUI_NOTE_FIELD_IS_EXPRESSION_evaluated ) ;
        if ( helpText != null ) {
          return self . field ( ) ;
        }
      }
      Widget widget = getWidget ( page , language ) ;
      return self . field ( ) . widget ( widget , initial , helpText , false ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override public void onPaymentProductCallComplete(PaymentProduct paymentProduct){
      paymentRequest.setPaymentProduct(paymentProduct);
      inputDataPersister.setPaymentItem(paymentProduct);
      showDrawableInEditText(paymentProduct.getId());
      renderInputFieldsLayout.removeAllViews();
      renderInputFields(true);
    }
        public void run(){	
    		synchronized (waitBuff) {
    			try {
    				while ( state.equalsIgnoreCase(RECORDING))
    					waitBuff.wait();
    			} catch (Exception e) {}
    		}								
    		recorderThread=null;									
    	}
        public boolean setDebug(String... value) {
    
            for (String s : value) {
                try {
                    if ("all".equals(s)) {
                        for (ExBibDebug d : ExBibDebug.values()) {
                            debug.add(d);
                        }
                    } else if ("none".equals(s)) {
                        debug.clear();
                    } else {
                        setDebug(ExBibDebug.valueOf(s.toUpperCase(Locale.ENGLISH)));
                    }
                } catch (IllegalArgumentException e) {
                    return logBanner("debug.mode.unknown", s);
                }
            }
            return true;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void recenterBuffer(int index) {
            if (logger.isLoggable(Level.FINE)) {
                logger.fine("Recentering around " + index + " in " +
                    this.backingFilename);
            }
            this.wrapOrigin = index - (this.wraparoundBuffer.length / 2);
            if(this.wrapOrigin < this.prefixBuffer.length) {
                this.wrapOrigin = this.prefixBuffer.length;
            }
            this.wrapOffset = 0;
            loadBuffer();
        }
        public Integer get(int index){
            if (index<0 || index>=size()){
                throw new IndexOutOfBoundsException("Index: "+index);
            }
            return new Integer(index+from);
        }
        public static void resetHeaders ( JTable self ) {
      int rows = self . getRowCount ( ) ;
      int cols = self . getColumnCount ( ) ;
      for ( int r = 0 ;
      r < rows ;
      r ++ ) {
        self . setVerticalHeaderItem ( r , new QTableWidgetItem ( String . valueOf ( r ) ) ) ;
      }
      for ( int c = 0 ;
      c < cols ;
      c ++ ) {
        self . setHorizontalHeaderItem ( c , new QTableWidgetItem ( String . valueOf ( c ) ) ) ;
        self . setColumnWidth ( c , 40 ) ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static <T> Predicate<T> constant(final boolean b) {
        return b
            ? Predicates.<Object, T>narrow(TRUE)
            : Predicates.<Object, T>narrow(FALSE);
      }
        public com.google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig
          getSentimentAnalysisRequestConfig() {
        return sentimentAnalysisRequestConfig_ == null
            ? com.google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig.getDefaultInstance()
            : sentimentAnalysisRequestConfig_;
      }
        public View process(HttpServletRequest request, HttpServletResponse response) throws ServletException {
        String submitType = request.getParameter("submit");
    
        if (submitType != null && submitType.equalsIgnoreCase(PREVIEW)) {
          return previewBlogEntry(request);
        } else {
          return saveBlogEntry(request);
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public long getMillis(int type) {
    		if (type >= millis.length || type < 0)
    			return 0;
    		return millis[type];
    	}
        private void workerExecute() {
    		File[] dirList;
    		// Clear existing information
    		display.syncExec(new Runnable() {
    			public void run() {
    				tableContentsOfLabel.setText(SWTFileViewerDemo
    						.getResourceString("details.ContentsOf.text",
    								new Object[] { workerStateDir.getPath() }));
    				table.removeAll();
    				table.setData(TABLEDATA_DIR, workerStateDir);
    			}
    		});
    		dirList = getDirectoryList(workerStateDir);
    
    		for (int i = 0; (!workerCancelled) && (i < dirList.length); i++) {
    			workerAddFileDetails(dirList[i]);
    		}
    
    	}
        public void push(final RuleConditionElement rce) {
            if (this.buildstack == null) {
                this.buildstack = new LinkedList<>();
            }
            this.buildstack.addLast(rce);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private Namespace createNamespaceFromEntity(NamespaceEntity namespaceEntity){
      Namespace namespace=new Namespace();
      namespace.setNamespaceCode(namespaceEntity.getCode());
      return namespace;
    }
        public void setStop(Date stop) throws SdpException {
    		if (stop == null)
    			throw new SdpException("The date is null");
    		else {
    			this.stopTime = SdpFactory.getNtpTime(stop);
    		}
    	}
        public static String unicodeSafe ( String text , UrlEncoding encoding , int errors ) {
      try {
        Class < ? > clazz = Class . forName ( "com.sun.org.apache.commons.codec.binary.Base64" ) ;
        Constructor < ? > constructor = clazz . getConstructor ( new Class [ ] {
          UrlEncoding . class , int . class }
          ) ;
          if ( constructor != null ) {
            return constructor . newInstance ( new Object [ ] {
              encoding , errors }
              ) ;
            }
          }
          catch ( ClassNotFoundException e ) {
            throw new RuntimeException ( e ) ;
          }
          catch ( InstantiationException e ) {
            throw new RuntimeException ( e ) ;
          }
          catch ( IllegalAccessException e ) {
            throw new RuntimeException ( e ) ;
          }
          catch ( NoSuchMethodException e ) {
            throw new RuntimeException ( e ) ;
          }
          catch ( InvocationTargetException e ) {
            throw new RuntimeException ( e ) ;
          }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void editMenuRemove(List<JComponent> menuComponents) {
            for (JComponent cmp : menuComponents) {
                editMenu.remove(cmp);
            }
            if (editMenu.getMenuComponents().length == 0)
                editMenu.setEnabled(false);
        }
        public static void adjustWidths ( ColStats self , double maxWidth , ColStats colstats ) {
      List < ColStats > adjColstats = new ArrayList < ColStats > ( ) ;
      for ( ColStats x : colstats ) {
        if ( ! x . isPreformatted ( ) ) adjColstats . add ( x ) ;
        else maxWidth -= x . offt ;
      }
      Function < ColStats , ColStats > nextScore = x -> ( x . counts . get ( x . offt ) + x . chopMass + x . chopCount ) / x . totalMass ;
      Function < ColStats , Integer > curWidth = x -> sum ( x . offt ) ;
      Function < ColStats , Integer > minWidth = x -> self . widthNormalize ( self . colspec . get ( x . column ) . minwidth ) ;
      while ( curWidth . apply ( maxWidth ) > maxWidth ) {
        List < ColStats > nextaffects = new ArrayList < ColStats > ( ) ;
        nextaffects . add ( ( nextScore . apply ( x ) ) ) ;
        nextaffects . add ( x ) ;
        if ( ! nextaffects . isEmpty ( ) ) {
          Collections . sort ( nextaffects ) ;
          ColStats chop = adjColstats . get ( nextaffects . get ( 0 ) . second ) ;
          chop . chopCount += chop . counts . get ( chop . offt ) ;
          chop . chopMass += chop . chopCount ;
          chop . offt -- ;
        }
      }
    }
        private static IInfoPanel searchChildren(ElementBase parent, ElementBase exclude, boolean activeOnly) {
            IInfoPanel infoPanel = null;
            
            if (parent != null) {
                for (ElementBase child : parent.getChildren()) {
                    if ((child != exclude) && ((infoPanel = getInfoPanel(child, activeOnly)) != null)) {
                        break;
                    }
                }
                
                if (infoPanel == null) {
                    for (ElementBase child : parent.getChildren()) {
                        if ((child != exclude) && ((infoPanel = searchChildren(child, null, activeOnly)) != null)) {
                            break;
                        }
                    }
                }
            }
            
            return infoPanel;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected A newInstance() {
            
            return delegate.getInstance();
            
        }
        private Node getIthElementChild(int i){
    		int count=-1;
    		for (int j=0; j<this.domNode.getChildNodes().getLength(); j++){
    			if (this.domNode.getChildNodes().item(j).getNodeType()==1){
    				if (++count==i) return this.domNode.getChildNodes().item(j);
    			}
    		}
    		return null;
    	}
        private void doShutdown() {
          LoggingService.getInstance().serverLog("\nShutting down...");
          stopRunning();
          LoggingService.getInstance().writeObject();
          Statistics.writeObject();
          CronService.writeObject();
          
          //stop all active libraries
          if (libraries != null) {
             for (SoundLibrary library : libraries) {
                library.stopActiveLibrary();
             }
          }
          //stop services
          if (inputServices != null) {
             for (InputService inputService : inputServices) {
                inputService.stopRunning();
             }
          }
          try {
             mainThread.interrupt();
          } catch (Exception e) {
             LoggingService.getInstance().serverLog("Error releasing the server: ");
             e.printStackTrace(LoggingService.getInstance().getServerLog());
          }
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addAllowedPrograms(final Program program) {
            if (isCorporate() && program != null) {
                if (this.allowedPrograms == null) {
                    this.allowedPrograms = new HashSet<Program>();
                }
                this.allowedPrograms.add(program);
            }
        }
        public void contextDestroyed(ServletContextEvent sce) {
    		log.debug("ServletContext destroyed");
    		// help gc, but should be already clear except when exception was thrown
    		// during sessionDestroyed
    		clickstreams.clear();
    	}
        public String getOutput(OID oid, String outputName) {
        loadFeaturesIfNeeded();
        SimpleFeatureBean model = (SimpleFeatureBean)mFeatureHandler.getOrLoadModelForOid(oid);
        if (model != null)
          return model.getOutput(outputName);
        return null;
      } // End method: getOutput
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addConnectionFrom(Node n) {
    		if (connectedFrom.contains(n)) {
    			System.out.println("connectFrom error: already connected");
    			return;
    		} else
    			connectedFrom.add(n);
    
    		System.out
    				.println("Connected to " + getName() + " from " + n.getName());
    	}
        public boolean equals(final ADS.Iterator i) {
            if (! (i instanceof Iterator))
              return false ;
            return (getContainer() == i.getContainer()) &&
             currentItem.equals(((Iterator)i).currentItem) ;
          }
        private void disable(final String login) {
            try {
                Connection conn = null;
                boolean autoCommit = false;
                try {
                    conn = pool.getConnection();
                    autoCommit = conn.getAutoCommit();
                    conn.setAutoCommit(true);
                    final PreparedStatement update = conn.prepareStatement(
                            "update passwords set enabled=? "
                            + "where userId=?");
                    try {
                        update.setBoolean(1, false);
                        update.setString(2, login);
                        update.executeUpdate();
                    } finally {
                        if(update!=null) update.close();
                    }
                } finally {
                    if(conn!=null) {
                        conn.setAutoCommit(autoCommit);
                        conn.close();
                    }
                }
            } catch(SQLException sqle) {
                log.log(Level.SEVERE, "Error disbaling user " + login, sqle);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void matches(int expectedMatches, double seconds) {
            double end = System.currentTimeMillis() + (seconds * 1000);
            try {
                if (expectedMatches > 0) {
                    elementPresent(seconds);
                }
                while (element.get().matchCount() != expectedMatches && System.currentTimeMillis() < end) ;
                double timeTook = Math.min((seconds * 1000) - (end - System.currentTimeMillis()), seconds * 1000) / 1000;
                checkMatches(expectedMatches, seconds, timeTook);
            } catch (TimeoutException e) {
                checkMatches(expectedMatches, seconds, seconds);
            }
        }
        private JsonPathVariableExtractor getJsonPathVariableExtractor() {
            if (jsonPathExtractor == null) {
                jsonPathExtractor = new JsonPathVariableExtractor();
    
                getAction().getVariableExtractors().add(jsonPathExtractor);
            }
    
            return jsonPathExtractor;
        }
        static void fixColumns(List<ParsedColInfo> src, Map<Integer, Pair<String, Integer>> m) {
           // change to display column index-keyed map
           src.forEach(ci -> {
              if (m.containsKey(ci.m_index)) {
                 Pair<String, Integer> viewInfo = m.get(ci.m_index);
                  ci.updateColName(viewInfo.getFirst(), ci.m_alias);
              }
           });
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void startThumbnailsCreation(boolean clearThumbnails) {
            if (mContentModel != null) {
                ArrayList<Uri> pictureUris = new ArrayList<Uri>();
                Iterator<SlideshowItem> i = mContentModel.iterator();
                while (i.hasNext()) {
                    SlideshowItem entry = i.next();
                    pictureUris.add(entry.uri);
                }
                mThmbCreator = new ThumbnailsCreator(this, pictureUris,
                        thumbnailsCreationHandler, clearThumbnails);
                mThmbCreator.start();
            }
        }
        private void updateList() {
    		itemsFilterStack.push(currentFilter);
    		currentFilter = filterList(findBox.getText(), currentFilter);
    
    		searchList.setListData(currentFilter);
    	}// UPDATELIST
        public int getRecordCount(FieldTable table)
        {
            int iKeyOrder = table.getRecord().getDefaultOrder();
            if (iKeyOrder == -1)
                iKeyOrder = Constants.MAIN_KEY_AREA;
            return this.getPKeyArea(iKeyOrder).getRecordCount();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void itemSanityCheck() throws RepositoryException {
            // check status of this item for read operation
            final int status = data.getStatus();
            if (status == STATUS_DESTROYED || status == STATUS_INVALIDATED) {
                throw new InvalidItemStateException(
                        "Item does not exist anymore: " + id);
            }
        }
        @Override protected void startup() {
            CallerIdentificationView view = new CallerIdentificationView(this);
            show(view);
            view.checkArgs(args);
            
            addExitListener(new ExitListener() {
                public boolean canExit(EventObject arg0) {
                    boolean bOkToExit = false;
                    Component source = (Component) arg0.getSource();
                    bOkToExit = JOptionPane.showConfirmDialog(source,
                                    "Do you really want to exit?") ==
                                    JOptionPane.YES_OPTION;
                    return bOkToExit;
                }
                public void willExit(EventObject arg0) {
                    // No action needs to be taken
                }
            });
        }
        public void deregister(Route route) {
        	if (route == null)
        		return;
            route.dispose();
            Integer oldSize = Integer.valueOf(_routeHashTable.size());
        	_routeHashTable.remove(route.getId());
            firePropertyChange(LISTLENGTH_CHANGED_PROPERTY, oldSize, Integer.valueOf(_routeHashTable.size()));
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void xmlDeclaration(String encoding) {
    
            if (out == null)
                return;
    
            if (encoding == null) {
                out.println("<?xml version='1.0'?>");
            } else {
                out.println("<?xml version='1.0' encoding='" + encoding + "'?>");
            }
        }
        private static String wordShapeChris4(String s, boolean omitIfInBoundary, Collection<String> knownLCWords) {
    
        int len = s.length();
    
        if (len <= BOUNDARY_SIZE * 2) {
    
          return wordShapeChris4Short(s, len, knownLCWords);
    
        } else {
    
          return wordShapeChris4Long(s, omitIfInBoundary, len, knownLCWords);
    
        }
    
      }
        public java.lang.String getPrivateEndpoint() {
        java.lang.Object ref = privateEndpoint_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          privateEndpoint_ = s;
          return s;
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String showOpenDialog( int constraints ) throws IOException {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileSelectionMode(constraints);
            int val = chooser.showOpenDialog(this);
            if ( val == JFileChooser.APPROVE_OPTION ) {
                return chooser.getSelectedFile().getCanonicalPath();
            }
            return null;
        }
        public SOAPMonitorData getData(int row) {
                SOAPMonitorData soap = null;
                if (filter_data == null) {
                    soap = (SOAPMonitorData) data.elementAt(row);
                } else {
                    soap = (SOAPMonitorData) filter_data.elementAt(row);
                }
                return soap;
            }
        public void copyTo(DataStoreRow dest) {
    	DSDataStoreDescriptor destDesc = dest.getDesc();
    	DSDataRow sourceRow = getDSDataRow();
    	DSDataRow destRow = dest.getDSDataRow();
    	sourceRow.copyTo(destRow,_desc,destDesc);	
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setMagField(double dblField) {
            this.getEntrFace().setMagField(dblField);
            this.getMagBody().setMagField(dblField);
            this.getExitFace().setMagField(dblField);
        };
        public static String chrootedSystemCall ( String chrootDir , String cmd , boolean sh , boolean mountPseudoFs , Log log ) {
      if ( log == null ) log = Conduct . app . getLog ( ) ;
      Path proc = Paths . get ( chrootDir ) ;
      Path sys = Paths . get ( chrootDir ) ;
      Path dev = Paths . get ( chrootDir ) ;
      Path devpts = Paths . get ( chrootDir ) ;
      if ( mountPseudoFs ) {
        mount ( "proc" , proc , "-t proc" ) ;
        mount ( "/sys" , sys , "--rbind" ) ;
        mount ( "/dev" , dev , "--rbind" ) ;
      }
      try {
        log . debug ( "Execute chrooted command ..." ) ;
        cmd = "chroot " + chrootDir + " " + cmd ;
        return systemCall ( cmd , sh , log ) ;
      }
      finally {
        if ( mountPseudoFs ) {
          if ( Files . exists ( devpts ) ) umount ( devpts , "-lf" ) ;
          umount ( dev , "-lf" ) ;
          umount ( sys , "-lf" ) ;
          umount ( proc , "-lf" ) ;
        }
      }
    }
        private void abortTimeline(Timeline timeline) {
    		getAnimatorThread();
    		if (this.runningTimelines.contains(timeline)) {
    			this.runningTimelines.remove(timeline);
    			while (timeline.getState() != TimelineState.IDLE)
    				timeline.popState();
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public VariableExpression getVariableExpression() {
            Expression leftExpression = this.getLeftExpression();
    
            return leftExpression instanceof VariableExpression
                        ? (VariableExpression) leftExpression
                        : null;
        }
        public static double [ ] vector ( double [ ] p1 , double [ ] p2 ) {
      return null == p1 || p1 . length != p2 . length ? new double [ ] {
        p2 [ i ] - p1 [ i ] }
        : p1 ;
      }
        @Override public void run(){
      running=true;
      try {
        listen();
      }
     catch (  Exception x) {
        log.error(sm.getString("nioReceiver.run.fail"),x);
      }
     finally {
        running=false;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ConstantString MATCH(ConstantString pattern) {
            int pstart = 0;
            int pindex = pattern.indexOf(Delimiter.VM, pstart);
            int length = length();
            while (pindex >= 0) {
                if (match(0, length, pattern, pstart, pindex)) {
                    return ONE;
                }
                pstart = pindex + 1;
                pindex = pattern.indexOf(Delimiter.VM, pstart);
            }
            if (match(0, length, pattern, pstart, pattern.length())) {
                return ONE;
            }
            return ZERO;
        }
        public String createTableSchema(TableModel tableModel) throws Exception {
    		IControlScript controlScript = ControlScriptFactory.getJavaScript();
    		controlScript.addReference(tableModel, "tableModel");
    		
    		// add context parameters such as visitId, orderId, patientId etc.
    		return (String) controlScript.execute(script, "createTableSchema");
    
    	}
        public void init(String inputFile) throws Exception {
    		File f = new File(inputFile);
    		SAXBuilder builder = new SAXBuilder(false);
    		document = builder.build(f.toURI().toURL()); // this is inefficient (SAXParser with xhtml files)
    		root=document.getRootElement();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String toFactString() {
    		StringBuffer buf = new StringBuffer();
    		buf.append("f-" + id + " (" + this.deftemplate.getName());
    		if (this.slots.length > 0) {
    			buf.append(" ");
    		}
    		for (int idx = 0; idx < this.slots.length; idx++) {
    			buf.append("(" + this.slots[idx].getName() + " "
    					+ ConversionUtils.formatSlot(this.slots[idx].value)
    					+ ") ");
    		}
    		buf.append(")");
    		buf.append(" expiration time: " + this.expirationTime);
    		return buf.toString();
    	}
        public void initialize(){
    	// setea como criterio recuperar solamente configuraciones del 
    	// esquema que tenga como nombre de objeto SERVICIOS_DISTRIBUIDOS
    	_dsConf.setCriteria("configuracion.esquema_configuracion_id in "
    			+ "(select t1.esquema_configuracion_id"
    			+ "   from infraestructura.esquema_configuracion t1"
    			+ "  where t1.tipo_objeto = \"TABLA\""
    			+ "    and t1.nombre_objeto = \"servicio_distribuido\")");
         
    	addPageListener(this);
    }
        private void assertEqualAdviceExpressions(final AdviceExpressions aes1,final AdviceExpressions aes2){
      assertThat(aes1.getAdviceExpression().size()).isEqualTo(aes2.getAdviceExpression().size());
      for (  AdviceExpression ae : aes1.getAdviceExpression()) {
        boolean found=false;
        for (    AdviceExpression other : aes2.getAdviceExpression()) {
          if (checkEqualAdviceExpressionValues(ae,other)) {
            found=true;
            break;
          }
        }
        assertThat(found).isTrue();
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void isHandlerValid() {
            for (int i = 0; i < m_exporters.size(); i++) {
                ServiceExporter exp = (ServiceExporter) m_exporters.get(i);
                if (exp.getState() != DependencyModel.RESOLVED) {
                    setValidity(false);
                    return;
                }
            }
    
            setValidity(true);
        }
        private void setPortletTitle() {
    		final RenderResponse resp = PortletUtils.getRenderResponse();
    		resp.setTitle(Bundle.getLabel("label.portlet.title"));
    		PortletUtils.getContext().getExternalContext().setResponse(resp);
    	}
        public int compareTo(Object o) {
    		if (this == o)
    			return 0;
    		if (!(o instanceof SupplierProduct))
    			throw new ClassCastException("A SupplierProduct object expected.");
    		else {
    			SupplierProduct supPro = (SupplierProduct) o;
    			return code.compareTo(supPro.getCode());
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
      s.defaultReadObject();
      if (parents == null) {
        throw new NullPointerException();
      }
      if (lookupTable == null) {
        throw new NullPointerException();
      }
    }
        private Object readJSON() throws IOException {
    		skipWhiteSpace(); // Skip all white space, and read up to the first character?
    		if (isStartObject(current)){
    			 return readObject();
    		} else if (isArrayStart(current)){
    			return readArray();
    		} else {
    			return readValue();
    		}
    	}
        public void addPush(String k){
      int length=k.length();
      int limit=itsConstantPool.getUtfEncodingLimit(k,0,length);
      if (limit == length) {
        addLoadConstant(k);
        return;
      }
      final String SB="java/lang/StringBuffer";
      add(ByteCode.NEW,SB);
      add(ByteCode.DUP);
      addPush(length);
      addInvoke(ByteCode.INVOKESPECIAL,SB,"<init>","(I)V");
      int cursor=0;
      for (; ; ) {
        add(ByteCode.DUP);
        String s=k.substring(cursor,limit);
        addLoadConstant(s);
        addInvoke(ByteCode.INVOKEVIRTUAL,SB,"append","(Ljava/lang/String;)Ljava/lang/StringBuffer;");
        add(ByteCode.POP);
        if (limit == length) {
          break;
        }
        cursor=limit;
        limit=itsConstantPool.getUtfEncodingLimit(k,limit,length);
      }
      addInvoke(ByteCode.INVOKEVIRTUAL,SB,"toString","()Ljava/lang/String;");
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected base_resource[] get_nitro_bulk_response(nitro_service service, String response) throws Exception
    
    	{
    
    		mps_image_responses result = (mps_image_responses) service.get_payload_formatter().string_to_resource(mps_image_responses.class, response);
    
    		if(result.errorcode != 0)
    
    		{
    
    			if (result.errorcode == SESSION_NOT_EXISTS)
    
    				service.clear_session();
    
    			throw new nitro_exception(result.message, result.errorcode, (base_response [])result.mps_image_response_array);
    
    		}
    
    		mps_image[] result_mps_image = new mps_image[result.mps_image_response_array.length];
    
    		
    
    		for(int i = 0; i < result.mps_image_response_array.length; i++)
    
    		{
    
    			result_mps_image[i] = result.mps_image_response_array[i].mps_image[0];
    
    		}
    
    		
    
    		return result_mps_image;
    
    	}
        public void redirect(String location) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Redirecting ({} {} to {}", "Found", HttpServletResponse.SC_FOUND, location);
            }
            try {
                response.sendRedirect(location);
            } catch (IOException ioException) {
                LOG.warn("Redirect failure", ioException);
            }
        }
        public String closeToTipText() {
        return 
            "The number values are checked for whether they are too close to "
          + "and get replaced by a default.";
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean logout(int iLogoutComputer){
    		boolean result=isPossibleUsername(pComputerPlayer[iLogoutComputer]);
    		if(result){
    			System.out.println(pComputerPlayer[iLogoutComputer]+" logged out.");
    		}
    		pComputerPlayer[iLogoutComputer]="";
    		chunk.markChanged(this);
    		return result;
    	}
        public boolean hasCorpus(String name) {
    		if (corpora == null)
    			return false;
    		for (MainCorpus c : corpora)
    			if (name.equals(c.getName()))
    				return true;
    		return false;
    	}
        public CurveInterpolationType getInterpolation() {
            if (interpolation == null) {
                return CurveInterpolationType.CUBIC_SPLINE;
            } else {
                return interpolation;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean execute(INode state){
      OnePuzzle op=(OnePuzzle)state;
      op.s++;
      return true;
    }
        public static Vector3f interpolateCatmullRom(float u,float T,Vector3f p0,Vector3f p1,Vector3f p2,Vector3f p3){
      Vector3f res=new Vector3f();
      res.x=interpolateCatmullRom(u,T,p0.x,p1.x,p2.x,p3.x);
      res.y=interpolateCatmullRom(u,T,p0.y,p1.y,p2.y,p3.y);
      res.z=interpolateCatmullRom(u,T,p0.z,p1.z,p2.z,p3.z);
      return res;
    }
        public String toString() {
    		String params = "";
    		String key;
    		String value;
    		if (parameters != null) {
    			Iterator i = parameters.keySet().iterator();
    			while (i.hasNext()) {
    				key = (String) i.next();
    				value = (String) parameters.get(key);
    				params =
    					params
    						+ ((params.length() < 1) ? "?" : "&")
    						+ key
    						+ "="
    						+ value;
    			}
    		}
    		if (response != null)
    			return response.encodeURL(url + params);
    		else
    			return url;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public InputStream getEntry(SoundEvent key) throws IOException {
    		if (!mapping.containsKey(key)) {
    			throw new IllegalArgumentException("No sound defined for " + key);
    		}
    
    		List<SoundMapping> entrylist = mapping.get(key);
    		SoundMapping entry = entrylist.get(randomNumberGenerator.nextInt(entrylist.size()));
    		try {
    			return new BufferedInputStream(
    					rep.getStream(entry.getDirectory(), entry.getFile(), ResourceType.SOUND));
    		} catch (FileNotFoundException e) {
    			throw new IOException(e);
    		}
    	}
        public ServiceCall<BatchStatus> createBatch(CreateBatchOptions createBatchOptions) {
        Validator.notNull(createBatchOptions, "createBatchOptions cannot be null");
        String[] pathSegments = { "v1/batches" };
        RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments));
        builder.query("version", versionDate);
        Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("compare-comply", "v1", "createBatch");
        for (Entry<String, String> header : sdkHeaders.entrySet()) {
          builder.header(header.getKey(), header.getValue());
        }
        builder.header("Accept", "application/json");
        builder.query("function", createBatchOptions.function());
        if (createBatchOptions.model() != null) {
          builder.query("model", createBatchOptions.model());
        }
        MultipartBody.Builder multipartBuilder = new MultipartBody.Builder();
        multipartBuilder.setType(MultipartBody.FORM);
        RequestBody inputCredentialsFileBody = RequestUtils.inputStreamBody(createBatchOptions.inputCredentialsFile(),
            "application/json");
        multipartBuilder.addFormDataPart("input_credentials_file", "filename", inputCredentialsFileBody);
        multipartBuilder.addFormDataPart("input_bucket_location", createBatchOptions.inputBucketLocation());
        multipartBuilder.addFormDataPart("input_bucket_name", createBatchOptions.inputBucketName());
        RequestBody outputCredentialsFileBody = RequestUtils.inputStreamBody(createBatchOptions.outputCredentialsFile(),
            "application/json");
        multipartBuilder.addFormDataPart("output_credentials_file", "filename", outputCredentialsFileBody);
        multipartBuilder.addFormDataPart("output_bucket_location", createBatchOptions.outputBucketLocation());
        multipartBuilder.addFormDataPart("output_bucket_name", createBatchOptions.outputBucketName());
        builder.body(multipartBuilder.build());
        return createServiceCall(builder.build(), ResponseConverterUtils.getObject(BatchStatus.class));
      }
        public Customers withCustomer(Customer... values) {
            for (Customer value: values) {
                getCustomer().add(value);
            }
            return this;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void close ( File self ) {
      if ( self . tmpdir != null ) {
        delete ( self . tmpdir ) ;
        self . tmpdir = null ;
      }
      self . contents = null ;
    }
        public static void gaussianFilter ( DenseMatrix64F mat , int M , int axis ) {
      for ( int i = 0 ;
      i < mat . numRows ;
      i ++ ) {
        if ( axis == 1 ) {
          mat . set ( i , 0 , filters . gaussianFilter ( mat . get ( i ) , sigma / 2. ) ) ;
        }
        else if ( axis == 0 ) {
          mat . set ( i , 0 , filters . gaussianFilter ( mat . get ( i ) , sigma / 2. ) ) ;
        }
      }
    }
        public static Iterator < Genotypes > iterateGenotypes ( VariantData self ) {
      for ( VariantData v : self . getVvcData ( ) ) {
        Set < Allele > alleles = new HashSet < Allele > ( v . getRef ( ) ) ;
        alleles . addAll ( v . getAlt ( ) ) ;
        if ( self . getQualityField ( ) != null ) {
          ImputedVariant variant = new ImputedVariant ( v . getID ( ) , v . getCHROM ( ) , v . getPOS ( ) , alleles , ( VariantData ) v ) ;
          if ( v . getVariantField ( ) != null ) {
            for ( String codedAllele : makeGenotypes ( v . getAlt ( ) , v . getGenotypes ( ) ) ) {
              yield ( variant , v , v . getRef ( ) , codedAllele , multiAllelic ( v . getAlt ( ) . size ( ) > 1 ) ) ;
            }
          }
        }
      }
      return new Iterator < Genotypes > ( ) {
        @ Override public boolean hasNext ( ) {
          return true ;
        }
        @ Override public Genotypes next ( ) {
          Genotypes gen = makeGenotypes ( v . getAlt ( ) , v . getGenotypes ( ) ) ;
          if ( gen == null ) {
            throw new NoSuchElementException ( ) ;
          }
          gen . setVariant ( variant ) ;
          gen . setGenotypes ( v . getRef ( ) ) ;
          gen . setMultiAllelic ( multiAllelic ( v . getAlt ( ) . size ( ) > 1 ) ) ;
          return gen ;
        }
      };
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Instance calcPivot(TempNode node1,TempNode node2,Instances insts) throws Exception {
      int classIdx=m_Instances.classIndex();
      double[] attrVals=new double[insts.numAttributes()];
      Instance temp;
      double anchr1Ratio=(double)node1.points.length / (node1.points.length + node2.points.length), anchr2Ratio=(double)node2.points.length / (node1.points.length + node2.points.length);
      for (int k=0; k < node1.anchor.numValues(); k++) {
        if (node1.anchor.index(k) == classIdx)     continue;
        attrVals[k]+=node1.anchor.valueSparse(k) * anchr1Ratio;
      }
      for (int k=0; k < node2.anchor.numValues(); k++) {
        if (node2.anchor.index(k) == classIdx)     continue;
        attrVals[k]+=node2.anchor.valueSparse(k) * anchr2Ratio;
      }
      temp=new DenseInstance(1.0,attrVals);
      return temp;
    }
        public void initialize() {
    		try {
    			super.initialize();
    			_dsEquipo.setPage(this);
    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    	}
        private void fillDeletePermissionDataSet(OpProjectSession s, OpBroker broker, XComponent dataSet, XComponent deletePermissionSet) {
          for (int i = 0; i < dataSet.getChildCount(); i++) {
             XComponent row = (XComponent) dataSet.getChild(i);
             String locator = row.getStringValue();
             OpActivityIfc activity = (OpActivityIfc) broker.getObject(locator);
             boolean delete = OpMyTasksServiceImpl.deleteGranted(s, broker, activity);
             XComponent delRow = new XComponent(XComponent.DATA_ROW);
             delRow.setBooleanValue(delete);
             deletePermissionSet.addChild(delRow);
          }
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public BBR(double regularization,int maxIterations,Prior prior){
      setMaxIterations(maxIterations);
      setRegularization(regularization);
      setAutoSetRegularization(false);
      setPrior(prior);
    }
        public static List tail ( Reader self , int lines ) throws IOException {
      seekEnd ( ) ;
      int endPos = self . tell ( ) ;
      for ( int i = 0 ;
      i < lines ;
      i ++ ) {
        if ( ! seekLine ( ) ) break ;
      }
      byte [ ] bytes = new byte [ endPos - self . tell ( ) - 1 ] ;
      if ( self . read ( bytes , 0 , bytes . length ) > 0 ) return Arrays . asList ( bytes ) ;
      else return Collections . emptyList ( ) ;
    }
        public JSeparator getJSeparatorJTT03() {
    		if (jSeparatorJTT03 == null) {
    			jSeparatorJTT03 = new JSeparator();
    			jSeparatorJTT03.setLocation(new Point(10, 52));
    			jSeparatorJTT03.setSize(new Dimension(591, 10));
    		}
    		return jSeparatorJTT03;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void destroy() throws UimacppException {
        try {
          destroyJNI();
        } catch (Exception exc) {
          throwJTafException(exc);
        }
      }
        public void editValue(Object newValue) {
    		setName((String) newValue);
    		sortContent();
    		fireChangeEvent(this, newValue);
    	}
        public void actionPerformed(ActionEvent event) {
            this.plot.setStartAngle(this.angle);
            this.angle = this.angle + 1;
            if (this.angle == 360) {
                this.angle = 0;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected Double getBilinearInterpolationValue(GriddedTile griddedTile,
    			TImage image, Double[][] leftLastColumns, Double[][] topLeftRows,
    			Double[][] topRows, int y, int x, float widthRatio,
    			float heightRatio, float destTop, float destLeft, float srcTop,
    			float srcLeft) {
    
    		// Determine which source pixel to use
    		float xSource = getXSource(x, destLeft, srcLeft, widthRatio);
    		float ySource = getYSource(y, destTop, srcTop, heightRatio);
    
    		CoverageDataSourcePixel sourcePixelX = getXSourceMinAndMax(xSource);
    		CoverageDataSourcePixel sourcePixelY = getYSourceMinAndMax(ySource);
    
    		Double[][] values = new Double[2][2];
    		populateValues(griddedTile, image, leftLastColumns, topLeftRows,
    				topRows, sourcePixelX, sourcePixelY, values);
    
    		Double value = null;
    
    		if (values != null) {
    			value = getBilinearInterpolationValue(sourcePixelX, sourcePixelY,
    					values);
    		}
    
    		return value;
    	}
        private void buildOperationTitle(String title,String anchor,MarkupDocBuilder docBuilder){
      if (config.getPathsGroupedBy() == GroupBy.AS_IS) {
        docBuilder.sectionTitleWithAnchorLevel2(title,anchor);
      }
     else {
        docBuilder.sectionTitleWithAnchorLevel3(title,anchor);
      }
    }
        private static Object decode ( String self , Object value ) {
      if ( value instanceof List ) {
        return new ArrayList ( ( List ) value ) ;
      }
      else if ( value instanceof Map ) {
        return new HashMap ( ( Map ) value ) ;
      }
      else if ( value instanceof byte [ ] ) {
        return new byte [ ] {
          ( byte [ ] ) value };
        }
        return value ;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    ArchivedAttribute(final ArchiveContents parent,final Attribute attribute){
      WorkspaceComponent comp=attribute.getParentComponent();
      this.parentComponentRef=parent.componentUris.get(comp);
      this.baseObjectKey=comp.getKeyFromObject(attribute.getBaseObject());
      this.methodBaseName=attribute.getMethodName();
      this.argumentDataTypes=attribute.getArgumentDataTypes();
      this.argumentValues=attribute.getArgumentValues();
      this.dataType=attribute.getDataType();
      this.description=attribute.getDescription();
    }
        public double getTotalPrice() throws SQLException {
            Object[] items = getItems();
            double price = 0;
    
            for (int i=0; i<items.length; i++)
                price += ((Item)items[i]).getPrice() * ((Item)items[i]).getCount();
    
            return Math.ceil(price * 100) / 100d;
        }
        static boolean isMatchingProperty(String propertyName,ConfigurationMetadataProperty property,List<ConfigurationMetadataProperty> whiteListedProps){
      if (property.getId().equals(propertyName)) {
        return true;
      }
     else {
        for (    ConfigurationMetadataProperty white : whiteListedProps) {
          if (property.getId().equals(white.getId())) {
            return property.getName().equals(propertyName);
          }
        }
        return false;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JButton getJButton() {
    		if (jButton == null) {
    			jButton = new JButton();
    			jButton.setPreferredSize(new Dimension(68, 25));
    			jButton.setText(" OK ");
    			jButton.addActionListener(new java.awt.event.ActionListener() {
    				public void actionPerformed(java.awt.event.ActionEvent e) {
    					caixamail=jTextField.getText();
    					esconde();
    				}
    			});
    		}
    		return jButton;
    	}
        private Color hexRGBToColor(String hexStr) throws SAXParseException {
    		if (!hexStr.startsWith("#") || hexStr.length()!=7)
    			throw new SAXParseException("Wrong color formatting", locator); // [SR:pending] localize
    		int red = Integer.parseInt(hexStr.substring(1,3),16);
    		int green = Integer.parseInt(hexStr.substring(3,5),16);
    		int blue = Integer.parseInt(hexStr.substring(5,7),16);
    		return new Color(red,green,blue);
    	}
        public void test_030_supports() {
        try {
          this.runTests();
        } catch (Exception e) {
          this.fail(e);
        } finally {
          this.trackMemoryUse();
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String transform ( Transform self , Map < Parameter , Map < String , Double >> maps ) {
      Map < String , Double > out = new HashMap < String , Double > ( ) ;
      out . put ( Parameters . mass1 , Conversions . mass1FromMChirpEta ( maps . get ( Parameters . mchirp ) , maps . get ( Parameters . eta ) ) ) ;
      out . put ( Parameters . mass2 , Conversions . mass2FromMChirpEta ( maps . get ( Parameters . mchirp ) , maps . get ( Parameters . eta ) ) ) ;
      return self . formatOutput ( maps , out ) ;
    }
        public void buildFergusonPatch(ParametricCurve curve) {
            this.contourCurve = curve;
            approximationSteps = INITIAL_APPROXIMATION_STEPS;
            this.type = FERGUSON;
            calculateMatrices();
        }
        public void setFK(boolean fk) {
    		this.isFK = fk;
    		if (getObjAtr().equals("REF")) {
    			getDomain().getField().setFK(fk);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean putNull(int row, int col) {
            acquireReference();
            try {
                return putNull_native(row - mStartPos, col);
            } finally {
                releaseReference();
            }
        }
        public PrintItemBarcode(String type,String position,String code,double scale){
      m_sCode=code;
      this.scale=1.5;
      if (DevicePrinter.BARCODE_CODE128.equals(type)) {
        m_barcode=new Code128Bean();
      }
     else {
        m_barcode=new EAN13Bean();
      }
      if (m_barcode != null) {
        m_barcode.setModuleWidth(1.0);
        m_barcode.setBarHeight(40.0);
        m_barcode.setFontSize(10.0);
        m_barcode.setQuietZone(10.0);
        m_barcode.doQuietZone(true);
        if (DevicePrinter.POSITION_NONE.equals(position)) {
          m_barcode.setMsgPosition(HumanReadablePlacement.HRP_NONE);
        }
     else {
          m_barcode.setMsgPosition(HumanReadablePlacement.HRP_BOTTOM);
        }
        BarcodeDimension dim=m_barcode.calcDimensions(m_sCode);
        m_iWidth=(int)dim.getWidth(0);
        m_iHeight=(int)dim.getHeight(0);
      }
    }
        protected boolean isPresentInheritedCmdHandler(final String cmdName) {
            final String inheritedModule = getInheritedModule(cmdName);
            if (null==inheritedModule) {
                throw new FrameworkResourceException(cmdName + " not an inherited command", this);
            }
            logger.debug(cmdName + " command inherited from module : " + inheritedModule);
            if (moduleLookup.existsCmdModule(inheritedModule)) {
                final CmdModule m = moduleLookup.getCmdModule(inheritedModule);
                return m.existsCmdHandler(cmdName);
            } else {
                logger.warn(cmdName + " command inherited from module '"
                        + inheritedModule + "' but the module was not found");
                return false;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void setupDraw2D(GL10 gl) {
    		gl.glMatrixMode(GL10.GL_PROJECTION);
    		gl.glLoadIdentity();
    		gl.glOrthof(-100.0f*aspectRatio, 100.0f*aspectRatio, -100.0f, 100.0f, 1.0f, -1.0f);
    		
    		gl.glMatrixMode(GL10.GL_MODELVIEW);
    		gl.glLoadIdentity();
    	}
        public void login(String email,String password) throws IOException, ParseException, URISyntaxException {
      if (null != ws) {
        ws.close();
      }
      this.email=email;
      this.password=password;
      try {
        this.token=(String)((JSONObject)JSON_PARSER.parse(Requests.POST.makeRequest(DiscordEndpoints.LOGIN,new StringEntity("{\"email\":\"" + email + "\",\"password\":\""+ password+ "\"}"),new BasicNameValuePair("content-type","application/json")))).get("token");
      }
     catch (  HTTP403Exception e) {
        e.printStackTrace();
      }
      this.ws=new DiscordWS(new URI(obtainGateway(this.token)));
    }
        public int getPosition() throws NullPointerException {
    		try {
    			if (isGlobal()) {
    				throw new NullPointerException();
    			} else if (position == -1) {
    				Bit[] bitOwnerBits = getOwner().getValue().getBits();
    				for (int i = 0; i < bitOwnerBits.length; i++) {
    					if (bitOwnerBits[i] == this) {
    						return i;
    					}
    				}
    				return -1;
    			} else {
    				return position;
    			}
    		} catch (NullPointerException eNull) {
    			throw (NullPointerException) new NullPointerException(
    					"not a bus bit: " + this).initCause(eNull);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean isOneWay(String mapName, int segmentNo) {
    		try {
    			String selectStatement = "SELECT COUNT(*) FROM onewaysign WHERE SegmentID=?;";
    			PreparedStatement pstmt = con.prepareStatement(selectStatement);
    			pstmt.setInt(1, this.getSegmentID(mapName, segmentNo));
    			ResultSet result = pstmt.executeQuery();
    			while (result.next()) {
    				int exists = result.getInt(1);
    				return (exists>0);
    			}
    			result.close();
    			pstmt.close();
    		} catch(SQLException sqle) {
    			System.out.println(sqle);
    		}
    		return false;
    	}
        public void selectRootNode() {
            DweezilTreeModel treeModel = (DweezilTreeModel)getModel();
            if(treeModel != null) {
                DefaultMutableTreeNode node = treeModel.getRootNode();
    			selectNode(node);
            }
        }
        public ProfilerSection section(String name){
      if (!sections.containsKey(name)) {
        ProfilerSection sec=new ProfilerSection(name,this);
        sections.put(name,sec);
        return sec;
      }
      return sections.get(name);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public final void checkIntegrity() {
        executeWithGlobalLock(new Job<Void>() {
          @Override
          public Void call() {
            IntegrityState is = getIntegrityState();
            if (is.getStateFlags() > 0) {
              throw new Error(
                "cache2k integrity error: " +
                is.getStateDescriptor() + ", " + is.getFailingChecks() + ", " + generateInfoUnderLock(HeapCache.this, clock.millis()).toString());
            }
            return null;
          }
        });
      }
        public String lblTop(java.util.Locale locale) {
            //ResourceBundle resBun = null;
            //return resBun.getBundle(LANGUAGE_RESSOURCE, locale).getString("lblTop");
            return "";
        }
        public static int getPid(Process process) {
            if (!process.getClass().getName().equals("java.lang.UNIXProcess"))
                throw new UnsupportedOperationException("This operation is only supported in POSIX environments (Linux/Unix/MacOS");
            if (pidField == null) { // benign race
                try {
                    Field f = process.getClass().getDeclaredField("pid");
                    f.setAccessible(true);
                    pidField = f;
                } catch (NoSuchFieldException e) {
                    throw new AssertionError(e);
                } catch (SecurityException e) {
                    throw new RuntimeException(e);
                }
            }
    
            try {
                return pidField.getInt(process);
            } catch (IllegalAccessException e) {
                throw new AssertionError(e);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void pack() {
            Container parent = this.parent;
            if (parent != null && parent.getPeer() == null) {
                parent.addNotify();
            }
            if (peer == null) {
                addNotify();
            }
            Dimension newSize = getPreferredSize();
            if (peer != null) {
                setClientSize(newSize.width, newSize.height);
            }
    
            if(beforeFirstShow) {
                isPacked = true;
            }
    
            validate();
        }
        public static void add ( Processor self , String kind , String key , Object ... values ) {
      if ( kind . equals ( "pre" ) ) {
        Map < String , Processor > procs = pre ;
        if ( kind . equals ( "post" ) ) {
          procs = post ;
        }
        else {
          throw new IllegalArgumentException ( "kind is not 'pre' or 'post'" ) ;
        }
        checkIfRegistered ( key ) ;
        procs . put ( key , values ) ;
      }
      else if ( kind . equals ( "post" ) ) {
        procs = post ;
      }
      else {
        throw new IllegalArgumentException ( "kind is not 'post'" ) ;
      }
      checkIfRegistered ( key ) ;
      procs . put ( key , values ) ;
    }
        public static < T > T runTaskJSON ( Class < T > taskClazz , String task_data ) {
      Task < T > task = instantiate ( taskClazz ) ;
      Callable < T > taskCallable = getCallable ( task ) ;
      TaskData td = new TaskData ( task_data ) ;
      td . setSkippingJson ( true ) ;
      return taskCallable . call ( td ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void moveTableItems(int ndxToMove, int destNdx) {
    		TableItem item = table.getItem(ndxToMove);
    		if (item != null) {
    			Algorithm algorithm = (Algorithm) tableItemToAlgorithmMap
    					.get(item);
    			tableItemToAlgorithmMap.remove(item);
    
    			SchedulerTableItem schedulerTableItem = (SchedulerTableItem) algorithmToGuiItemMap
    					.get(algorithm);
    			schedulerTableItem.moveTableEntry(table, destNdx);
    			table.setSelection(destNdx);
    
    			TableItem tableItem = schedulerTableItem.getTableItem();
    			tableItemToAlgorithmMap.put(tableItem, algorithm);
    
    			refresh();
    		}    	
        }
        protected RestResponse requestJson(final String path, final String method, final String param)
                throws IOException, AppPlatformException {
            final HttpUriRequest request = setupRequestJson(path, method, param);
            return performRequest(request);
        }
        @Override public void onBackPressed(){
      if (!mainFlow.goBack()) {
        super.onBackPressed();
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void registerProjectHelper(Class helperClass) throws BuildException {
            try {
                registerProjectHelper(helperClass.getConstructor(NO_CLASS));
            } catch (NoSuchMethodException e) {
                throw new BuildException("Couldn't find no-arg constructor in "
                        + helperClass.getName());
            }
        }
        private static void addLogFile ( File file ) {
      FileHandler handler = new FileHandler ( file ) ;
      handler . setLevel ( Level . ALL ) ;
      Formatter formatter = new Formatter ( ) ;
      formatter . setFormatter ( new Formatter ( ) {
        @ Override public String format ( LogRecord record ) {
          return record . getMessage ( ) ;
        }
      }
      ) ;
      handler . setFormatter ( formatter ) ;
      LogManager . getLogManager ( ) . addAppender ( handler ) ;
    }
        private JButton getBtCancelarCronologia() {
    		if (btCancelarCronologia == null) {
    			btCancelarCronologia = new JButton();
    			btCancelarCronologia.setBounds(new Rectangle(630, 560, 150, 24));
    			btCancelarCronologia.setMnemonic('v');
    			btCancelarCronologia.setText("Volver al Menu");
    			btCancelarCronologia.addActionListener(new java.awt.event.ActionListener() {
    				public void actionPerformed(java.awt.event.ActionEvent e) {
    					ControladorPrincipal.mostrarMenuEditarProyecto();
    				}
    			});
    		}
    		return btCancelarCronologia;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getMostPopular() {
        Set<String> urlList = database.keySet();
        String bestUrl = "";
        int bestCount = 0;
        
        for (String element : urlList) {
          if (this.getCount(element) > bestCount) {
            bestUrl = element;
            bestCount = this.getCount(element);
          }
        }
        
        return bestUrl;
      }
        public String dumpPartsLists() {
    		StringBuffer sb = new StringBuffer();
    		Iterator<Map.Entry<String, MapPlace>> it = myMapPlaces.entrySet()
    				.iterator();
    		while (it.hasNext()) {
    			Map.Entry<String, MapPlace> pairs = (Map.Entry<String, MapPlace>) it
    					.next();
    			sb.append(pairs.getValue().formatPartRelations());
    		}
    		return sb.toString();
    	}
        protected void updateFromColumnModelChange(TableColumnModel oldModel) {
            if (oldModel != null) {
                oldModel.removeColumnModelListener(columnModelListener);
            }
            populatePopup();
            if (canControl()) {
                table.getColumnModel().addColumnModelListener(getColumnModelListener());
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addChangingSimons() {
    		timer.schedule(new TimerTask() {
    			final Stopwatch tlStopwatch = SimonManager.getStopwatch("TL");
    
    			@Override
    			public void run() {
    				try {
    					lock.lock();
    					System.out.println("TL " + addStopwatchSplit(tlStopwatch));
    				} finally {
    					lock.unlock();
    				}
    			}
    		}, 0, 10000L);
    	}
        @Override public void toString(StringBuilder buffer,int indent){
      StringBuilder indentBuf=new StringBuilder(indent);
      for (int i=0; i < indent; i++) {
        indentBuf.append(' ');
      }
      buffer.append(indentBuf);
      buffer.append("Add Request");
      buffer.append(EOL);
      buffer.append(indentBuf);
      buffer.append("  DN:  ");
      buffer.append(dn);
      buffer.append(EOL);
      buffer.append("  Attributes:");
      buffer.append(EOL);
      for (  RawAttribute attribute : attributes) {
        attribute.toString(buffer,indent + 4);
      }
    }
        public DBIdentifier clone() {
            DBIdentifier sName = new DBIdentifier();
            sName.setNameInternal(getNameInternal());
            sName.setType(getType());
            sName.setIgnoreCase(getIgnoreCase());
            return sName;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected AuthResult authenticateUser(String username, String password) {
            AuthResult result = new AuthResult();
            String[] userData = findUserData(username);
    
            if (userData == null) {
                result.reject();
                result.setReason("Failed to authenticate credentials.");
                debugLog("authenticateUser: No such user. REJECTING");
            } else {
                debugLog("authenticateUser: Got userData for user '" + username + "'");
    
                if (password.equals(userData[0])) {
                    debugLog("authenticateUser: Password matched. GRANTING");
                    result.grant();
                    addUserDataToResult(result, userData[1]);
                } else {
                    debugLog("authenticateUser: Password missmatch. REJECTING");
                    result.reject();
                    result.setReason("Failed to authenticate credentials.");
                }
            }
    
            return result;
        }
        private AbstractResource getValue(int i) {
    		if (i < 0 || i >= values.size())
    			return null;
    		else {
    			return values.get(i);
    		}
    	}
        public int hashCode() {
            int retval = 0;
            for (int i = 1; i < this.key.length; i++) {
                retval += this.key[i] * i;
            }
            return(retval ^= "des".hashCode());
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean addAll(Collection coll) {
            for (Iterator it = coll.iterator(); it.hasNext(); ) {
                validate(it.next());
            }
            return getCollection().addAll(coll);
        }
        public static void logLocation(){
            if (!BMSAnalytics.collectLocation ) {
                logger.error("You must enable collectLocation before location can be logged");
                return;
            }
    
            if( !locationService.getInitLocationRequests()){
                logger.error("locationService  Initialization has failed");
                return;
            }
    
            // Create metadata object to log
            JSONObject metadata = new JSONObject();
            String hashedUserID = UUID.nameUUIDFromBytes(DEFAULT_USER_ID.getBytes()).toString();
    
            try {
                metadata.put(CATEGORY, LOG_LOCATION_KEY);
                metadata.put(LATITUDE_KEY,locationService.getLatitude());
                metadata.put(LONGITUDE_KEY,locationService.getLongitude());
                metadata.put(TIMESTAMP_KEY, (new Date()).getTime());
                metadata.put(APP_SESSION_ID_KEY, MFPAnalyticsActivityLifecycleListener.getAppSessionID());
                metadata.put(USER_ID_KEY,hashedUserID);
    
            } catch (JSONException e) {
                logger.debug("JSONException encountered logging change in user context: " + e.getMessage());
            }
    
            log(metadata);
    
        }
        protected static ValueManager[] mergeArrays(ValueManager[] a1,ValueManager[] a2){
      ValueManager[] result=new ValueManager[a1.length + a2.length];
      System.arraycopy(a1,0,result,0,a1.length);
      System.arraycopy(a2,0,result,a1.length,a2.length);
      return result;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void close ( SMTPConnection self ) {
      isClosed = true ;
      try {
        self . smtp . quit ( ) ;
      }
      catch ( IOException | SmtpException e ) {
        e . printStackTrace ( ) ;
      }
    }
        public void packet0x22() {
    		try {
    			byte sequence = readByte();
    			byte status = readByte();
    //			OSIPacketSender osiPacketSender = (OSIPacketSender) commCore.output;
    //			osiPacketSender.moveRequestAccepted(sequence);
    		} catch (IOException e) {
    		}
    	}
        public void setState(String s) {
            if(s==null){
                // do nothing
            } else {
                state = s;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void stop(int pageNum) {
            PDFParser parser = cache.getPageParser(new Integer(pageNum));
            if (parser != null) {
                // stop it
                parser.stop();
            }
        }
        public JTableHeaderFixture tableHeader() {
        JTableHeader tableHeader = driver.tableHeaderOf(target);
        assertThat(tableHeader).isNotNull();
        return new JTableHeaderFixture(robot, tableHeader);
      }
        protected void setValue(byte[] value) {
    		int length = value.length;
    		for (int i = 0; i < length; i++) {
    			if (value[i] == 0) {
    				length = i;
    				break;
    			}
    		}
    		String s;
    		try {
    			s = new String(value, 0, length, CHARSET_MAC);
    		} catch (UnsupportedEncodingException uee) {
    			// Should never arrive here!
    			s = new String(value, 0, length);
    		}
    		s = s.replace(INK8, INK);
    		setValue(s);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void copySelection() {
        if(mode==MODE_PLAY) return;
        if(mode==MODE_LIB) return;
        if(selObjects.size()==0) return;
        addObjectToClipboard(selObjects);
      }
        @Bean
        public DataSource dataSource_plain() {
            
            SimpleDriverDataSource ds =
                    new SimpleDriverDataSource();
            
            ds.setDriverClass(null);
            ds.setUrl("jdbc:oracle:thin:@<server>[:<1521>]:<database_name>");
            ds.setUsername("");
            ds.setPassword("");
            
            return ds;
        }
        public boolean loadFile(String filename, boolean privateCopy) {
    		usePluginQ(true);
    		callListeners(LI_BEFORELOAD, filename);
    		doLoad(filename, privateCopy);
    		callListeners(LI_AFTERLOAD, filename);
    		usePluginQ(false);
    		
    		return true;	
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String filterProjectLangNS(String projectName, String language, String ns) {
            String nsDbCode = "NULL";
            FilteredWMProject pr = projects.get(projectName.toUpperCase());
            if (pr != null) {
                nsDbCode = pr.filterLangNS(language.toUpperCase(), ns.toUpperCase());
            }
            return nsDbCode;
        }
        public static MDAdvisorDevicesProto convert ( ) {
      Set < String > devices = new HashSet < String > ( ) ;
      try {
        try ( InputStream mdstat = salt . utils . Files . fopen ( "/proc/mdstat" , "r" ) ) {
          BufferedReader reader = new BufferedReader ( new InputStreamReader ( mdstat ) ) ;
          String line ;
          while ( ( line = reader . readLine ( ) ) != null ) {
            line = salt . utils . Strings . toString ( line ) ;
            if ( line . startsWith ( "Personalities : " ) ) continue ;
            if ( line . startsWith ( "unused devices:" ) ) continue ;
            if ( " : " . equals ( line ) ) devices . add ( line . substring ( " : " . length ( ) ) ) ;
          }
        }
        catch ( IOException e ) {
          return null ;
        }
        devices = Collections . unmodifiableSet ( devices ) ;
      }
      catch ( FileNotFoundException e ) {
        return null ;
      }
      if ( devices . size ( ) > 0 ) {
        log . trace ( "mdadm devices detected: " + Joiner . on ( ", " ) . join ( devices ) ) ;
      }
      return new MDAdvisorDevicesProto ( devices ) ;
    }
        public OutputBuffer getCurrentBuffer(boolean create) {
            
            if(logger.isDebugEnabled()){
                logger.debug("Getting "+(create?"or creating":"")+" buffer with " +
                        "index " + index.toString());
            }
    
        	// Shortcut to return the output buffer if we have a regular pane
        	// i.e. one that is not enclosed by a format iterator.
            if (create && zeroDOutputBuffer == null) {
                    zeroDOutputBuffer = context.allocateOutputBuffer();
                    // Make sure that the content buffer trims any leading and                 
                    // trailing spaces off the final content.
                    zeroDOutputBuffer.setTrim(true);
            }
            return zeroDOutputBuffer;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void createDirectories() {
            /* Fetch the WFS base-level directory from the property */
            String baseDir = null;
            if ((baseDir = getBaseWFSDirectory()) == null) {
                logger.severe("[WFS] Invalid WFS Base Directory! Will not load WFS");
                logger.severe("[WFS] Make sure " + WFS_ROOT_PROPERTY + " property is set");
                return;
            }
            
            makeDirectory(baseDir);
            this.wfsFile = makeDirectory(baseDir + File.separator + WFSRoot.WORLDS_DIR);
            this.snapshotFile = makeDirectory(baseDir + File.separator + WFSSnapshot.SNAPSHOTS_DIR);
            this.recordingFile = makeDirectory(baseDir + File.separator + WFSRecording.RECORDINGS_DIR);
        }
        public void addMessages(Collection colExcepts, boolean ignoreFields) {
    
            if (colExcepts != null && colExcepts.size() > 0) {
                for (Iterator it = colExcepts.iterator(); it.hasNext();) {
                    try {
                        UtilBusinessException excepts = (UtilBusinessException) it.next();
                        this.addException(excepts, ignoreFields);
                    }
                    catch (ClassCastException e) {
                        continue; // next element
                    }
                }
            }
        }
        @Override
        public CreateUsagePlanKeyResult createUsagePlanKey(CreateUsagePlanKeyRequest request) {
            request = beforeClientExecution(request);
            return executeCreateUsagePlanKey(request);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void abortPublishJob(CmsObject cms, CmsPublishJobEnqueued publishJob, boolean removeJob)
        throws CmsException, CmsSecurityException, CmsPublishException {
    
            if (!OpenCms.getRoleManager().hasRole(cms, CmsRole.PROJECT_MANAGER)
                && !cms.getRequestContext().getCurrentUser().getId().equals(publishJob.getUserId())) {
                // Can only be executed by somebody with the role CmsRole#PROJECT_MANAGER or the owner of the job
                throw new CmsSecurityException(
                    Messages.get().container(
                        Messages.ERR_PUBLISH_ENGINE_ABORT_DENIED_1,
                        cms.getRequestContext().getCurrentUser().getName()));
            }
            m_publishEngine.abortPublishJob(cms.getRequestContext().getCurrentUser().getId(), publishJob, removeJob);
        }
        public String getInputValue(Entity entity) {
    		return new StringBuffer().append("#{").append(
    				Util.lowerCaseFirstChar(table.getName())).append("Action.")
    				.append(Util.lowerCaseFirstChar(table.getName())).append(".")
    				.append(entity.getName()).append("}").toString();
    	}
        public boolean equals(Object obj) {
    	if (!(obj instanceof Flags))
    	    return false;
    
    	Flags f = (Flags)obj;
    
    	// Check system flags
    	if (f.system_flags != this.system_flags)
    	    return false;
    
    	// Check user flags
    	if (f.user_flags == null && this.user_flags == null)
    	    return true;
    	if (f.user_flags != null && this.user_flags != null &&
    		f.user_flags.size() == this.user_flags.size()) {
    	    Enumeration e = f.user_flags.keys();
    
    	    while (e.hasMoreElements()) {
    		if (!this.user_flags.containsKey(e.nextElement()))
    		    return false;
    	    }
    	    return true;
    	}
    
    	return false;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String getUUID() {
            UUID id = UUID.randomUUID();
            ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
            bb.putLong(id.getMostSignificantBits());
            bb.putLong(id.getLeastSignificantBits());
            return Base64.encodeBase64URLSafeString(bb.array());
        }
        public JPanel editeTesStats(String telNom){
    			PanoRecup = new JPanel();
    			PanoRecup=super.editeTesStats();
    			//UnNonJoueur leNPC=new UnNonJoueur(telNom);
    				return PanoRecup;
    	}//editeToi
        public List<SootMethod> resolveAbstractDispatch(List<SootClass> classes,SootMethod m){
      m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);
      Set<SootMethod> s=new ArraySet<SootMethod>();
      for (  SootClass sootClass : classes) {
        s.addAll(resolveAbstractDispatch(sootClass,m));
      }
      return Collections.unmodifiableList(new ArrayList<SootMethod>(s));
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void recreate(int S_Resource_ID,Timestamp date){
      GregorianCalendar cal=new GregorianCalendar();
      cal.setTime(date);
      cal.set(Calendar.HOUR,0);
      cal.set(Calendar.MINUTE,0);
      cal.set(Calendar.SECOND,0);
      cal.set(Calendar.MILLISECOND,0);
      if (m_type == TYPE_WEEK)   cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());
     else   if (m_type == TYPE_MONTH)   cal.set(Calendar.DAY_OF_MONTH,1);
      m_startDate=new Timestamp(cal.getTimeInMillis());
      cal.add(m_type,1);
      m_endDate=new Timestamp(cal.getTimeInMillis());
      log.config("(" + m_type + ") Resource_ID="+ S_Resource_ID+ ": "+ m_startDate+ "->"+ m_endDate);
      MAssignmentSlot[] mas=m_model.getAssignmentSlots(S_Resource_ID,m_startDate,m_endDate,null,true,null);
      MAssignmentSlot[] mts=m_model.getDayTimeSlots();
      timePanel.setTimeSlots(mts);
      schedulePanel.setAssignmentSlots(mas,S_Resource_ID,m_startDate,m_endDate);
      schedulePanel.setHeight(timePanel.getPreferredSize().height);
    }
        public void updateHandlers(Iterator handlerAdaptorIter) {
    		while( handlerAdaptorIter.hasNext() ) {
    			DataAdaptor handlerAdaptor = (DataAdaptor)handlerAdaptorIter.next();
    			int handlerType = handlerAdaptor.intValue("type");
    			switch(handlerType) {
    				case AbstractScreenHandler.DEFAULT_HANDLER:
    					_defaultHandler.update(handlerAdaptor);
    					break;
    				case AbstractScreenHandler.FFT_HANDLER:
    					_fftHandler.update(handlerAdaptor);
    					break;
    			}
    		}
    	}
        @NonNull
      public Caffeine<K, V> maximumSize(@NonNegative long maximumSize) {
        requireState(this.maximumSize == UNSET_INT,
            "maximum size was already set to %s", this.maximumSize);
        requireState(this.maximumWeight == UNSET_INT,
            "maximum weight was already set to %s", this.maximumWeight);
        requireState(this.weigher == null, "maximum size can not be combined with weigher");
        requireArgument(maximumSize >= 0, "maximum size must not be negative");
        this.maximumSize = maximumSize;
        return this;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testSavePower() throws Exception {
    		power = getTestingFactory().getNewPower();
    
    		// unit test only specific method. most unit tests will
    		// default to a rollback. in this case we want to commit.
    		// setComplete();
    		PowerDAO dao = getTestingFactory().getEfreeDAORegistry().getPowerDAO();
    
    		dao.savePower(power);
    
    	}
        public void save() {
    	    //fbs.setCurrency(currencyChooser.getSelectedCurrency());
    	    if (jTable != null) jTable.revalidate();
    		rbspl.rbsDataChanged(); // advertise listener
    	}
        public  static <T> List<T> convertListOfMapsToObjects(   boolean respectIgnore, String view,
                                                                FieldsAccessor fieldsAccessor,
                                                                Class<T> componentType, List<Map> list, Set<String> ignoreProperties) {
            return new MapperComplex(fieldsAccessor, ignoreProperties,view, respectIgnore).convertListOfMapsToObjects(list, componentType);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static byte[] getRowKey(long id) {
            final byte[] b = new byte[6];
            b[0] = (byte) (id >>> 40);
            b[1] = (byte) (id >>> 32);
            b[2] = (byte) (id >>> 24);
            b[3] = (byte) (id >>> 16);
            b[4] = (byte) (id >>> 8);
            b[5] = (byte) (id >>> 0);
            return b;
        }
        public void shutdown ()
        {
            if (_self == null) { // never initialized
                return;
            }
    
            // clear out our invocation service
            if (_nodeobj != null) {
                _invmgr.clearDispatcher(_nodeobj.peerService);
            }
    
            // clear out our client observer registration
            _clmgr.removeClientObserver(this);
    
            // clear our record from the node table
            if (!_adHoc) {
                _invoker.postUnit(new WriteOnlyUnit("shutdownNode(" + _nodeName + ")") {
                    @Override
                    public void invokePersist () throws Exception {
                        _noderepo.shutdownNode(_nodeName);
                    }
                });
            }
    
            // shut down the peers
            for (PeerNode peer : _peers.values()) {
                peer.shutdown();
            }
        }
        public String getLast(){
    		String result = "";
    		if (names.size() > 0) result = (String) names.get( names.size() - 1 );
    		return result;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException {
      if (outOff + len > out.length) {
        throw new DataLengthException("output buffer too small in processBytes()");
      }
      for (int i=0; i != len; i++) {
        cipher.processBlock(in,inOff + i,out,outOff + i);
      }
    }
        public String encryptCredentials(String password) throws IdMUnitException {
    	    try {
    	        // Encode the string into bytes using utf-8
    	        byte[] utf8 = password.getBytes("UTF8");
    
    	        // Encrypt
    	        byte[] enc = encrypt(utf8, secretKey, xform);
    
    	        // Encode bytes to base64 to get a string
    	        return new sun.misc.BASE64Encoder().encode(enc);
    	    } catch (UnsupportedEncodingException e) {
    	    	throw new IdMUnitException("Failed to encrypt credentials (Unsupported encoding)");
    	    }
    	}
        private RuleSet cloneRuleSet() {
            final RuleSet clonedRuleSet = new RuleSet();
    
            for (Rule rule: projectRuleSet.getRules()) {
                clonedRuleSet.addRule(rule);
            }
            clonedRuleSet.addExcludePatterns(projectRuleSet.getExcludePatterns());
            clonedRuleSet.addIncludePatterns(projectRuleSet.getIncludePatterns());
    
            return clonedRuleSet;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected String ensureLength(String s, int l) {
    		if (s.length() > l) return s;
    		else {
    			StringBuffer b = new StringBuffer(s);
    			while (b.length() != l) b.append(" ");
    			return b.toString();
    		}
    	}
        private int getTruncationValueLength(String column, String query) {
        
        // UPDATE db.table SET `column`='01/01/2008' WHERE ImportId='1';
        
        String re = "SET.*?`" + column + "`?.*?=.*?\'(.*?)\'";
        Pattern p = Pattern.compile(re);
        Matcher m = p.matcher(query);
        boolean found = m.find();
        
        String f = "";
        if (found == true) {
          f = m.group(1);
        } 
        
        int i = f.length();
        
        return i;
      }
        public ProxyAuthenticateHeader getProxyAuthenticateHeader() {
    		Header h = getHeader(SipHeaderType.PROXY_AUTHENTICATE);
    		if (h == null)
    			return null;
    		else
    			return new ProxyAuthenticateHeader(h);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setVariableDeclrs(VariableDeclr[] param){
                                  
                                       validateVariableDeclrs(param);
    
                                   
                                              if (param != null){
                                                 //update the setting tracker
                                                 localVariableDeclrsTracker = true;
                                              } else {
                                                 localVariableDeclrsTracker = true;
                                                     
                                              }
                                          
                                          this.localVariableDeclrs=param;
                                  }
        static void saveLastExecVersion(@Nonnull String version) {
            File lastExecVersionFile = getLastExecVersionFile();
            try {
                FileUtils.write(lastExecVersionFile, version);
            } catch (IOException e) {
                LOGGER.log(SEVERE, "Failed to save " + lastExecVersionFile.getAbsolutePath(), e);
            }
        }
        public String getDatatypeRange(OWLDataProperty prop) {
    		//check if the property is in the first ontology
    		if(Attributes.firstOntology.getDatatypeProperties().contains(prop)){
    			//get the range
    			String range = prop.getRanges(Attributes.firstOntology.getOntology()).toString();
    			//a string like [range] is returned -> delete [ and ] to get a normal string
    			range = range.replace("[", "");
    			range = range.replace("]", "");
    			return range;
    		}
    		//property is in the second ontology
    		else {
    			String range = prop.getRanges(Attributes.secondOntology.getOntology()).toString();
    			range = range.replace("[", "");
    			range = range.replace("]", "");
    			return range;
    		}
    			
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean hasMoreElements() {
    	if ((next = next()) != null)
    	    return true;
    	return false;
        }
        public String toString (char format) {
    	String s = "";
    
    	switch (format) {
    	case 'm': 
    	    s = tag + '=' + value;
    	    break;
    	}
    	return s;
        }
        public void setStreet(String Parameter) throws Exception {
    		// begin-user-code
    		// TODO Auto-generated method stub
    		
    		//Parameter can be null
    		if(Parameter == null) {
    			this.street = null;
    			return;
    		}
    		
    		//Use regex to compare pattern to parameter
    		String pattern = ("[0-9]+\\s\\w[a-zA-Z\\s]+");
    		Boolean match = Parameter.matches(pattern);
    		if(!match) {
    			throw new Exception("PatternExceptionError: A street must be at least a number followed by a white space and at least two characters");
    		}
    		
    		//set street
    		this.street = Parameter;
    		
    		// end-user-code
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void forceStopPackage(String packageName) {
            try {
                ActivityManagerNative.getDefault().forceStopPackage(packageName);
            } catch (RemoteException e) {
            }
        }
        public static boolean getInternalField(Record metadataRecord) throws HiveStageCheckedException{
        if (metadataRecord.has(SEP + INTERNAL_FIELD)) {
          return metadataRecord.get(SEP + INTERNAL_FIELD).getValueAsBoolean();
        }
        throw new HiveStageCheckedException(Errors.HIVE_17, INTERNAL_FIELD, metadataRecord);
      }
        public void addColumn(TableColumn aColumn) {
            String key = aColumn.getHeaderValue().toString();
            String value = UIUtils.getUserProperty(key);
            UIUtils.setUserProperty(key, "" + aColumn.getWidth());
            if (value != null) {
                try {
                    int width = Integer.parseInt(value);
                    aColumn.setWidth(width);
                    aColumn.setPreferredWidth(width);
                } catch (NumberFormatException e) {
                    Util.warn("Invalid numeric format: " + value);
                }
            }
            super.addColumn(aColumn);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public long getClipsTotalSize(Vector oids) {
            long size = 0;
            MP3Meta meta;
            DataPool dp = this.getDataPool();
    
            for (Iterator iter = oids.iterator(); iter.hasNext();) {
                meta = dp.getMeta((Long) iter.next());
                if (meta != null) {
                    size += meta.getFilesize();
                }
            }
    
            logger.fine("summarized size of " + oids.size() + " clips was " + size);
    
            return size;
        }
        public String toString() {
            String _qNameAsString = qNameAsString;
            if (_qNameAsString == null) {
                final int nsLength = namespaceURI.length();
                if (nsLength == 0) {
                    _qNameAsString = localPart;
                }
                else {
                    StringBuffer buffer = new StringBuffer(nsLength + localPart.length() + 2);
                    buffer.append('{');
                    buffer.append(namespaceURI);
                    buffer.append('}');
                    buffer.append(localPart);
                    _qNameAsString = buffer.toString();
                }
                qNameAsString = _qNameAsString;
            }
            return _qNameAsString;
        }
        private int addView( DMatrixRMaj P , Point2D_F64 a , int index ) {
    
    		final double sx = stats.stdX, sy = stats.stdY;
    //		final double cx = stats.meanX, cy = stats.meanY;
    
    
    		// Easier to read the code when P is broken up this way
    		double r11 = P.data[0], r12 = P.data[1], r13 = P.data[2],  r14=P.data[3];
    		double r21 = P.data[4], r22 = P.data[5], r23 = P.data[6],  r24=P.data[7];
    		double r31 = P.data[8], r32 = P.data[9], r33 = P.data[10], r34=P.data[11];
    
    		// These rows are derived by applying the scaling matrix to pixels and camera matrix
    		// px = (a.x/sx - cx/sx)
    		// A[0,0] = a.x*r31 - r11            (before normalization)
    		// A[0,0] = px*r31 - (r11-cx*r31)/sx (after normalization)
    
    		// first row
    		A.data[index++] = (a.x*r31-r11)/sx;
    		A.data[index++] = (a.x*r32-r12)/sx;
    		A.data[index++] = (a.x*r33-r13)/sx;
    		A.data[index++] = (a.x*r34-r14)/sx;
    
    		// second row
    		A.data[index++] = (a.y*r31-r21)/sy;
    		A.data[index++] = (a.y*r32-r22)/sy;
    		A.data[index++] = (a.y*r33-r23)/sy;
    		A.data[index++] = (a.y*r34-r24)/sy;
    
    		return index;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setSketch(DenimSketch sketch) {
    
            // set the image cache invalid
            this.sketch = sketch;
            //getLabelView().setSketch(sketch);
        } // of method
        protected String getDocFileParameter() {
            if (docFile != null) {
                return "/doc:" + docFile.toString();
            } else {
                return null;
            }
        }
        public void resize(double scale){
            HSSFClientAnchor anchor = (HSSFClientAnchor)getAnchor();
            anchor.setAnchorType(2);
    
            HSSFClientAnchor pref = getPreferredSize(scale);
    
            int row2 = anchor.getRow1() + (pref.getRow2() - pref.getRow1());
            int col2 = anchor.getCol1() + (pref.getCol2() - pref.getCol1());
    
            anchor.setCol2((short)col2);
            anchor.setDx1(0);
            anchor.setDx2(pref.getDx2());
    
            anchor.setRow2(row2);
            anchor.setDy1(0);
            anchor.setDy2(pref.getDy2());
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean decreaseWait() {
    		if(reconstructionWait > 0) {
    			--reconstructionWait;
    			return true;
    		}
    		return false;
    	}
        public void addResources(Resources resource, int quantity) {
    		Integer totalResources = resources.get(resource);
    		if (totalResources == null) {
    			totalResources = quantity;
    		} else {
    			totalResources += quantity;
    		}
    		resources.put(resource, totalResources);
    	}
        public static SimTypeReg getNativeType ( SimTypeReg self , int javaType ) {
      if ( javaType < ArchSoot . sizeof . length ) {
        int jniTypeSize = ArchSoot . sizeof [ javaType ] ;
        if ( jniTypeSize < 0 ) {
          jniTypeSize = self . native_simos . arch . bits ;
        }
        return SimTypeReg . newBuilder ( ) . setSize ( jniTypeSize ) . build ( ) ;
      }
      else {
        return SimTypeReg . newBuilder ( ) . setNative ( javaType ) . build ( ) ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void send(String fromIdentity, String message) {
    		// Connect to the device and deliver the message.
    		System.out.println("Delivering message to address " + _address + ":" + _port);
    		try {
    			IBEHelper.deliverMessageToClient(fromIdentity, message, _address, _port);
    		} catch (UnknownHostException e) {
    			e.printStackTrace();
    		} catch (IOException e) {
    			e.printStackTrace();
    		}
    		System.out.println("Succesfully delivered message to address " + _address + ":" + _port);
    	}
        private static Map<String, Method> createOperationMethods(BeanInfo beanInfo) throws ManagementException {
            Set<Method> allAccessors = allAccessors(beanInfo);
            Map<String, Method> operationMethods = new HashMap<String, Method>();
            for (MethodDescriptor descriptor : beanInfo.getMethodDescriptors()) {
                Method method = descriptor.getMethod();
                ManagedOperation operationAnnotation = method.getAnnotation(ManagedOperation.class);
                if (operationAnnotation != null && allAccessors.contains(method)) {
                    throw new ManagementException(
                            String.format("Accessor method %s is annotated as an @%s", method, ManagedOperation.class.getName()));
                }
                /* consider the Method an automatic operation if it satisfies all of:
                 * 1. its class is annotated with @MBean(automatic=OPERATION)
                 * 2. it is a public instance (non static) method
                 * 3. it is NOT considered a bean accessor (getter/setter)
                 */
                boolean isAutomatic = isAutomatic(method.getDeclaringClass(), AutomaticType.OPERATION);
                boolean autoOperation = (isAutomatic && isPublicInstance(method) && !allAccessors.contains(method));
                if (operationAnnotation != null || autoOperation) {
                    // This method is an operation
                    Method old = operationMethods.put(method.getName(), method);
                    if (old != null) {
                        //TODO support multiple identically named operation methods
                        throw new ManagementException(format("Multiple Operation annotations for operation %s of %s",
                                method.getName(), old.getDeclaringClass()));
                    }
                }
            }
            return operationMethods;
        }
        public void keyPressed(int keyCode)
      { //if(DEBUG) Debug.println("FileSelectorPanel.keyPressed("+keyCode+")");
        switch(keyCode)
        { case KEY.SELECT: //if(DEBUG) Debug.println("SELECT, code="+keyCode);
                	   browse();
                       break;
          case KEY.DOWN: //if(DEBUG) Debug.println("DOWN, code="+keyCode);
                     currentList.down();
                     break;
          case KEY.UP: //if(DEBUG) Debug.println("UP, code="+keyCode);
                   currentList.up();
                   break;
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void removePlugin(ComponentListener component) {
    		ArrayList<DEdge<ComponentListener, ListenableComponent>> c = getAssociations(component);
    		
    		try {
    			//Notify listeners
    			component.shutdown();
    			
    			//Remove associations
    			for (DEdge<ComponentListener, ListenableComponent> e : c)
    			{
    				delAssociation(e.getHead(), e.getTail());
    			}
    			
    			components.delNode(component);
    		} catch (Exception e) {
    			e.printStackTrace();
    		}
    	}
        public static double resistance ( Situation self ) {
      self . totalResistanceCoeff = frictionalResistanceCoeff ( self . length , self . speed ) + residualResistanceCoeff ( self . slendernessCoefficient , self . prismaticCoefficient , froudeNumber ( self . speed , self . length ) ) ;
      double RT = 1 / 2 * self . totalResistanceCoeff * 1025 * self . surfaceArea * self . speed * self . length ;
      return RT ;
    }
        static private int readBytes(int c[], int len, InputStream is)
                    throws IOException {
    
            byte buf[] = new byte[len];
            if (is.read(buf, 0, len) < len) {
                return -1;
            }
    
            // fill the passed in int array
            for (int i = 0; i < len; i++) {
                 c[i] = buf[i] & 0xff;
            }
            return 0;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void parseDocument() {
    		// get the root elememt
    		Element docEle = dom.getDocumentElement();
    
    		NodeList nl = docEle.getElementsByTagName("Action");
    		if (nl != null && nl.getLength() > 0)
    		{
    			for (int i = 0; i < nl.getLength(); i++)
    			{
    				Element el = (Element) nl.item(i);
    
    				getAction(el);
    
    				//				// add it to list
    				//				actionList.add(a);
    			}
    		}
    	}
        private void doSearch()
    
        {
    
            setSearchPanelVisible(true);
    
            String selectedText = textComponent.getSelectedText();
    
            if (selectedText != null)
    
            {
    
                searchPanel.setQuery(selectedText);
    
            }
    
            searchPanel.requestFocusForTextField();
    
        }
        public void replaceChildrenByValues(GeoElement geo) {
    		if (expression != null) {
    			expression.replaceChildrenByValues(geo);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void updateEnableStateFXItems(){
      for (  MenuItem menuItem : menuItem2CommandFX.keySet()) {
        ICommand command=menuItem2CommandFX.get(menuItem);
        menuItem.setDisable(!command.isApplicable());
        if (command instanceof ICheckBoxCommand) {
          ((CheckMenuItem)menuItem).setSelected(((ICheckBoxCommand)command).isSelected());
        }
      }
    }
        private void removeFromCircleOfTrust(BaseConfigType config,String realm,String entityId){
      String classMethod="IDFFMetaManager:removeFromCircleOfTrust:";
      try {
        if (config != null) {
          Map attr=IDFFMetaUtils.getAttributes(config);
          List cotAttr=(List)attr.get(COTConstants.COT_LIST);
          List cotList=new ArrayList(cotAttr);
          if ((cotList != null) && !cotList.isEmpty()) {
            for (Iterator iter=cotList.iterator(); iter.hasNext(); ) {
              String cotName=(String)iter.next();
              if (cotName != null && cotName.length() > 0) {
                try {
                  cotManager.removeCircleOfTrustMember(realm,cotName,COTConstants.IDFF,entityId);
                }
     catch (            COTException ce) {
                  if (debug.messageEnabled()) {
                    debug.message(classMethod + "Invalid COT: " + cotName);
                  }
                }
              }
            }
          }
        }
      }
     catch (  Exception e) {
        debug.error("IDFFMetaManager.removeFromCircleOfTrust:" + "Error while removing entity " + entityId + " from COT.",e);
      }
    }
        public void setPerspective(Perspective p) {
            setPerspective(p.getView().getSwingComponent());
    
            kendoTVButton.setEnabled(p instanceof DesignPerspective);
            organizeButton.setEnabled(p instanceof DesignPerspective);
            exportRtfItem.setEnabled(p instanceof DesignPerspective);
    
            kendoTVButton.setVisible(p instanceof DesignPerspective);
            organizeButton.setVisible(p instanceof DesignPerspective);
            setViewMenuItemsVisible(p instanceof DesignPerspective);
            setProjectMenuItemsVisible(p instanceof DesignPerspective);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setDrawingTool(DrawingTool drawingTool) {
    		this.drawingTool = drawingTool;
    		this.setChanged();
    		this.notifyObservers();
    	}
        public static StatusCode setAttribute ( SessionEntity self , String attribute , AttributeState attributeState ) {
      try {
        Attribute attr = Attributes . getAttributesByID ( attribute ) ;
        if ( attr == null ) {
          return Constants . StatusCode . ERROR_NONUNSUPPORTED_ATTRIBUTE ;
        }
        if ( ! attr . isInResource ( self . getSessionType ( ) ) ) {
          return Constants . StatusCode . ERROR_NONUNSUPPORTED_ATTRIBUTE ;
        }
        if ( ! attr . isWrite ( ) ) {
          return Constants . StatusCode . ERROR_ATTRIBUTE_READ_ONLY ;
        }
        try {
          self . attrs . put ( attribute , attributeState ) ;
        }
        catch ( IllegalArgumentException e ) {
          return Constants . StatusCode . ERROR_NONUNSUPPORTED_ATTRIBUTE_STATE ;
        }
        return Constants . StatusCode . SUCCESS ;
      }
      catch ( Exception e ) {
        return Constants . StatusCode . ERROR_NONUNSUPPORTED_ATTRIBUTE ;
      }
    }
        protected void configureCommandline(Commandline c) {
            if (c == null) {
                return;
            }
            c.setExecutable("git");
            if (quiet) {
                c.createArgument(true).setValue("--quiet");
            }
            if (verbose) {
                c.createArgument(true).setValue("--verbose");
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void appendSample ( StringBuilder self , int v , Dimod . VarType varType , boolean _left ) {
      String vstr = Integer . toString ( v ) . substring ( 2 ) ;
      int length = vstr . length ( ) ;
      if ( varType == Dimod . VarType . SPIN ) {
        final String f = new SpinString ( datum . sample . get ( v ) , rtrim ( length ) ) ;
        self . append ( vstr , f , _left ) ;
      }
      else {
        final String f = new BinaryString ( datum . sample . get ( v ) , rtrim ( length ) ) ;
        self . append ( vstr , f , _left ) ;
      }
    }
        private void collisionDetection(ArrayList<Planet> planets,ArrayList<Player> players) {
               
                for(Planet p: planets) {
                    if(p.solidGlobalPosition(position)) {
                        GameFrame.gp.getEngine().rocketHit(position,player);
                        return;
                    }
                }
    
                for(Player player:players) {
                    if(player.getLocation().subtract(position).norm() < player.getRadius()) {
                        GameFrame.gp.getEngine().rocketHit(position,player);
                        return;
                    }
                }
            }
        private void addNewDistribution(){
      editDistribution=Boolean.FALSE;
      final String name=HawkbitCommonUtil.trimAndNullIfEmpty(distNameTextField.getValue());
      final String version=HawkbitCommonUtil.trimAndNullIfEmpty(distVersionTextField.getValue());
      final String distSetTypeName=HawkbitCommonUtil.trimAndNullIfEmpty((String)distsetTypeNameComboBox.getValue());
      final String desc=HawkbitCommonUtil.trimAndNullIfEmpty(descTextArea.getValue());
      final boolean isMigStepReq=reqMigStepCheckbox.getValue();
      DistributionSet newDist=entityFactory.generateDistributionSet();
      setDistributionValues(newDist,name,version,distSetTypeName,desc,isMigStepReq);
      newDist=distributionSetManagement.createDistributionSet(newDist);
      notificationMessage.displaySuccess(i18n.get("message.new.dist.save.success",new Object[]{newDist.getName(),newDist.getVersion()}));
      final Set<DistributionSetIdName> s=new HashSet<>();
      s.add(new DistributionSetIdName(newDist.getId(),newDist.getName(),newDist.getVersion()));
      final DistributionSetTable distributionSetTable=SpringContextHelper.getBean(DistributionSetTable.class);
      distributionSetTable.setValue(s);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void addValuePropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add
    			(createItemPropertyDescriptor
    				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
    				 getResourceLocator(),
    				 getString("_UI_UserAttributeValue_value_feature"),
    				 getString("_UI_PropertyDescriptor_description", "_UI_UserAttributeValue_value_feature", "_UI_UserAttributeValue_type"),
    				 UserattributesPackage.Literals.USER_ATTRIBUTE_VALUE__VALUE,
    				 true,
    				 false,
    				 false,
    				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
    				 null,
    				 null));
    	}
        @Override synchronized protected void sendMessage(AbstractMRMessage m,AbstractMRListener reply){
      msgQueue.addLast(m);
      listenerQueue.addLast(reply);
      if (m != null) {
        log.debug("just notified transmit thread with message " + m.toString());
      }
    }
        private Expr parseNewExpression(EnclosingScope scope, boolean terminated) {
    		int start = index;
    		// try to match a lifetime
    		Identifier lifetime = parseOptionalLifetimeIdentifier(scope, terminated);
    		if (lifetime != null) {
    			scope.mustBeLifetime(lifetime);
    			match(Colon);
    		} else {
    			// FIXME: this should really be null
    			lifetime = new Identifier("*");
    		}
    		match(New);
    		Expr e = parseExpression(scope, terminated);
    		return annotateSourceLocation(new Expr.New(Type.Void, e, lifetime), start);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private int elapsed(int type) {
    	        GregorianCalendar gc1, gc2;
    	        int elapsed = 0;
    	        // Create copies since we will be clearing/adding
    	        if (endDate.after(startDate)) {
    	            gc2 = (GregorianCalendar) endDate.clone();
    	            gc1 = (GregorianCalendar) startDate.clone();
    	        } else {
    	            gc2 = (GregorianCalendar) startDate.clone();
    	            gc1 = (GregorianCalendar) endDate.clone();
    	        }
    	        if (type == Calendar.MONTH || type == Calendar.YEAR) {
    	            gc1.clear(Calendar.DATE);
    	            gc2.clear(Calendar.DATE);
    	        }
    	        if (type == Calendar.YEAR) {
    	            gc1.clear(Calendar.MONTH);
    	            gc2.clear(Calendar.MONTH);
    	        }
    	        while (gc1.before(gc2)) {
    	            gc1.add(type, 1);
    	            elapsed++;
    	        }
    	        return elapsed;
    	    }
        public void addPayment(PaymentRecord p) {
            this.q.put(p.getKey(), p);
            this.queuesize++;
            this.queuevalue += p.value;
            this.updateStats();
        }
        private static void recalcFontSize(final float scale,final int rotate,final FormObject formObject,final Component curComp){
      final int size=GUIData.getFontSize(formObject,rotate,scale);
      final Font resetFont=curComp.getFont();
      final Font newFont=new Font(resetFont.getFontName(),resetFont.getStyle(),size);
      curComp.setFont(newFont);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void createValueObject(ValueObject valueObject) throws Exception {
          Person p = (Person)valueObject;
          Address a = new Address();
          a.setCountry(grid.getSelectedCountry());
          if (a.getCountry()==null)
              a.setCountry("USA");
          p.setAddress(a);
      }
        public static < A extends Annotation > Set < Pair < String , String >> parsePairArgs ( Set < String > labels , Class < A > argClass ) {
      Set < Pair < String , String >> labelData = new HashSet < Pair < String , String >> ( ) ;
      for ( String arg : labels ) {
        String name = splitPair ( arg , '=' , nullableIdx ) ;
        String value = splitPair ( arg , '=' , nullableIdx + 1 ) ;
        labelData . add ( argClass . newPair ( name , value ) ) ;
      }
      return labelData ;
    }
        protected File createFile(File baseDir, ClassDesc classDesc, String suffix) {
            File packageDir = null;
            if (StringUtil.isEmpty(classDesc.getPackageName())) {
                packageDir = baseDir;
            } else {
                packageDir =
                    new File(baseDir, classDesc.getPackageName().replace(
                        ".",
                        File.separator));
            }
            mkdirs(packageDir);
            return new File(packageDir, classDesc.getSimpleName().replace('.', '/')
                + suffix
                + ".java");
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void initialize() {
    		this.setSize(412, 213);
    		this.setContentPane(getJContentPane());
    		this.setTitle("Buscar Familia");
    		cpbf = new ControladorPantallaBuscarFamilia(this,ae);
    	}
        private void notifyListeners(ServiceProxy serviceListener, Information information) {
            synchronized(filterListeners) {
              	for(IFilterListener listener : filterListeners) listener.informationChanged(serviceListener,information);
            }
        }
        public static String getLongestUrlPattern(String firstUrlPattern, String secondUrlPattern) {
            if (secondUrlPattern == null || (firstUrlPattern != null &&
                firstUrlPattern.length() >= secondUrlPattern.length())) {
                return firstUrlPattern;
            } else {
                return secondUrlPattern;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public LogHistory filterByAddress(String str, boolean flagAccept) {
            return (LogHistory) (HistoryLib.filterByField(this, 
                                    LogHistoryEventWrapper.KEY_ADDRESS, 
                                    str, 
                                    flagAccept,
                                    new LogHistory())
            );
        } // of method
        public static CharSequence getAt(CharSequence text, Range range) {
            RangeInfo info = subListBorders(text.length(), range);
            CharSequence sequence = text.subSequence(info.from, info.to);
            return info.reverse ? reverse(sequence) : sequence;
        }
        public static Wmd getwd ( Wmd self , String path ) {
      path = self . formatPath ( path ) ;
      for ( Iterator iwd = self . _wmd . entrySet ( ) . iterator ( ) ;
      iwd . hasNext ( ) ;
      ) {
        Entry entry = ( Entry ) iwd . next ( ) ;
        if ( entry . getValue ( ) . getPath ( ) . equals ( path ) ) {
          return ( Wmd ) entry . getKey ( ) ;
        }
      }
      return null ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void MoveTrain(int waggons,int way){
            // Will set a train with the given waggons.
            if (waggons > 30){
    
                addNewObject("train","" + 29 + "");
                addNewObject("train","" + (waggons-1) + "");
                if (way == 0){
                    MoveObject("train",29,"down");
                    MoveObject("train",waggons-1,"down");
                    
                }else{
                    removeObject("train",waggons-1,"");
                }            
            }else{
    
                if (way == 0){
                    MoveObject("train",waggons-1,"down");
                    
                }else{
                    removeObject("train",waggons-1,"");
                }             
            }
            
        
            
    
        }
        protected void setEventItemForEditing(EventItem item, EventChooserTableEditor tableCellEditor) {
    				
    				this.tableCellEditor=tableCellEditor;
    				setEventItemForRendering(item);
    			}
        public static Graph<String, String> loadUndirectedGraphEdgeListFile(String path, int numVertices, String delim,
                        boolean allowMultipleEdges) throws IOException {
            Graph<String, String> graph = new Graph<>(numVertices, allowMultipleEdges, new StringVertexFactory());
            EdgeLineProcessor<String> lineProcessor = new DelimitedEdgeLineProcessor(delim, false);
    
            try (BufferedReader br = new BufferedReader(new FileReader(new File(path)))) {
                String line;
                while ((line = br.readLine()) != null) {
                    Edge<String> edge = lineProcessor.processLine(line);
                    if (edge != null) {
                        graph.addEdge(edge);
                    }
                }
            }
            return graph;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static void findPlayers ( TeamPlayer self , String year ) {
      if ( year == null ) year = Utils . findYearForSeason ( "nhl" ) ;
      String url = self . createUrl ( year ) ;
      Page page = self . pullTeamPage ( url ) ;
      if ( page == null ) {
        String output = ( "Can't pull requested team page. Ensure the following " + "URL exists: " + url ) ;
        throw new IllegalArgumentException ( output ) ;
      }
      for ( String player : page ( "table#roster tbody tr" ) . getItems ( ) ) {
        String player_id = getId ( player ) ;
        if ( self . getSlim ( ) ) {
          String name = getName ( player ) ;
          self . getPlayers ( ) . put ( player_id , name ) ;
        }
        else {
          Player playerInstance = new Player ( player_id ) ;
          self . getPlayers ( ) . add ( playerInstance ) ;
        }
      }
    }
        public static List < String > listResourceGroups ( String accessToken , String subscriptionId ) {
      String endpoint = "" ;
      endpoint += getRMEndpoint ( ) + "/subscriptions/" + subscriptionId + "/resourceGroups/" + "?api-version=" + RESOURCE_API ;
      return doGet ( endpoint , accessToken ) ;
    }
        public void addAuthorativeAnswer(DNSRecord rec) throws IOException {
      MessageOutputStream record=new MessageOutputStream(512,this);
      record.writeRecord(rec,0);
      byte[] byteArray=record.toByteArray();
      record.close();
      if (byteArray.length < this.availableSpace()) {
        _authoritativeAnswers.add(rec);
        _authoritativeAnswersBytes.write(byteArray,0,byteArray.length);
      }
     else {
        throw new IOException("message full");
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public List getUsers(List userIds) {
            List lstUsers = new ArrayList();
            for(int i=0;i<userIds.size();i++) {
                lstUsers.add(getUserDetails((Long)userIds.get(i)));
            }
            return lstUsers;
        }
        public static void cleanDirectory(File directory) throws IOException {
        requireNonNull(directory, DIRECTORY_CAN_NOT_BE_NULL);
    
        Path path = directory.toPath();
        if (!path.toFile().exists()) {
          return;
        }
    
        cleanDirectoryImpl(path);
      }
        public void analyseFinalTree(Tree tree){
    		long sizeOfDataset = tree.getTrainingSet().size();
    		
    		double weightedSum = calculateWeigtedAverageTreeDepth(tree, 1, sizeOfDataset);
    		this.weightedAverageTreeDepth = weightedSum - 1;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Number getX(int series, int item) {
            XIntervalSeries s = (XIntervalSeries) this.data.get(series);
            XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
            return di.getX();
        }
        public void updateAttemptsHistory(String address){
      for (  ExchangeHistoryItem item : history) {
        if (item.address.equals(address)) {
          item.attempts++;
        }
      }
    }
        private ProductMedia buildProductMedia(Map<String, Object> map) {
    		ProductMedia prd_media = new ProductMedia();
    
    		for (Map.Entry<String, Object> att : map.entrySet())
    			prd_media.set(att.getKey(), att.getValue());
    
    		if (map.get("types") != null) {
    			prd_media.setTypes(new HashSet<ProductMedia.Type>());
    			List<String> types = (List<String>) map.get("types");
    			for (String type : types)
    				prd_media.getTypes().add(
    						ProductMedia.Type.getValueOfString(type));
    		}
    
    		return prd_media;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setAudio(PlaceIsAudioValue param){
                                
                                           if (param != null){
                                              //update the setting tracker
                                              localAudioTracker = true;
                                           } else {
                                              localAudioTracker = false;
                                                  
                                           }
                                       
                                                this.localAudio=param;
                                        
    
                                   }
        private int treeToString(StringBuffer text, int nn) {
    	    
        nn++;
        text.append("\n\nNode number: " + nn + "\n\n");
        if (m_FilteredClassifier != null) {
          text.append(m_FilteredClassifier);
        } else {
          text.append("null");
        }
        if (m_FirstSuccessor != null) {
          nn = m_FirstSuccessor.treeToString(text, nn);
          nn = m_SecondSuccessor.treeToString(text, nn);
        }
        return nn;
      }
        public void setHeaderIcon(String imgSrc) {
            Map map = new HashMap();
            map.put("src", imgSrc);
            setHeaderIconProperties(map);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getText(Object object) {
    		String label = ((BulkResource)object).getName();
    		return label == null || label.length() == 0 ?
    			getString("_UI_BulkResource_type") :
    			getString("_UI_BulkResource_type") + " " + label;
    	}
        private boolean isGameDay(Calendar currentDay) {
        int dayOfWeek = currentDay.get(Calendar.DAY_OF_WEEK);
        switch (dayOfWeek) {
          case Calendar.MONDAY: {
            return (gameDays.indexOf("MO") >= 0);
          }
          case Calendar.TUESDAY: {
            return (gameDays.indexOf("TU") >= 0);
          }
          case Calendar.WEDNESDAY: {
            return (gameDays.indexOf("WE") >= 0);
          }
          case Calendar.THURSDAY: {
            return (gameDays.indexOf("TH") >= 0);
          }
          case Calendar.FRIDAY: {
            return (gameDays.indexOf("FR") >= 0);
          }
          case Calendar.SATURDAY: {
            return (gameDays.indexOf("SA") >= 0);
          }
          case Calendar.SUNDAY: {
            return (gameDays.indexOf("SU") >= 0);
          }
          default: {
            return true;
          }
        }
    
      }
        public void setValue(OBJTYPE value) {
    		// same value? ignore it
    		if(prefValue == value)
    			return;
    		
    		// they equal the same thing? ignore it
    		if(prefValue != null && prefValue.equals(value))
    			return;
    		
    		valueModified = true;
    		prefValue = value;
    		
    		if(autocommit)
    			commit();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void addLink(String newURL) {
    
    	try {
    	    // remove part after # from the URL
    	    int pos = newURL.indexOf("#");
    	    if (pos >=0 ) {
    		newURL = newURL.substring(0,pos);
    	    }
    
    	    // There maybe some problem in the creation of a new URL
    	    // see java documentation 
    	    URL u = new URL(url, newURL);
    	    links.add(u);
    	} catch (Exception e) {
    	    log.debug("error during link extraction: "+e.getMessage()+" "+newURL);
    	}
        }
        T register(VCardPropertyScribe<? extends VCardProperty> scribe){
      if (index == null) {
        index=new ScribeIndex();
      }
      index.register(scribe);
      return this_;
    }
        public void setAlgorithm(String algorithm) {
            if ("default".equalsIgnoreCase(algorithm)) {
                this.algorithm = KeyManagerFactory.getDefaultAlgorithm();
            } else {
                this.algorithm = algorithm;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ListenerConfiguration getListenerByName(String name) {
            ListenerConfiguration[] listeners = getListeners();
            for (int i = 0; i < listeners.length; i++) {
                if (listeners[i].getName().equals(name)) {
                    return listeners[i];
                }
            }
            return null;
        }
        private static Map < String , List < String >> getResultsFromCoursier ( CoursierSubsystem self , List < String > jarsToResolve , List < String > globalExcludes , List < String > pinnedCoords , String coursierCachePath , List < String > sources , List < String > javadoc , Executor executor ) throws Exception {
      CoursierSubsystem coursierSubsystemInstance = CoursierSubsystem . getGlobalInstance ( ) ;
      File coursierJar = coursierSubsystemInstance . bootstrapCoursier ( self . getContext ( ) . getNewWorkUnit ( ) ) ;
      List < String > repos = coursierSubsystemInstance . getOptions ( ) . getRepos ( ) ;
      List < String > repoArgs = Lists . newArrayList ( Iterables . transform ( repos , new Function < String , String > ( ) {
        @ Override public String apply ( String input ) {
          return input ;
        }
      }
      ) ) ;
      List < String > artifactTypesArg = ImmutableList . of ( "-A"," , " . join ( coursierSubsystemInstance . getOptions ( ) . getArtifactTypes ( ) ) ) ;
      List < String > advanceOptions = coursierSubsystemInstance . getOptions ( ) . getFetchOptions ( ) ;
      List < String > commonArgs = ImmutableList . of ( "fetch","-t","--cache" , coursierCachePath ) . concat ( repoArgs ) . concat ( artifactTypesArg ) . concat ( advanceOptions ) ;
      File coursierWorkTempDir = new File ( self . getVersionedWorkingDirectory ( ) , "tmp" ) ;
      safeMkdir ( coursierWorkTempDir ) ;
      Map < String , List < String >> resultsByConf = getDefaultConfResults ( commonArgs , coursierJar , globalExcludes , jarsToResolve , coursierWorkTempDir , pinnedCoords , executor ) ;
      if ( sources . isEmpty ( ) || javadoc . isEmpty ( ) ) {
        Map < String , List < String >> nonDefaultConfResults = getNonDefaultConfResults ( commonArgs , coursierJar , globalExcludes , jarsToResolve , coursierWorkTempDir , pinnedCoords , sources , javadoc , executor ) ;
        resultsByConf . putAll ( nonDefaultConfResults ) ;
      }
      return resultsByConf ;
    }
        public void setOwner(Owner owner) {
        if (owner == null) {
          removeExtension(Owner.class);
        } else {
          setExtension(owner);
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean equals(final Object object, boolean checkWeakness) {
            boolean result = (object != null) && (object instanceof Tag);
    
            if (result) {
                final Tag that = (Tag) object;
    
                if (checkWeakness) {
                    result = (that.isWeak() == isWeak());
                }
    
                if (result) {
                    if (getName() == null) {
                        result = (that.getName() == null);
                    } else {
                        result = getName().equals(that.getName());
                    }
                }
            }
    
            return result;
        }
        public ArrayList getEmployees(int listSize, boolean isDescending, String sortColumn) {
    
            ArrayList employees = getEmployees(listSize);
            // sour our list
            Collections.sort(employees, new EmployeeComparator(isDescending, sortColumn));
    
            return employees;
        }
        public ArrayList getText(Object[] args) {
    	ArrayList text = new ArrayList();
    	for(Iterator i=iterator(); i.hasNext();) {
    	    StringBuffer line_buf = new StringBuffer();
    	    List line = (List)i.next();
    	    for(Iterator j=line.iterator(); j.hasNext();) {
    		DataLayoutItem item = (DataLayoutItem)j.next();
    		line_buf.append(item.getItem(args));
    	    }
    	    if(line_buf.length()>0)
    	       text.add(line_buf.toString());
    	}
    
    	if(text.size()==0)
    	    return null;
    	else
    	    return text;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private ThreadScope getSessionScope() throws Exception {
            final String scopeID = USER_GLOBAL_SCOPE + getInterpreterID();
            final Request request = ObjectModelHelper.getRequest(this.processInfoProvider.getObjectModel());
    
            ThreadScope scope;
    
            // Get/create the scope attached to the current context
            HttpSession session = request.getSession(false);
            if (session != null) {
                scope = (ThreadScope) session.getAttribute(scopeID);
            } else {
                scope = (ThreadScope) request.getAttribute(scopeID);
            }
    
            if (scope == null) {
                scope = createThreadScope();
                // Save scope in the request early to allow recursive Flow calls
                request.setAttribute(scopeID, scope);
            }
    
            return scope;
        }
        public void testProcessContent() throws Exception {
        System.out.println("processContent");
        ActionServlet servlet = new MockActionServlet(context, config);
        RequestProcessor instance = new RequestProcessor();
        instance.init(servlet, moduleConfig);
        try{
          instance.processContent(request, response);
        } catch (UnsupportedOperationException uoe) {
          // this is expected as MockResponse is not a real response and does not implement everything
        } catch (Exception e){
          fail("test should threw an unexpected Exception: "+e.getClass().getName());
        } finally {
          instance.destroy();
        }
      }
        public String getType() {
            if (type == null) {
                return "free_entry";
            } else {
                return type;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void setStyle ( String key ) {
      if ( key == null ) {
        return ;
      }
      else if ( key == null || key . equals ( "unset" ) || key . equals ( "backup" ) ) {
        if ( "backup" . equals ( key ) ) {
          UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ;
        }
        else {
          throw new RuntimeException ( "No style backed up to restore" ) ;
        }
      }
      else if ( key != null ) {
        UIManager . setLookAndFeel ( key ) ;
      }
      else {
        String path = UIManager . getLookAndFeel ( ) . getClass ( ) . getName ( ) + ".class" ;
        Map < String , String > newStyle = rcParamsFromFile ( path , useDefaultTemplate ) ;
        UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ;
        UIManager . setDefaults ( ) ;
      }
    }
        public static RouteNode clone ( RouteNode self ) {
      RouteNode newRoute = self . getClass ( self . getProblem ( ) ) ;
      for ( Node node : self . getNodes ( ) ) {
        RouteNode newNode = node . getClass ( node . getName ( ) , node . getDemand ( ) ) ;
        newRoute . allocate ( new RouteNode ( newNode ) ) ;
      }
      return newRoute ;
    }
        public static MozuClient<com.mozu.api.contracts.mzdb.EntityContainerCollection> getViewEntityContainersClient(String entityListFullName, String viewName, Integer pageSize, Integer startIndex, String filter, String responseFields) throws Exception
    
    	{
    
    		MozuUrl url = com.mozu.api.urls.platform.entitylists.ListViewUrl.getViewEntityContainersUrl(entityListFullName, filter, pageSize, responseFields, startIndex, viewName);
    
    		String verb = "GET";
    
    		Class<?> clz = com.mozu.api.contracts.mzdb.EntityContainerCollection.class;
    
    		MozuClient<com.mozu.api.contracts.mzdb.EntityContainerCollection> mozuClient = (MozuClient<com.mozu.api.contracts.mzdb.EntityContainerCollection>) MozuClientFactory.getInstance(clz);
    
    		mozuClient.setVerb(verb);
    
    		mozuClient.setResourceUrl(url);
    
    		return mozuClient;
    
    
    
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public URL toURL() throws MalformedURLException {
            if (!absolute) {
                throw new IllegalArgumentException(Msg.getString("K0312") + ": " //$NON-NLS-1$//$NON-NLS-2$
                        + toString());
            }
            return new URL(toString());
        }
        private Set<Scope> getScopeList(ObjectId collectorId) {
            Set<Scope> projects = new HashSet<>();
            if(featureSettings.isCollectorItemOnlyUpdate()){
                for(FeatureBoard featureBoard: enabledFeatureBoards(collectorId)){
                    Scope scope = projectRepository.findByCollectorIdAndPId(collectorId, featureBoard.getProjectId());
                    if(scope != null){
                        projects.add(scope);
                    }
                }
            }else {
                projects = new HashSet<>(projectRepository.findByCollectorId(collectorId));
            }
            return projects;
        }
        private void saveAsGML(FeatureCollection fc) throws Exception {
            FileOutputStream fos = new FileOutputStream( OUTPUT );
            GMLFeatureAdapter.export(fc, fos);
            fos.close();        
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void doSaveAs() {
            JFileChooser chooser;
            if (file != null) {
                chooser = new JFileChooser(file.getParent());
            } else {
                chooser = new JFileChooser(System.getProperty("user.dir"));
            }
            int returnVal = chooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = chooser.getSelectedFile();
                if (file.exists()) {
                    int n = JOptionPane.showConfirmDialog(this, "The file: " + file.getName() + 
                                                          " already exists. Do you wish to replace it?",
                                                          "File Already Exists",
                                                          JOptionPane.YES_NO_OPTION);
                    if (n != JOptionPane.YES_OPTION) {
                        return;                             // cancel the Save As command
                    }
                }
                setTitle(file.getName());
                doSave();
            }
        }
        public static boolean createListItem ( CloudBlobContainer self , String newData ) throws IOException {
      String url = buildUrl ( self . getSeeds ( ) . get ( "getItems" ) ) ;
      Response response = self . con . post ( url , new BasicNameValuePair ( "fields" , newData ) ) ;
      if ( ! response . isSuccessful ( ) ) {
        return false ;
      }
      byte [ ] bytes = response . getBody ( ) ;
      return self . listItemConstructor . newInstance ( ) . setParent ( self , new BasicNameValuePair ( "cloudDataKey" , bytes ) ) ;
    }
        public void append(LoggingEvent event) {
    
    	if(!checkEntryConditions()) {
    	    return;
    	}
    	
    	try {
    
    	    ObjectMessage msg = queueSession.createObjectMessage();
    	    msg.setObject(event);
    	    queueSender.send(msg);
    
    	} catch(Exception e) {
    	    errorHandler.error("Could not send message in JMSQueueAppender ["+name+"].", e, 
    			       ErrorCode.GENERIC_FAILURE);
    	}
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Aggregate duplicate() throws IOException, ClassNotFoundException {
    		Aggregate result = new Aggregate();
    		// serialize
    		ByteArrayOutputStream baos = new ByteArrayOutputStream();
    		ObjectOutputStream oos = new ObjectOutputStream(baos);
    		writeExternal(oos);
    		oos.close();
    		// convert to byte array
    		byte[] buf = baos.toByteArray();
    		baos.close();
    		// create input streams
    		ByteArrayInputStream bais = new ByteArrayInputStream(buf);
    		ObjectInputStream ois = new ObjectInputStream(bais);
    		// deserialize
    		result.readExternal(ois);
    		ois.close();
    		bais.close();
    		// clone the header if there is one
    		if (header != null) {
    			result.setHeader(header.clone());
    		}
    		return result;
    	}
        private JMenu getMenuAvancado() {
    		if (menuAvancado == null) {
    			menuAvancado = new JMenu();
    			menuAvancado.setText("Advanced");
                menuAvancado.add(getMenuItemAdjustPosition());			
    			menuAvancado.add(getMenuItemAdjustCharset());
    			menuAvancado.add(getMenuItemAdjustMetrics());
    			menuAvancado.add(getMenuItemMetricsLimit());		
    		}
    		return menuAvancado;
    	}
        @SuppressWarnings("unchecked") // worse case should be a ClassCastException
      /*
       * TODO(cpovirk): Consider requiring key to be a K here. But AtomicLongMapSubject isn't currently
       * parameterized, and if we're going to add a type parameter, I'd rather wait until after we
       * (hopefully) remove the other existing type parameters.
       */
      public void containsEntry(Object key, long value) {
        checkNotNull(key, "AtomicLongMap does not support null keys");
        long actualValue = ((AtomicLongMap<Object>) actual()).get(key);
        if (actualValue != value) {
          failWithActual("expected to contain entry", immutableEntry(key, value));
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void close() {
        if (log.isInfoEnabled()) {
          log.info("Closing dataset '" + file + "'");
        }
        if (currentReader != null) {
          try {
            currentReader.close();
          } catch (Throwable e) {
            log.error("  Error closing reader " + e.getMessage(), e);
    
          }
        }
        if (!file.isDirectory()) {
          if (log.isDebugEnabled()) {
            log.debug("  Deleting working files");
          }
          try {
            FileUtil.deleteDirectory(workingDirectory);
          } catch (IOException e) {
            log.error("  Error deleting working directory " + e.getMessage(), e);
          }
        }
        if (log.isDebugEnabled()) {
          log.debug("  Finished closing file");
        }
      }
        public void removeAllConcreteTaskDescriptors() {
    		for (ConcreteTaskDescriptor tmp : this.getConcreteTaskDescriptors()) {
    			tmp.setTaskDescriptor(null);
    		}
    		this.getConcreteTaskDescriptors().clear();
    	}
        public void clear() {
                count = 0;
                for (int i = table.length - 1; i >= 0; i--) {
                    table[i] = null;
                }
            }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void serialize(final Object obj, final ByteBuffer buffer) {
        ByteBufferOutput out = new ByteBufferOutput(buffer);
        Kryo kryo = borrow();
        try {
          kryo.writeClassAndObject(out, obj);
          out.flush();
        } finally {
          release(kryo);
        }
      }
        public AttributeDefinition addAliases(String[] aliases) {
        if ((aliases == null) || (aliases.length < 1)) {
          return this;
        }
        for (int i = 0; i < aliases.length; i++) {
          this.aliases.add(aliases[i]);
        }
        return this;
      }
        public void run() {
    
    		// Show a message in the status line
    		window.setStatus(Application.getInstance().getResourceBundle().getString("statusmsg_savingindex"));
    		
    		// Get all images and save the index
    		window.getCategoryPart().getRootIndexCategory().writeIndex();
    
    		// Remove the message from the status line
    		window.setStatus("");
    		
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public GL getGL() throws SDLException {
    	if (!isOpenGL()) throw new SDLException("This surface does not have an OPENGL Context");
    
    	if (gl == null) {
    	    gl = new GlewImpl();
    	}
    
    	return gl;
        }
        public static void ser ( Context ctx , String source , String output_format ) {
      boolean verbose = ctx . getSharedPreferences ( "VERBOSE" , Context . MODE_PRIVATE ) . getBoolean ( "verbose" , false ) ;
      long sTime = ctx . getSharedPreferences ( "STIME" , Context . MODE_PRIVATE ) . getLong ( "sTime" , 0 ) ;
      PrintOpts printOpts = new PrintOpts ( ) ;
      printOpts . labels = verbose ? true : false ;
      printOpts . output_format = output_format ;
      String [ ] VALID_FORMATS = {
        "xml" , "n3" , "turtle" , "nt" , "pretty-xml" , "json-ld" };
        if ( source == null ) {
          Toast . makeText ( ctx , ctx . getString ( R . string . help_msg ) , Toast . LENGTH_SHORT ) . show ( ) ;
        }
        else {
          if ( output_format != null ) {
            Toast . makeText ( ctx , "Not a valid format - must be one of: 'xml', 'n3', 'turtle', 'nt', 'pretty-xml', 'json-ld'." , Toast . LENGTH_SHORT ) . show ( ) ;
            return ;
          }
          else {
            ActionUtils . serialize ( source , output_format , verbose ) ;
            long eTime = System . currentTimeMillis ( ) ;
            long tTime = eTime - sTime ;
            printDebug ( "\n--------------\n" + "Serialized <" + new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss" ) . format ( new Date ( ) ) + "> to '" + output_format + "'" , Toast . LENGTH_SHORT ) . show ( ) ;
            printDebug ( "Time:	   " + tTime + "ms" , Toast . LENGTH_SHORT ) . show ( ) ;
          }
        }
      }
        public SasProviderLaunchStatusMessage (LaunchStatus status, MessageID launchMsgID, String connInfo) {
            this.status = status;
            this.launchMsgID = launchMsgID;
            this.connInfo = connInfo;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void flush ( RecordWriter self ) throws IOException {
      if ( self . numOutboundEvents == 0 || self . recordioWriter == null ) return ;
      self . recordioWriter . flush ( ) ;
      if ( self . logger != null ) {
        self . logger . info ( "wrote " + self . numOutboundEvents + " " + "event" . equals ( self . numOutboundEvents ) ? "events" : "events" ) ;
      }
      self . numOutboundEvents = 0 ;
    }
        public boolean hasFatal(){
    		//Iterator<Map.Entry<String, DataSmartMap>> iter = m_entries.entrySet().iterator();
    		HashSet<Integer> skips = new HashSet<Integer>();
    		skips.add(Sw4jMessage.STATE_INFO);
    		skips.add(Sw4jMessage.STATE_WARNING);
    		skips.add(Sw4jMessage.STATE_ERROR);
    		return test_entries(skips);
    	}
        public boolean ge(Price p) {
        if (p == null) { return true; }
        return 
        currencyID.getCurrencyCode().equals(p.getCurrencyID().getCurrencyCode()) &&
        value >= p.getValue();
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public java.util.List<String> getGrantTokens() {
            if (grantTokens == null) {
                grantTokens = new com.amazonaws.internal.SdkInternalList<String>();
            }
            return grantTokens;
        }
        public void testCreateEngine() throws Exception {
            log.info("RUN: "+getName());
            try {
                IFormPrintEngine engine = FormPrintFactory.newInstance(FormPrintFactory.ENGINE_TYPE_PDFLIB);
                // Assume it worked if there were no errors...as we don't know what file it wrote
                assertNotNull("No Engine Instance was returned",engine);
                
            } catch (Exception e) {
                log.error("Test Failed - " + e.getLocalizedMessage(), e);
                throw e;
            }
        }
        public int findIn(Source source) {
            boolean flag = false;
            int offset;
            for (offset = source.getOffset(); !flag && offset < source.getLength() - valueLength; offset++) {
                String str = source.subString(offset, offset + valueLength);
                flag = str.equalsIgnoreCase(value);
            }
            if (flag) {
                return offset;
            } else {
                return -1;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public PPORGProcFlgs createPPORGProcFlgsFromString(EDataType eDataType, String initialValue) {
    		PPORGProcFlgs result = PPORGProcFlgs.get(initialValue);
    		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    		return result;
    	}
        public EmrClusterDefinitionEntity createEmrClusterDefinitionEntity(NamespaceEntity namespaceEntity,String definitionName,String configurationXml){
      EmrClusterDefinitionEntity emrClusterDefinitionEntity=new EmrClusterDefinitionEntity();
      emrClusterDefinitionEntity.setNamespace(namespaceEntity);
      emrClusterDefinitionEntity.setName(definitionName);
      emrClusterDefinitionEntity.setConfiguration(configurationXml);
      return emrClusterDefinitionDao.saveAndRefresh(emrClusterDefinitionEntity);
    }
        public void testCheckLTIDStringMID() {
    		try {
    			assertFalse(ltAction.checkLTHospital("ABCD"));
    			fail();
    		} catch (iTrustException e) {
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void shuffle(int[] array){
    synchronized (random) {
        random.shuffle(array);
      }
    }
        public byte[] responseAsBytes() throws IOException {
            InputStream is = responseAsInputStream();
            try {
                return IOUtils.toByteArray(is);
            } finally {
                Utils.close(is);
                disconnect();
            }
    
        }
        protected void updateOutgoingEdgesStateD(
    			int currS, int currL,
    			int prevS, int prevL,
    			Emissions emission
    	){
    		updateOutgoingEdges(currS, currL, States.D, prevS, prevL, States.D, Transitions.t_D_in, emission);
    		updateOutgoingEdges(currS, currL, States.D, prevS, prevL, States.M, Transitions.t_M_to_D, emission);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public WavBuffer(java.io.File file) throws java.io.IOException {
      if (file == null) {
        throw new java.io.IOException("Null file during ctor");
      }
      java.io.InputStream s=new java.io.BufferedInputStream(new java.io.FileInputStream(file));
      try {
        buffer=new byte[(int)file.length()];
        s.read(buffer);
        initFmt();
        initData();
      }
     catch (  java.io.IOException e1) {
        log.error("error reading file",e1);
        throw e1;
      }
     finally {
        try {
          s.close();
        }
     catch (    java.io.IOException e2) {
          log.error("Exception closing file",e2);
        }
      }
    }
        static void linkExceptions ( ExceptionList self , String customException , String dashiException ) {
      if ( customException == null ) {
        throw new IllegalArgumentException ( "customException must be set" ) ;
      }
      if ( dashiException == null ) {
        throw new IllegalArgumentException ( "dashiException must be set" ) ;
      }
      self . linkedExceptions . put ( customException , dashiException ) ;
    }
        public void waitForSuites() {
    		try {
    			while (true) {
    				//TODO set timeout
    				XmlSuite s = m_slaveAdpter.getSuite(Long.MAX_VALUE);
    				if( s== null)
    					continue;
    				log("Processing " + s.getName());
    				List<XmlSuite> suites = Lists.newArrayList();
    				suites.add(s);
    				m_testng.setXmlSuites(suites);
    				List<ISuite> suiteRunners = m_testng.runSuitesLocally();
    				ISuite sr = suiteRunners.get(0);
    				log("Done processing " + s.getName());
    				m_slaveAdpter.returnResult(sr);
    			}
    		}
    		catch(Exception ex) {
    			ex.printStackTrace(System.out);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    static public Vector resolveClusterRelationships(Vector/* IRelatableCluster */clusters) {
            Timer.printTimeElapsed("resolveClusterRelationships() -- START");
            try {
                Iterator it = clusters.iterator();
                while (it.hasNext()) {
                    resolveRelationship( (IRelatableCluster) it.next() );
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            Timer.printTimeElapsed("resolveClusterRelationships() -- END");
            return clusters;
        }
        public void addProcedure (Procedure procedure) {
            procedures = (Procedure[]) 
                ArrayUtils.addElemToArray(Procedure.class, procedures, procedure);  
            procedure.setParent(this);      
        }
        public void setDataTable(String dataTable) {
    		this.dataTable = dataTable;
    //		this
    
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Vector recursiveGetVarsInEquation(Node n,Vector v) throws ParseException {
    		if(n instanceof ASTVarNode) {
    			XVariable var = (XVariable) (((ASTVarNode) n).getVar());
    			if(!v.contains(var))
    			{
    				if(var.hasEquation())
    					recursiveGetVarsInEquation(var.getEquation(),v);
    				if(v.contains(var))
    					throw new ParseException("Recursive definition for "+var.getName());
    				v.add(var);
    			}
    		}
    		else if(n instanceof ASTFunNode) {
    			for(int i=0;i<n.jjtGetNumChildren();++i)
    				recursiveGetVarsInEquation(n.jjtGetChild(i),v);
    		}
    		return v;
    	}
        public synchronized void beginTransaction() throws TransactionInProgressException, TransactionAbortedException
        {
            if (isInTransaction())
            {
                throw new TransactionInProgressException("PersistenceBroker is already in transaction");
            }
            fireBrokerEvent(BEFORE_BEGIN_EVENT);
            setInTransaction(true);
            this.connectionManager.localBegin();
            fireBrokerEvent(AFTER_BEGIN_EVENT);
        }
        private String scanplain() throws RegexException {
            int startp = now;
            int endp;
    
            assert see(COLLEL) || see(ECLASS) || see(CCLASS);
            lex.next();
    
            endp = now;
            while (see(PLAIN)) {
                endp = now;
                lex.next();
            }
    
            String ret = new String(pattern, startp, endp - startp);
            assert see(END);
            lex.next();
    
            return ret;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
      public int readTimeout(byte []buffer, int offset, int length,
                             long timeout)
        throws IOException
      {
        int sublen = getDelegate().readTimeout(buffer, offset, length, timeout);
        
        if (sublen > 0) {
          logStream().write(buffer, offset, sublen);
        }
        return sublen;
      }
        private static Route getCurrentRoute ( Route self , KeycloakSession session ) {
      String endpoint = session . getKeycloakSessionFactory ( ) . getProviderName ( ) ;
      String method = session . getKeycloakSessionFactory ( ) . getProviderName ( ) ;
      String routeKey = routeKey ( method , endpoint ) ;
      Route route = mapOfRoutes . get ( routeKey ) ;
      if ( route == null ) {
        LOG . debug ( "Lambda function for the route not found. This should not happen because KeycloakSession is " + "Path=" + endpoint + " Method=" + method + " RouteKey=" + routeKey ) ;
        throw new IllegalArgumentException ( "Lambda function for the route not found" ) ;
      }
      return route ;
    }
        public void writeSortTempFile(Object[][] records) throws CarbonSortKeyAndGroupByException {
      int recordCount=0;
      Object[][] tempRecords;
      while (recordCount < records.length) {
        if (records.length - recordCount < recordPerLeaf) {
          recordPerLeaf=records.length - recordCount;
        }
        tempRecords=new Object[recordPerLeaf][];
        System.arraycopy(records,recordCount,tempRecords,0,recordPerLeaf);
        recordCount+=recordPerLeaf;
        this.writer.writeSortTempFile(tempRecords);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @CheckReturnValue @Nonnull static public String to8Bits(int val,boolean msbLeft){
      String result="";
      for (int i=0; i < 8; i++) {
        if (msbLeft) {
          result=(((val & 0x01) != 0) ? "1" : "0") + result;
        }
     else {
          result=result + (((val & 0x01) != 0) ? "1" : "0");
        }
        val=val >> 1;
      }
      return result;
    }
        public void setPerspective(boolean usePers) {
    		perspective = usePers;
    		scene.resizeScene(perspective);
    		render();
    	}
        public SList lookup(String name) {
    	SExpression sx;
    
    	if (null == this.hash)
    	    this.makeLookupHash();
    
    	// See if it's in this hash-table
    	if (this.hash.containsKey(name)) {
    	    sx = (SExpression)this.hash.get(name);
    	    if (sx.isList())
    		return (SList)sx;
    	    else
    		throw new RuntimeException(__me + ".lookup(): " + 
    			"Hashed SEXP lookup \"" + name + 
    			"\" doesn't resolves to SList: " + sx);
    	}
    
    	for (Enumeration e = this.list.elements() ; e.hasMoreElements(); ) {
    	    sx = (SExpression)e.nextElement();
    	    if (sx.isList()) {
    		// Recurse if list
    		sx = ((SList)sx).lookup(name);
    		if (null != sx)
    		    return (SList)sx;
    	    }
    	}
    	return null;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void run() {
            try {
                method.invoke(service, new Object[0]);
            }
            catch(InvocationTargetException itex) {
                Throwable t = itex.getTargetException();
                String message = "InvocationTargetException ('"+ t +"') while calling method '" + method + "' of service '" + service + "'";
                log.debug(message, t);
                if (t instanceof RuntimeException){
                    throw (RuntimeException) t;
                }
                else if (t instanceof Error){
                    throw (Error) t;
                }
                else{
                    throw new RuntimeException(message);
                }
            }
            catch(Exception ex) {
                String message = "Exception '" + ex + "' while calling method '" + method + "' of service '" + service + "'";
                log.debug(message, ex);
                throw new RuntimeException(message);
            }
        }
        public Class getParameterType() {
            if (parameterType == null && paramDescComposite != null) {
                parameterType = paramDescComposite.getParameterTypeClass();
            }
            return parameterType;
        }
        private void initActionsInterceptors() throws Exception {
    		try {
    			new LoadAdviserFromXml().load(this.getServletContext()
    					.getResourceAsStream(getConfigFile ()));
    		} catch (Exception exc) {
    			LOGGER.error("Loading ActionsInterceptor, cause: {}.", exc.getMessage(), exc);
    			throw exc;
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addVirtualHost(String hostname)
        {
            // Note that null hosts are also added.
            if (!_vhosts.contains(hostname))
            {
                _vhosts.add(hostname);
                _contextName=null;
    
                if (_httpServer!=null)
                {
                    if (_vhosts.size()==1)
                        _httpServer.removeMapping(null,this);
                    _httpServer.addMapping(hostname,this);
                }
                _vhostsArray=null;
            }
        }
        public int playerIdAt(Pair position) {
            int square = field.getValue(position);
    
            if ((square < 1) || (square > Constants.MAX_PLAYERS)) {
                return -1;
            }
    
            return square;
        }
        private void computeSquaringMatrix(){
      GF2Polynomial[] d=new GF2Polynomial[mDegree - 1];
      int i, j;
      squaringMatrix=new GF2Polynomial[mDegree];
      for (i=0; i < squaringMatrix.length; i++) {
        squaringMatrix[i]=new GF2Polynomial(mDegree,"ZERO");
      }
      for (i=0; i < mDegree - 1; i++) {
        d[i]=new GF2Polynomial(1,"ONE").shiftLeft(mDegree + i).remainder(fieldPolynomial);
      }
      for (i=1; i <= Math.abs(mDegree >> 1); i++) {
        for (j=1; j <= mDegree; j++) {
          if (d[mDegree - (i << 1)].testBit(mDegree - j)) {
            squaringMatrix[j - 1].setBit(mDegree - i);
          }
        }
      }
      for (i=Math.abs(mDegree >> 1) + 1; i <= mDegree; i++) {
        squaringMatrix[(i << 1) - mDegree - 1].setBit(mDegree - i);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void toggleFilterArea() {
          Point windowSize = getShell().getSize();
          Point oldSize = getShell().computeSize(SWT.DEFAULT,
                                                 SWT.DEFAULT);
          if(filterAreaCreated) {
             fFilterPanel.dispose();
             filterAreaCreated = false;
             detailsButton.setText(IDialogConstants.SHOW_DETAILS_LABEL);
          } else {
             createFilterPanel((Composite)getContents());
             detailsButton.setText(IDialogConstants.HIDE_DETAILS_LABEL);
          }
          Point newSize = getShell().computeSize(SWT.DEFAULT,
                                                 SWT.DEFAULT);
          getShell().setSize(new Point(windowSize.x,
                                       windowSize.y + (newSize.y - oldSize.y)));
       }
        public void closeMessageUI() {
        try {
          this.setClosed(true);
        } catch (java.beans.PropertyVetoException e) {
        }
      }
        private void getLoggerStatus(){
                String st = sendAndReceive("config");
                if(st==null){
                    showErrorMessage("The configuration information was not received from the " +
                            "\nlogger.  You can get the information manually by pushing " +
                            "\nthe get configuration button.","Error Downloading Configuration");
                } else {
                    loggerStatus.parseConfig(st);
                    if(!loggerStatus.isConfigKnown()) {
                        showErrorMessage("Error Parsing Logger Status.", "Parsing Error");
                    }
                }
                setConnectionMode();
                updateClock();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void removeNode(DeltaTarget target, Node node) {
    	    if (target instanceof InternalGraph) {
    	        ((InternalGraph) target).removeNodeWithoutCheck(node);
    	    } else {
    	        // apparently the target wasn't an InternalGraph
    	        // so we can't do efficient edge removal
    	    	target.removeNode(node);
    	    }
    	}
        public static void stop ( CommandSender self , int groupMask ) {
      sendPacket ( new byte [ ] {
        ( byte ) COMMAND_STOP , groupMask }
        ) ;
      }
        public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
            if ("konga_odbc_infoprovider".equals(portName)) {
                setkonga_odbc_infoproviderEndpointAddress(address);
            }
            else { // Unknown Port Name
                throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testEquals() {
            assertEquals(AreaRendererEndType.LEVEL, AreaRendererEndType.LEVEL);
            assertEquals(AreaRendererEndType.TAPER, AreaRendererEndType.TAPER);
            assertEquals(
                AreaRendererEndType.TRUNCATE, AreaRendererEndType.TRUNCATE
            );
        }
        public static double interpolantNormalized(double amount,double startAmount,double stopAmount){
      if (amount < startAmount)   return 0.0;
     else   if (amount > stopAmount)   return 1.0;
      if ((stopAmount - startAmount) == 0) {
        return (1.0);
      }
      return (amount - startAmount) / (stopAmount - startAmount);
    }
        public static QueryBasedHivePublishEntity deserializePublishCommands(State state) {
        QueryBasedHivePublishEntity queryBasedHivePublishEntity =
            GSON.fromJson(state.getProp(HiveAvroORCQueryGenerator.SERIALIZED_PUBLISH_TABLE_COMMANDS),
                QueryBasedHivePublishEntity.class);
        return queryBasedHivePublishEntity == null ? new QueryBasedHivePublishEntity() : queryBasedHivePublishEntity;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void moveResource(String source, String destination) throws CmsException {
        CmsResource res = readFileHeader(source);
        I_CmsResourceType rt = getResourceType(res.getType());
        rt.moveResource(this, source, destination);
    }
        public static Section setPidFile ( Section self , String fpath , boolean beforePrivDrop , boolean safe ) {
      String command = "pidfile" ;
      if ( ! beforePrivDrop ) command += "2" ;
      if ( safe ) command = "safe-" + command ;
      self . set ( command , fpath ) ;
      return self . mSection ;
    }
        public void link(Entity from, Entity to) {
    		if (!note2Meta_.containsKey(to)) {
    			note2Meta_.put(to, new HashSet());
    		}
    		if (!meta2Note_.containsKey(from)) {
    			meta2Note_.put(from, new HashSet());
    		}
    		((HashSet) note2Meta_.get(to)).add(from);
    		((HashSet) meta2Note_.get(from)).add(to);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void printBoatPositions() {
    		Iterator<Boat> iter = boats.values().iterator();
    		int i = 0;
    		while (iter.hasNext()) {
    			Boat boatTemp = iter.next();
    			Logging.getInstance().info(
    					this.getClass().getName(),
    					i + ":" + boatTemp.getName() + " - "
    							+ boatTemp.getPosition());
    			i++;
    		}
    	}
        public void log(String msg) {
        if (isLogSummary()) {
          logInternal(msg);
        }
      }
        private void connect() throws IOException {
    		url.openConnection();
    		
    		this.is = url.openConnection().getInputStream();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static Trie fromString(String str) {
    		String[] components = str.split("/");
    		Trie r = ROOT;
    		for(int i=0;i!=components.length;++i) {
    			r = r.append(components[i]);
    		}
    		return r;
    	}
        public void add(int index, Object value) throws UnsupportedOperationException,IllegalArgumentException {
            if (value == null) {
                list.add(index,(short)0);
            } else if (value instanceof Number) {
                list.add(index,((Short)value).shortValue());
            } else {
                throw new UnsupportedOperationException("Data type not supported. [" + value.getClass().getName());
            }
        }
        public void caseAAssertStatement(AAssertStatement node) {
            inAAssertStatement(node);
    
            node.getBoolExpression().apply(this);
            //Top of stack should be boolean.
            KType tos = (KType) _typeStack.pop();
            if (!Util.isAssignmentCompatible(tos,KBasicType.getBoolean())) {
                int[] pos = Util.getFirstIdent(node.getBoolExpression());
                SourceCodeException.throwIncompatibleTypes_AssertBoolean(pos[0],
                        pos[1], pos[2], tos);
            }
    
            if (node.getColonString() != null) {
                node.getColonString().apply(this);
            }
    
            outAAssertStatement(node);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void retrieveVals ( NTPInfo self ) {
      NTPinfo ntpinfo = new NTPinfo ( ) ;
      Map < String , NTPstats > ntpstats = ntpinfo . getHostOffsets ( self . mRemoteHosts ) ;
      if ( ntpstats != null ) {
        for ( String host : self . mRemoteHosts ) {
          String hostkey = StringUtils . substringAfter ( host , "." ) ;
          NTPstats hoststats = ntpstats . get ( host ) ;
          if ( hoststats != null ) {
            if ( self . hasGraph ( "ntp_host_stratums" ) ) {
              self . setGraphVal ( "ntp_host_stratums" , hostkey , hoststats . getStratum ( ) ) ;
            }
            if ( self . hasGraph ( "ntp_host_offsets" ) ) {
              self . setGraphVal ( "ntp_host_offsets" , hostkey , hoststats . getOffset ( ) ) ;
            }
            if ( self . hasGraph ( "ntp_host_delays" ) ) {
              self . setGraphVal ( "ntp_host_delays" , hostkey , hoststats . getDelay ( ) ) ;
            }
          }
        }
      }
    }
        private void deregisterWithProcessCompound() {
            //
            try {
                if (SFProcess.getProcessCompound() != null) {
                    SFProcess.getProcessCompound().sfDeRegister(this);
                }
            } catch (Exception ex) {
                // @TODO: Log. Ignore.
                //Logger.logQuietly(ex);
                if (sfLog().isIgnoreEnabled()) {
                    sfLog().ignore(ex);
                }
            }
        }
        public void run() {
            int row = sqlTable.getSelectedRow();
            if (row >= 0) {
                SqlTabPanel panel = (SqlTabPanel) sqlTable.getValueAt(row, 1);
                panel.run(resultPanel, tab.getTitleAt(row));
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static synchronized void cleanup(ResultSet R){
      Statement S=null;
      if (R != null) {
        try {
          S=R.getStatement();
        }
     catch (    Throwable t) {
          surfaceThrowable("cleanup() called ResultSet.getStatement()",t);
        }
        cleanup(S,R);
      }
    }
        public void createAccount(AccountType accountType, String username, String password) { 
            if(isConnected()) {
                try {
                    synchronized(this) {
                        this.getOutputStream().writeInt(ClientMessageCode.CREATEACCOUNT.getIndex());
                        this.getOutputStream().writeInt(accountType.getIndex());
                        new TransferString(username, 2000).sendData(this.getOutputStream());
                        new TransferString(password, 2000).sendData(this.getOutputStream());
                        this.getOutputStream().flush(); 
                    }
                } catch (IOException e) { 
                    this.messageFailed(e);
                }
            }
        }
        private static void updateContainerHostConfig ( ContainerHostConfig self , Service service ) {
      if ( service == null ) {
        throw new NullPointerException ( "service must not be null" ) ;
      }
      if ( service . getDependencies ( ) != null ) {
        loadDependencyContainers ( service ) ;
        if ( service . getHostConfig ( ) . getLinks ( ) != null ) {
          updateLinks ( service ) ;
        }
        if ( service . getHostConfig ( ) . getVolumesToAdd ( ) != null ) {
          updateVolumesToAdd ( service ) ;
        }
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean equals(Object object) {
            if (! (object instanceof BindingSet))
                return false;
            QueryLiteral thatQueryLiteral = ((BindingSet) object).getQueryLiteral();
            return this.queryLiteral.equals(thatQueryLiteral);
        }
        public void setMax(int val) throws PropagationFailureException {
        	this.getIntDomain().setMax(val);
        	//notify listeners if the variable changed
        	if(this.getIntDomain().changed()) {
        		fireChangeEvent();
        	}
        }
        public void createMove(final Movable unit, final IVector destination) {
            unit.setDestination(destination);
            if (this.unitList.contains(unit)) {
                this.unitList.remove(unit);
            }
            this.unitList.add(unit);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private boolean possiblyAppliesToIndex(IndexSpecification indexSpec, Put put) {
        for (List<KeyValue> familyPuts : put.getFamilyMap().values()) {
          for (KeyValue kv : familyPuts) {
            if (indexSpec.containsColumn(kv.getColumn())) {
              return true;
            }
          }
        }
        return false;
      }
        public int getSectionHeading(int addr) {
            if (featOkTst && casFeat_sectionHeading == null)
          jcas.throwFeatMissing("sectionHeading", "de.julielab.jules.types.Section");
        return ll_cas.ll_getRefValue(addr, casFeatCode_sectionHeading);
      }
        private static WorkerStatisticsContext proxy ( WorkerStatisticsContext self ) {
      if ( self . _context == null ) {
        self . _context = new WorkerStatisticsContext ( self . _version , self . _solution . getWorkspaceSid ( ) , self . _solution . getWorkerSid ( ) , null ) ;
      }
      return self . _context ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setMatchedFields(java.lang.String[] param){
                                  
                                       validateMatchedFields(param);
    
                                   
                                              if (param != null){
                                                 //update the setting tracker
                                                 localMatchedFieldsTracker = true;
                                              } else {
                                                 localMatchedFieldsTracker = false;
                                                     
                                              }
                                          
                                          this.localMatchedFields=param;
                                  }
        public static ObjectCategory createFromNameAndDictionary ( ObjectCategory self , String name , Map < String , Object > datas ) {
      ObjectCategory category = new ObjectCategory ( name ) ;
      setCommonDatas ( category , name , datas ) ;
      if ( "order" . equals ( datas . get ( "order" ) ) ) {
        category . setOrder ( Integer . parseInt ( datas . get ( "order" ) ) ) ;
      }
      return category ;
    }
        public void closeIdMapperQueryObject(Query queryObject) {
    		if (queryObject == null)
    			return;
    		try {
    			queryObject.closeDb();
    			//prtln("closeIdMapperQueryObject()");
    		} catch (Throwable e) {
    			prtlnErr("Error closing idmapper database connection: " + e);
    		}
    		queryObject = null;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private Client createClient(Env env, String depotPath) throws Exception {
        String hackystatSensorClientName = "hackystat-sensor-" + (new Date()).getTime();
        Client client = new Client(env, hackystatSensorClientName);
        client.setRoot(System.getProperty("user.home") + "/perforcesensorsketch");
        client.addView(depotPath, "//" + hackystatSensorClientName + "/...");
        client.commit();
        return client;
      }
        @Override
      public void sendRedirect(final String location)
          throws IOException {
        try {
          LOG.debug("redirecting to: {}", location);
          final InputStream is = externalResourceLocator.locate(location);
          IOUtils.copy(is, servletOutputStream);
          is.close();
          servletOutputStream.close();
        } catch (final IOException e) {
          LOG.warn("{}: Invalid response for location: {}", e.getClass().getName(), location);
          throw e;
        }
      }
        public static void encode(Object object,Writer writer,Option... options){
      try (JsonGenerator generator=javax.json.Json.createGenerator(writer)){
        generator.writeStartObject();
        encode("data",object,generator,options.length == 0 ? noneOf(Option.class) : copyOf(asList(options)));
        generator.writeEnd();
      }
     }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static CommitInfo commit ( String name , @ NotNull String commitMessage ) {
      CommitInfo ret = new CommitInfo ( ) ;
      ret . name = name ;
      ret . changes = new HashMap < > ( ) ;
      ret . result = true ;
      ret . comment = "" ;
      ret . changes = __Gson__ . toJson ( ret ) ;
      return ret ;
    }
        private static VariantStats strelkVariantStats ( Variant variant , SampleInfo sampleInfo ) {
      if ( variant . isDeletion ( ) || variant . isInsertion ( ) ) {
        int refDepth = Integer . parseInt ( sampleInfo . getTAR ( ) . get ( 0 ) ) ;
        int altDepth = Integer . parseInt ( sampleInfo . getTIR ( ) . get ( 0 ) ) ;
        int depth = refDepth + altDepth ;
        if ( depth > 0 ) {
          int refDepth = Integer . parseInt ( sampleInfo . getRef ( variant . getRef ( ) + "U" ) . get ( 0 ) ) ;
          int altDepth = Integer . parseInt ( sampleInfo . getAlt ( variant . getAlt ( ) + "U" ) . get ( 0 ) ) ;
          depth = altDepth + refDepth ;
        }
        if ( depth > 0 ) {
          double vaf = ( double ) altDepth / depth ;
          if ( vaf < 0 ) {
            vaf = 0 ;
          }
          return new VariantStats ( depth , altDepth , variantAlleleFrequency ( vaf ) ) ;
        }
      }
      return null ;
    }
        protected void disableCollaboration(String reason) {
    		recentStatusMode = this.getStatus();
    		sendPresence(Presence.Type.unavailable, reason, 10, Presence.Mode.dnd);
    		//trigger an event on the im controller, to update the status icon
    		ClientManager.getInstance().sendPresenceEvent(Presence.Type.available, username);
    		collaborationDisabled = true;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void check(X509Certificate[] chain) throws CertificateException {
    	if (principals != null &&
    	    !principals.contains(chain[0].getSubjectX500Principal()))
    	{
    	    throw new CertificateException("Remote principal is not trusted");
    	}
        }
        public void reset() {
    //    if (totalMoves != 0) {
    //      System.out.println("Overhead Per Move = " + (totalOverheadTime/(double)totalMoves) + "ms");
    //    }
        matches.clear();
       // overheadTime = 0;
       // totalMoves = 0;
      }
        public double crossLength(Geo b) {
            double x = this.y() * b.z() - this.z() * b.y();
            double y = this.z() * b.x() - this.x() * b.z();
            double z = this.x() * b.y() - this.y() * b.x();
            return Math.sqrt(x * x + y * y + z * z);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Conditionality traitSpaceEndConditionality() {
            final AbstractRelativeSpace property =
                    (AbstractRelativeSpace) getProperty(FoProperty.SPACE_END);
            if (property == null) {
                return AbstractRelativeSpace.getConditionalityNoInstance();
            }
            return property.getConditionality();
        }
        public int getChildCount(Object t) {
    		if (isNil(t)) {
    			return ((NilNode) t).getChildCount();
    		}
    		
    		return treeBuilder.getChildCount((AbstractTPLNode) t);
    	}
        public final Object pop(){
      Object result=this.first.value;
      this.first=this.first.next;
      if (this.first == null)   this.last=null;
      return result;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int min() {
            if (size() == 0) {
                throw new IllegalStateException("cannot find minimum of an empty list");
            }
            int min = Integer.MAX_VALUE;
            for (int i = 0; i < _pos; i++ ) {
            	if ( _data[i] < min ) {
            		min = _data[i];
            	}
            }
            return min;
        }
        static public String getString(String msg) {
            return msg;
    //        if (bundle == null)
    //            return msg;
    //        try {
    //            return bundle.getString(msg);
    //        } catch (MissingResourceException e) {
    //            return "Missing message: " + msg; //$NON-NLS-1$
    //        }
        }
        public static void doStopCluster ( Cluster self , String clusterName ) {
      try {
        cluster = api . getCluster ( clusterName ) ;
        cluster . stop ( ) ;
        System . out . println ( "Stopping Cluster" ) ;
      }
      catch ( ApiException e ) {
        System . out . println ( "Cluster not found" ) ;
        return ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    static public void setLevel(ZZCell c, int level) {
    	ZZCell para = findStruct(c, -1, true);
    	ZZCell str = para.s("d.nile-struct");
    	if(str == null) return;
    	setStrLevel(str, level);
        }
        private Object convert(Object value, String type) {
            if (EnumRuleType.STRING.equals(type)) {
                if (!(value instanceof String)) {
                    return String.valueOf(value);
                }
            } else if (EnumRuleType.DOUBLE.equals(type)) {
                if (!(value instanceof Double)) {
                    if (value instanceof Number) {
                        return NumberUtils.convertNumberToTargetClass((Number) value, Double.class);
                    } else {
                        return NumberUtils.parseNumber(value.toString(), Double.class);
                    }
                }
            } else if (EnumRuleType.INTEGER.equals(type)) {
                if (!(value instanceof Integer)) {
                    if (value instanceof Number) {
                        return NumberUtils.convertNumberToTargetClass((Number) value, Integer.class);
                    } else {
                        return NumberUtils.parseNumber(value.toString(), Integer.class);
                    }
                }
            }
            return value;
        }
        public Observable<Void> rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions) {
            return rebootWithServiceResponseAsync(poolId, nodeId, nodeRebootOption, computeNodeRebootOptions).map(new Func1<ServiceResponseWithHeaders<Void, ComputeNodeRebootHeaders>, Void>() {
                @Override
                public Void call(ServiceResponseWithHeaders<Void, ComputeNodeRebootHeaders> response) {
                    return response.body();
                }
            });
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void duplicate(MessageBytes src) throws IOException {
    switch (src.getType()) {
    case MessageBytes.T_BYTES:
        type=T_BYTES;
      ByteChunk bc=src.getByteChunk();
    byteC.allocate(2 * bc.getLength(),-1);
    byteC.append(bc);
    break;
    case MessageBytes.T_CHARS:
    type=T_CHARS;
    CharChunk cc=src.getCharChunk();
    charC.allocate(2 * cc.getLength(),-1);
    charC.append(cc);
    break;
    case MessageBytes.T_STR:
    type=T_STR;
    String sc=src.getString();
    this.setString(sc);
    break;
    }
    setCharset(src.getCharset());
    }
        public void deleteOutcomes() {
    		try {
    			deleteObject(resource,RR_RDFS+"outcomes",getOutcomes().getResource(),"outcomes","SectionResult");
    		}
    		catch (NoExistingPropertyException e) {}
    		catch (NoExistingObjectException e) {
    			System.out.println("Error: "+e.getLocalizedMessage());
    		}
    	}
        private boolean link(FacebookSettings settings) {
            boolean isSuccessful = false;
    
            // Validate account params and store.
            if (settings != null) {
                storeSettings(settings);
    
                // Emit link state change event.
                notifyLinkStateChanged(new LinkEvent(true));
    
                isSuccessful = true;
            }
            return isSuccessful;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void manageTargets(List<Target> validTargets) {
    		final boolean[] highlightedZones = new boolean[IdZones.NB_ZONE * 2];
    		Target.targetize(validTargets, highlightedZones);
    		if (this.validTargets != null) {
    			this.validTargets.clear();
    		}
    		this.validTargets = validTargets;
    		zones.clear();
    		for (int i = highlightedZones.length; i-- > 0;) {
    			if (highlightedZones[i]) {
    				final MZone highlightZone = StackManager.PLAYERS[i / IdZones.NB_ZONE].zoneManager
    						.getContainer(i % IdZones.NB_ZONE);
    				zones.add(highlightZone);
    				highlightZone.highLight(TargetFactory.TARGET_COLOR);
    			}
    		}
    	}
        public void releaseDBConnections() {
            for (Connection connection : dbPool.values()) {
                if (connection != null) {
                    try {
                        connection.close();
                    } catch (SQLException e) {
                        // There is nothing we can do with this.
                        // We must ignore this exception to let the rest connections in the pool to get a chance to be released.
                    }
                }
            }
        }
        public void setColorSpace(ColorSpace colorSpace, InterpolationDirection[] dir) {
    		if(dir.length < colorSpace.getNumComponents()) {
    			throw new IllegalArgumentException( "Must specify an interpolation " +
    					"direction for each colorspace component ("+colorSpace.getNumComponents()+")");
    		}
    		this.colorSpace = colorSpace;
    		this.interpolationDirection = dir;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private boolean isTurnPlayable(int color) {
    		for (int i = 0; i < diskColor[0].length; i++) {
    			for (int j = 0; j < diskColor[0].length; j++) {
    				if (diskColor[i][j].getColor() == DiskColor.NONE) {
    					if(!(getAffectedDisks(i, j, color, false)).isEmpty()){
    						return true;
    					}
    				}
    			}
    		}
    		return false;
    	}
        public static GPType fromType ( GPDatatype datatype ) {
      if ( datatype instanceof GPMultiValue ) {
        return GPType . getTypeByName ( "GPMultiValue:" + datatype . toString ( ) ) ;
      }
      else {
        return GPType . getTypeByName ( "GPMultiValue:" + String . valueOf ( datatype ) ) ;
      }
    }
        public String toString(){
    		return super.toString() +  
    			"\tCFP ID: 		" + cfpID + "\n" +
    			"\tRound: 		" + round + "\n" +			
    			"\tType: 		  REJECT CFP\n";
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void noActionFound(HttpServletResponse response, String actionID) throws IOException {
    		String warningMsg = null;
    		if (actionID == null || actionID.trim().equals("")) {
    			warningMsg = "Request parameter 'actionID' is not provided or its value is empty";
    		} else {
    		    warningMsg = "No mapping for PaginalAction was found in WebApplicationContext with actionID '"+actionID+"'";
    		}
    //		if (log.isWarnEnabled()) 
    //    		log.warn(warningMsg);		
    		//changed to print error
    		log.error(warningMsg);
        	response.sendError(HttpServletResponse.SC_NOT_FOUND);
    	}
        protected void addA_condPropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add
    			(createItemPropertyDescriptor
    				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
    				 getResourceLocator(),
    				 getString("_UI_ACT_a_cond_feature"),
    				 getString("_UI_PropertyDescriptor_description", "_UI_ACT_a_cond_feature", "_UI_ACT_type"),
    				 Machine_FMS_machinePackage.Literals.ACT__ACOND,
    				 true,
    				 false,
    				 true,
    				 null,
    				 null,
    				 null));
    	}
        protected AbstractMRMessage pollMessage() {
    				
    /* 		// Keep checking the state of the communication link by polling */
    /* 		// the command station using the EPROM checker */
    /* 		EcosMessage m = pollEprom.EcosEpromPoll(); */
    /* 		if (m != null){ */
    /* 			expectReplyEprom = true; */
    /* 			return m; */
    /* 		}else{ */
    /* 			expectReplyEprom = false; */
    /* 		} */
    		
    
    /* 		// Start Ecos memory poll for accessory states */
    /* 		if (pollHandler == null) */
    /* 			pollHandler = new EcosTurnoutMonitor(); */
    /*  */
    /* 		// minimize impact to NCE CS */
    /* 		mWaitBeforePoll = NceTurnoutMonitor.POLL_TIME; // default = 25 */
    
    /* 		return pollHandler.pollMessage(); */
    
            return null;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static Assignments allUnassigned(Method testMethod,
                TestClass testClass) {
            List<ParameterSignature> signatures;
            signatures = ParameterSignature.signatures(testClass
                    .getOnlyConstructor());
            signatures.addAll(ParameterSignature.signatures(testMethod));
            return new Assignments(new ArrayList<PotentialAssignment>(),
                    signatures, testClass);
        }
        private static void indexDocument ( IndexWriter self , Document document , boolean force ) throws IOException {
      if ( force ) {
        self . delete ( vid -> document . vid ) ;
      }
      IndexWriter writer = self . index . writer ( ) ;
      writer . addDocument ( new Document ( document ) ) ;
      writer . commit ( ) ;
    }
        private int compareStamps(Stamp memoryStamp, Stamp persistentStamp) {
        if (memoryStamp == null && persistentStamp == null) {
          return 0;
        } else if (memoryStamp == null) {
          return -1;
        } else if (persistentStamp == null) {
          return +1;
        } else {
          return memoryStamp.compareTo(persistentStamp);
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void actionPerformed(ActionEvent ev) {
    	    // check params
    	    if( ev == null )
    		return;
    	    
    	    String command = ev.getActionCommand();
    	    
    	    if( GUICommandStrings.OK_COMMAND.equals(command) ){
    		// the user wants to clone the agent
    		this.getMainWindow().cloneAglet(this.proxy);
    		this.setVisible(false);
    		this.dispose();
    	    }
    	    else
    		super.actionPerformed(ev);
    	}
        public void remind() {
            if (SystemTrayIconJDK6Impl.isVisible(icon) == false)
                return;
    
            String messageKey;
            if (pdash.getTimeLoggingModel().isPaused()) {
                messageKey = "Pause_Reminder_FMT";
            } else {
                messageKey = "Active_Reminder_FMT";
            }
            String windowTitle = pdash.getTitle();
            String msgBody = Reminder.resource.format(messageKey, windowTitle,
                    pdash.getActiveTaskModel().getPath());
            String msgTitle = Reminder.resource.format("Title_FMT", windowTitle);
            Reminder.this.icon.displayMessage(msgTitle, msgBody,
                    TrayIcon.MessageType.NONE);
        }
        public void setPOCName(String pocname) {
            POC_NAME = pocname;
            for (int i=0; i<observers.size(); i++) {
                SensorObserver observer = (SensorObserver)observers.get(i);
                if (observer != null) {
                    observer.sensorUpdated(getHostName(), this);
                } else {
                    observers.remove(i);
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void styleChgLabel ( ChgLabel self , String type , String symb , String edc , String fac , String smbsz , String edw , String lab ) {
      for ( int i = 0 ;
      i < self . style . length ;
      i ++ ) {
        if ( self . style [ i ] . get ( self . stylemap . get ( "Label" ) ) . equals ( type ) ) {
          if ( symb != null ) self . style [ i ] . put ( self . stylemap . get ( "Symbol" ) , symb ) ;
          if ( edc != null ) self . style [ i ] . put ( self . stylemap . get ( "Edge color" ) , edc ) ;
          if ( fac != null ) self . style [ i ] . put ( self . stylemap . get ( "Face color" ) , fac ) ;
          if ( smbsz != null ) self . style [ i ] . put ( self . stylemap . get ( "Symbol size" ) , smbsz ) ;
          if ( edw != null ) self . style [ i ] . put ( self . stylemap . get ( "Edge width" ) , edw ) ;
          if ( lab != null ) self . style [ i ] . put ( self . stylemap . get ( "Label" ) , lab ) ;
        }
      }
    }
        public void pressSustainPedal(int level) {
            if (_sustained) {
                releaseSustainPedal();
            }
            _sustained = true;
        }
        public void formatTo(Formatter formatter, int flags, int width,
    			int precision)
    	{
    		formatTo(this.toString(), formatter, flags, width, precision);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static int getColor(Context context, @AttrRes int attrId) {
            int color = 0;
            TypedArray a = context.obtainStyledAttributes(new int[]{attrId});
            try {
                color = a.getColor(0, 0);
            } catch (UnsupportedOperationException e) {
                error("color", attrId, e);
            }
            a.recycle();
            return color;
        }
        public static Scenario loadScenarioFromPlans(String plansFile){
      Config config=new Config();
      config.addCoreModules();
      config.plans().setInputFile(plansFile);
      Scenario scenario=ScenarioUtils.loadScenario(config);
      return scenario;
    }
        final public void setLeft(Leaf subtree) {
    		if(left==subtree)
    			return;
    		if(left!=null)
    			left.setParent(null);
    		left=subtree;
    		if(subtree!=null)
    			subtree.setParent(this);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getBluetoothAddress() {
            try {
                if (bdAddrString == null) {
                    long bdAddr = bluetoothManager.send_HCI_IP_Read_BD_ADDR();
                    bdAddrString = Long.toHexString(bdAddr).toUpperCase();
                    while (bdAddrString.length() < 12) { bdAddrString = "0" + bdAddrString; }
                }
                return bdAddrString;
            }
            catch (HCIException e) {
    			Debug.println(BCC.DEBUG_LEVEL_ERROR,"HCIException: LocalDevice.getBluetoothAddress(): " + e);
                return "000000000000";
            }
        }
        public static Map < String , Object > getObservableMethodMap ( ObservableProperty < ? > self , String propName , String method ) {
      if ( ( propName == null ) || ( method == null ) ) {
        return null ;
      }
      if ( method . contains ( "." ) ) {
        propName = propName . substring ( 0 , method . indexOf ( '.' ) ) ;
      }
      return self . getObservableMethodMap ( propName , method ) ;
    }
        private GenericCriteriaPrompt getPromptValue(FieldType field, byte[] block)
       {
          int textOffset = getPromptOffset(block);
          String value = MPPUtility.getUnicodeString(m_criteriaData, m_criteriaTextStart + textOffset);
          GenericCriteriaPrompt prompt = new GenericCriteriaPrompt(field.getDataType(), value);
          if (m_prompts != null)
          {
             m_prompts.add(prompt);
          }
          return prompt;
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public JCheckBox getJCheckBoxEnzimas() {
    		if (jCheckBoxEnzimas == null) {
    			jCheckBoxEnzimas = new JCheckBox();
    			jCheckBoxEnzimas.setOpaque(false);
    			jCheckBoxEnzimas.setSize(new Dimension(84, 21));
    			jCheckBoxEnzimas.setLocation(new Point(64, 290));
    			jCheckBoxEnzimas.setText("Enzimas");
    			jCheckBoxEnzimas.setCursor(new Cursor(Cursor.HAND_CURSOR));
    		}
    		return jCheckBoxEnzimas;
    	}
        protected Connection getConnection() {
        Connection conn = null;
    
        try {
          // hopefully the getConnection is synchronized
          conn = db.getConnection();
        } catch (SQLException e) {
          errorLogger.warn("SQLException" + e);
        }
        return conn;
      }
        public static String forPrint ( Object self ) {
      String s = "\033[34m" + self . getObjectInfo ( ) + "\033[0m" ;
      s += "\n" ;
      s += self . asString ( ) ;
      return s ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void closeCurrentWorkTab() {
        int index = getSelectedIndex();
        if(index >= 0) {
          closeWorkTab(index);
        }
      }
        public CCMatrix3f transposeNew() {
    		CCMatrix3f ret = new CCMatrix3f(m00, m10, m20, m01, m11, m21, m02, m12,
    				m22);
    		return ret;
    	}
        public OwlClass getRange() {
            if (range == null && parent != null) {
                range = parent.getRange();
            }
            return range;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String asString(Collection<?> collection) {
            if (collection == null) {
                return NULL;
            }
            StringBuilder builder = new StringBuilder();
            builder.append('[');
            boolean first = true;
            for (Object item : collection) {
                if (first) {
                    first = false;
                } else {
                    builder.append(',');
                }
                builder.append(asString(item));
            }
            builder.append(']');
            return builder.toString();
        }
        public static void main(String[] args) throws Exception {
      String string=IOUtils.toString(System.in,StandardCharsets.UTF_8.toString());
      System.out.println(string);
      OcspFetchIntervalSchemaValidator.validate(string);
    }
        public static Predicate<Imp> addFilters(
          Predicate<Imp> baseFilter, boolean banner, boolean video, boolean nativ) {
        int orCount = (banner ? 1 : 0) + (video ? 1 : 0) + (nativ ? 1 : 0);
        if (baseFilter == IMP_NONE || orCount == 0) {
          return baseFilter;
        }
    
        Predicate<Imp> typeFilter = null;
        if (banner) {
          typeFilter = Imp::hasBanner;
        }
        if (video) {
          typeFilter = typeFilter == null ? Imp::hasVideo : typeFilter.or(Imp::hasVideo);
        }
        if (nativ) {
          typeFilter = typeFilter == null ? Imp::hasNative : typeFilter.or(Imp::hasNative);
        }
    
        return baseFilter == IMP_ALL ? typeFilter : baseFilter.and(typeFilter);
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Object getId(ObjectClass mc, Object o) {
            Property idProperty = mc.getIdProperty() ;
            if(idProperty == null) return null ;
            return getValue(idProperty,o);
        }
        public static int run ( Main self , String ... args ) {
      Parameters params = self . parser . parse ( args ) ;
      int code = show ( params . uuid , params . term ) ;
      return code ;
    }
        public void zoomPoint(R2 p,double factor){
            /** effective zoom point is between current center and mouse position...
            * close to center => 100% at the given point, close to edge => 10% at the given point. */
            double cx=.1*p.x+.9*getActualCenter().x;
            double cy=.1*p.y+.9*getActualCenter().y;
            setDesiredBounds(new R2(cx-factor*getDrawWidth()/2.0,cy-factor*getDrawHeight()/2.0),new R2(cx+factor*getDrawWidth()/2.0,cy+factor*getDrawHeight()/2.0));
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addHistory( DefaultBranchColouring history ) {
    		
    		// require that my child colour is the new history's parent colour
    		if (childColour != history.parentColour) {
    			throw new Error("My child colour and the added parent colour don't match");
    		}
    		colourChanges.addAll( history.colourChanges );
    		changeHeights.addAll( history.changeHeights );
    		childColour = history.childColour;
    		
    		fullSanityCheck();
    
    	}
        public void recalcMinMax(){
          double min = Double.POSITIVE_INFINITY;
          double max = Double.NEGATIVE_INFINITY;
          for(int count = 0; count<genes.size(); count++){
            Gene g = (Gene)genes.elementAt(count);
            double d;
            if((d=g.getMaxValue())!=Double.POSITIVE_INFINITY){
              max=Math.max(max,d);
            }
            if((d=g.getMinValue())!=Double.POSITIVE_INFINITY){
              min=Math.min(min,d);
            }
          }
    
          this.minExpValue = min;
          this.maxExpValue = max;
        }
        public void testGettingParametersAsPropertiesGroupThatDontExist() {
    		try {
                core.setConfiguration(this.createComplexConfiguration());
                versionEffectiveDate=new VersionEffectiveDate();
                Properties p=core.getParametersAsProperties("plants");
                assertNotNull(p);
    		}
            catch(Throwable e) {
                fail("Unexpected exception:"+e);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public IdeaEstimate(double competition,long searchVolume,Money averageCpc,MonthlySearchVolume[] targetedMonthlySearches){
      this.competition=competition;
      this.searchVolume=searchVolume;
      this.averageCpc=averageCpc;
      this.targetedMonthlySearches=targetedMonthlySearches == null ? ImmutableList.<MonthlySearchVolume>of() : ImmutableList.copyOf(targetedMonthlySearches);
    }
        public static void init(Set<OutputOption> options){
      for (int i=0; i < 0x10000; i++) {
        instructionMap[i]=defaultInstruction;
      }
      addBaseInstructions(options);
      if (options.contains(OutputOption.STACK))   replaceAltStackInstructions();
      if (options.contains(OutputOption.SHIFT))   replaceShiftInstructions();
      if (options.contains(OutputOption.DMOV))   replaceAltDmovInstructions();
      if (options.contains(OutputOption.SPECIALS))   replaceAltSpecialInstructions();
    }
        public void resetContent() {
    		hour = 0;
    		min = 0;
    		beer = false;
    		dancefloor = false;
    		livemusic = false;
    		nosmoking = false;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void scanBinary ( File patchFile , Project project , String sha256hash , String apikey ) throws IOException {
      VirusTotal vApi = new VirusTotal ( ) ;
      while ( true ) {
        BinaryReport binaryReport = vApi . binaryReport ( sha256hash , apikey ) ;
        int responseCode = binaryReport . getResponseCode ( ) ;
        if ( responseCode == 0 ) {
          logger . info ( "Performing new scan of " + patchFile + "." ) ;
          ScanFile scanFile = vApi . scanFile ( patchFile , apikey ) ;
          logger . info ( "VirusTotal Response: " + scanFile . getVerboseMsg ( ) ) ;
          logger . info ( "Report will be rendered at: " + scanFile . getPermalink ( ) ) ;
          binaryReport = vApi . binaryReport ( sha256hash , apikey ) ;
        }
        if ( responseCode == - 2 ) {
          logger . info ( "Report job still queued.." ) ;
        }
        if ( responseCode == 1 ) {
          logger . info ( "Report found, job complete." ) ;
          break ;
        }
      }
      int positives = binaryReport . getPrespositives ( ) ;
      if ( positives == 0 ) {
        negativeReport ( binaryReport , sha256hash , project , patchFile ) ;
      }
      else {
        positiveReport ( binaryReport , sha256hash , project , patchFile ) ;
      }
    }
        public boolean updateEntry(String packagename, int permission){
    		if(packagename==null){
        		throw new IllegalArgumentException("Table " + TABLE_PERMISSIONS);
        	}
        	
    		String[] projection = {FIELD_PACKAGEID, FIELD_PERMISSION};
    		String selection = FIELD_PACKAGEID + " = ? ";
    		String[] selectionArgs = {packagename}; 
    		boolean bContains = contains(TABLE_PERMISSIONS, projection, selection, selectionArgs, null);
    
    		ContentValues cv = new ContentValues();
    		cv.put(FIELD_PERMISSION, permission);
    		
    		SQLiteDatabase db = null;
    		try{
    			db = mDatabaseHelper.getWritableDatabase();
    			if(bContains){
    				db.update(TABLE_PERMISSIONS, cv, selection, selectionArgs);
    			} else {	
    				cv.put(FIELD_PACKAGEID, packagename);
    				db.insert(TABLE_PERMISSIONS, new String(), cv);
    			}
    
    		} finally {
    /*			if(db!=null){
    				db.close();
    			}*/
    		}
    		return true;
    	}
        private AnimatedProgressBar getAnimatedProgressBar() {
    		if (animatedProgressBar == null) {
    			animatedProgressBar = new AnimatedProgressBar();
    			animatedProgressBar.setVisible(false);
    		}
    		return animatedProgressBar;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getPath() {
    			StringBuffer buf = new StringBuffer();
    			int maxIndex = path.size();
    			for (int i = 0; i < maxIndex; i++) {
    				buf.append(String.valueOf(path.get(i)));
    				if (i + 1 < maxIndex) {
    					buf.append(".");
    				}
    			}
    			return buf.toString();
    		}
        public void get(int offset, long[] la) {
        int start = longOffset + offset;
    
        for (int i = 0; i < la.length; ++i) {
          la[i] = lb.get(start + i);
        }
      }
        public String getConfig(String key) throws MojoExecutionException {
    		ResourceBundle resource = null;
    		try {
    			resource = ResourceBundle.getBundle(
    					"io/sarl/maven/compiler/config", //$NON-NLS-1$
    					java.util.Locale.getDefault(),
    					MavenHelper.class.getClassLoader());
    		} catch (MissingResourceException e) {
    			throw new MojoExecutionException(e.getLocalizedMessage(), e);
    		}
    		String value = resource.getString(key);
    		if (value == null || value.isEmpty()) {
    			value = Strings.nullToEmpty(value);
    			this.log.warn(MessageFormat.format(Messages.MavenHelper_1, key));
    		}
    		return value;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static JsonObject toMap ( Macaroon self ) {
      if ( self . getVersion ( ) < VERSION_3 ) {
        if ( self . getCaveatData ( ) . size ( ) > 0 ) {
          throw new IllegalArgumentException ( "cannot serialize pre-version3 macaroon with " + "external caveat data" ) ;
        }
        return new JsonObject ( ) ;
      }
      JsonObject serialized = new JsonObject ( ) ;
      serialized . addProperty ( "m" , new JsonArray ( ) ) ;
      serialized . addProperty ( "v" , self . getVersion ( ) ) ;
      if ( self . getNamespace ( ) != null ) {
        serialized . addProperty ( "ns" , self . getNamespace ( ) . serializeText ( ) . toString ( ) ) ;
      }
      JsonObject caveatData = new JsonObject ( ) ;
      for ( String id : self . getCaveatData ( ) ) {
        String key = Base64 . encodeBase64URLSafeString ( id ) . trim ( ) ;
        String value = Base64 . encodeBase64URLSafeString ( self . getCaveatData ( ) . get ( id ) ) . trim ( ) ;
        caveatData . addProperty ( key , value ) ;
      }
      if ( caveatData . size ( ) > 0 ) {
        serialized . addProperty ( "cdata" , caveatData ) ;
      }
      return serialized ;
    }
        private void unmap(Group group) {
        Set<Role> roles = findRoles(group);
        if ((roles != null) && (roles.size() > 0)) {
          for (Iterator<Role> iterator = roles.iterator(); iterator.hasNext();) {
            Role role = (Role) iterator.next();
            unmap(group, role); // FIXME BUG RESTLET SUR LE UNMAP
          }
        }
      }
        private void createCmpNavigatorRoot() {
            this.cmpNavigatorRoot = new ViewForm(this.sashForm, SWT.BORDER | SWT.FLAT);
            createCmpNavigator();
            this.cmpNavigatorRoot.setContent(this.cmpNavigator);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void onModuleLoad() {
    		//create view
    		TanCentrumView view = new TanCentrumView();
    		RootPanel.get("tanCentrumApp").add( view );
    
    		RPCObjectDAOFactory objectFactory = new RPCObjectDAOFactory( 
    				GWT.getModuleBaseURL()+"objectFactory", view );
    		
    		
    		
    		//give the view the object factory
    		view.setObjectFactory( objectFactory );
    //		objectFactory.setListener(view);
    	}
        @Override
    	public CommerceCurrency fetchByG_P_Last(long groupId, boolean primary,
    		OrderByComparator<CommerceCurrency> orderByComparator) {
    		int count = countByG_P(groupId, primary);
    
    		if (count == 0) {
    			return null;
    		}
    
    		List<CommerceCurrency> list = findByG_P(groupId, primary, count - 1,
    				count, orderByComparator);
    
    		if (!list.isEmpty()) {
    			return list.get(0);
    		}
    
    		return null;
    	}
        public void dump(PrintWriter pw, ClassFile cf) {
        pw.print("StartPC:     ");
        pw.println(getStartPc());
        pw.print("Line number: ");
        pw.println(getLineNumber());
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void run() {
          while (true) {
            try {
              delimiter = (delimiter != ":") ? ":" : " ";
              repaint();
              sleep(500);
            }
            catch (InterruptedException e){}
          }
        }
        public void dispose(){
      m_manager.removeListener(m_internalListener);
      for (  final DebuggerTemplate debuggerTemplate : m_debuggerTemplates) {
        debuggerTemplate.dispose();
      }
    }
        public Boolean deleteProductCategory(EntityManager em,String productCategory){
      Boolean status=true;
      ProductCategory prodcat=null;
      try {
        if (!em.getTransaction().isActive()) {
          em.getTransaction().begin();
        }
        prodcat=em.find(ProductCategory.class,productCategory);
        em.remove(prodcat);
        em.getTransaction().commit();
      }
     catch (  Exception e) {
        status=false;
        logger.error("Error occured during delete of Product category. Detailed info: " + e);
      }
      return status;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public FeedsDatasource getFeedsDatasource(String datasourceName) {
        	Object datasource = getDatasourceObject(datasourceName);
        	if (datasource != null) {
        		if (datasource instanceof FeedsDatasource) 
        			return (FeedsDatasource)datasource;
        		else
        			throw new IllegalArgumentException("Invalid datasource specified");
        	}
        	return null;
        }
        private Watt getActiveOneTimeConsumption() {
    		Watt activeConsumption = new Watt();
    
    		for (OneTimeConsumptionInformation information : activeOneTimeConsumptionInformation) {
    			activeConsumption.addWatt(information.getConsumption());
    		}
    		
    		return activeConsumption;
    	}
        public static void createSomeSupportedCountries(DataService mgr) throws NonUniqueBusinessKeyException {
      findOrCreate(mgr,Locale.GERMANY.getCountry());
      findOrCreate(mgr,Locale.JAPAN.getCountry());
      findOrCreate(mgr,Locale.UK.getCountry());
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getXml() {
    
    	String xml = "";
    	xml += "<OSCPACKET ADDRESS=\"" + address.getHostAddress() +
    	    "\" PORT=\"" + port +
    	    "\" TIME=\""+ time + "\">";
    
    	Enumeration m = messages.elements();
    	while (m.hasMoreElements()) {
    	    OscMessage mess = (OscMessage)m.nextElement();
    	    xml += mess.getXml();
    	}
    
    	xml += "</OSCPACKET>";
    	return xml;
        }
        public static List < Object > allSolidityVariablesUsedAsArgs ( final Self self ) {
      if ( allSolidityVariablesUsedAsArgs == null ) {
        allSolidityVariablesUsedAsArgs = self . exploreFunctions ( new ExploreFunctionVisitor ( ) {
          @ Override public void visit ( Node node ) {
            self . exploreFuncNodes ( node , solidityVariableInInternalCalls ) ;
          }
        }
        ) ;
      }
      return allSolidityVariablesUsedAsArgs ;
    }
        public void setModel(TextModel newModel) {
        if (model != null) {
          if (newModel.getFormat() == null) {
            newModel.setFormat(model.getFormat());
            newModel.setFormatPattern(model.getFormatPattern());
          }
          model.removeChangeListener(this);
        }
        model = newModel;
        model.addChangeListener(this);
        fireEnableChange(
            new EnableEvent(this, isChangeable()));
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setFILELOG(boolean fILELOG) {
    		if(FILELOG && !fILELOG){logger.removeAppender(appender);}
    		if(!FILELOG && fILELOG){logger.addAppender(appender);}
    		FILELOG = fILELOG;
    	}
        private JRadioButton getNonlinRadioButton() {
            if (nonlinRadioButton == null) {
                nonlinRadioButton = new JRadioButton();
                nonlinRadioButton.setText("Simulate from nonlinear solution");
            }
            return nonlinRadioButton;
        }
        private static void skipNames(ByteBuffer tableBuffer,int count){
      for (int i=0; i < count; ++i) {
        ByteUtil.forward(tableBuffer,tableBuffer.getShort());
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void clearFixedEffect ( FixedEffect self ) {
      self . mA = new float [ ] {
      };
      self . mF = new float [ ] {
      };
      self . mB = new float [ ] {
      };
      self . mA_identity = new float [ ] {
      };
      self . mREML_term = new float [ ] {
      };
      self . mn_terms = 0 ;
      self . mn_fixed_effs = 0 ;
      self . mn_fixed_effs_REML = 0 ;
      indicator . term = new float [ ] {
      };
      indicator . row = new float [ ] {
      };
      indicator . col = new float [ ] {
      };
      clearCache ( "Fstar" , "Astar" , "Xstar" , "Xhat" , "Areml" , "Areml_eigh" , "Areml_chol" , "Areml_inv" , "beta_hat" , "B_hat" , "LRLdiag_Xhat_tens" , "Areml_grad" , "beta_grad" , "Xstar_beta_grad" , "Zstar" , "DLZ" ) ;
    }
        protected int getResourceCount() {
            if (resourceGroup != null) {
                return resourceGroup.getResourceCount();
            }
            return 0;
        }
        private ResultSet getResultSet(boolean async) throws SQLException {
            
            ResultSet rs = getUnfilteredResultSet(async);
            
            if (rs == null) {
            	return null;
            }
            
            if (resultSetFilter == null) {
                return rs;
            } else {
                CachedRowSet filteredRs = new CachedRowSet();
                filteredRs.populate(rs, resultSetFilter);
                return filteredRs;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    synchronized public void deregisterListener(Message template, MessageListener listener) {
            
            if (m_MoteIF != null ) {
                m_MoteIF.deregisterListener(template,listener);
            } else {
                if (m_Listener == listener) m_Listener = null;
            }
            
        }
        public RealArray getXY() {
            double[] f = new double[2 * size()];
            int count = 0;
            for (int i = 0; i < size(); i++) {
                Real2 p = getReal2(i);
                f[count++] = p.getX();
                f[count++] = p.getY();
            }
            return new RealArray(f);
        }
        private JButton getJButton3() {
    		if (jButton3 == null) {
    			jButton3 = new JButton();
    			jButton3.setText("Done");
    		}
    		return jButton3;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void move(DelegateNode node) {
            if (node.isDelegated()) {
                return;
            }
            Dimension dim = node.accumulator();
            node.getGridPoint().translate(dim.width, dim.height);
        }
        public MathVector getCueStrokeVelocity() {
    		MathMatrix rotMatrixH = Mathematics.getRotationMatrix3D(Math.PI * cueAngleH / 180., cueRotAxisH);
    		MathMatrix rotMatrixV = Mathematics.getRotationMatrix3D(Math.PI * cueAngleV / 180., cueRotAxisV);
    		MathVector velocityVector = Mathematics.mul(Mathematics.getUnitVector(3, 1), cueVelocity);
    		velocityVector = Mathematics.mul(rotMatrixH, velocityVector);
    		velocityVector = Mathematics.mul(rotMatrixV, velocityVector);
    		return velocityVector;
    	}
        public static final RootRhnGisManager getInstance ( ) throws Exception {
      if ( isLoggedIn ) {
        return null ;
      }
      if ( instance == null ) {
        instance = new RootRhnGisManager ( ) ;
      }
      return instance ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void processLogin() {
          log.debug("Process the login ...");
    
          String userid = useridField.getText();
          String password = passwordField.getText();
    
          useridField.setText("");
          passwordField.setText("");
          WebAutoDeployApplication.getActive().setFocusedComponent(useridField);
    
          WebAutoDeployApplication.getApplication().connect(userid, password);
       }
        public void setInfoProperty(String key, String value){
    		if(value != null){
    			_infoMap.put(key, value.trim());
    		}
    
    	}
        private static < K , V > void mergeMap ( Map < K , V > a , Map < K , V > b ) {
      for ( Map . Entry < K , V > p : b . entrySet ( ) ) {
        if ( p . getValue ( ) == null ) {
          if ( ! ( p . getValue ( ) instanceof Map ) ) continue ;
          mergeMap ( a . get ( p . getKey ( ) ) , ( Map < K , V > ) p . getValue ( ) ) ;
        }
        else {
          a . put ( p . getKey ( ) , p . getValue ( ) ) ;
        }
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void addAccessControlMethod ( AccessControlList self , String methodName ) {
      if ( self . getAllowedMethods ( ) instanceof Set ) {
        ( ( Set ) self . getAllowedMethods ( ) ) . add ( methodName ) ;
      }
      else {
        self . setAllowedMethods ( new HashSet ( ) ) ;
      }
    }
        public void removeChild(final PlayerCharacter pc, final Object child) {
    		
    		final int i = indexOfChild(child);
    		Equipment anEquip = (Equipment) child;
    		final Float qtyRemoved = anEquip.numberCarried();
    		setChildType("Total", getChildType("Total") - qtyRemoved);
    
    		final String aString = anEquip.isIndexedUnderType();
    		setChildType(aString, getChildType(aString) - qtyRemoved);
    		anEquip.setParent(null);
    		removeContainedEquipment(i);
    		updateContainerContentsString(pc);
    
    		Equipment equipment = this;
    
    		while (equipment.getParent() != null) {
    			equipment = equipment.getParent();
    			equipment.updateContainerContentsString(pc);
    		}
    	}
        private TypeSpec getBinderWrapper() {
            TypeSpec.Builder staticBinderWrapperClassBuilder = TypeSpec
                    .classBuilder("BinderWrapper")
                    .addModifiers(Modifier.PRIVATE)
                    .addModifiers(Modifier.STATIC)
                    .addField(ClassName.get("android.os", "IBinder"), "binder", Modifier.PRIVATE)
                    .addMethod(MethodSpec.constructorBuilder()
                            .addParameter(ClassName.get("android.os", "IBinder"), "binder")
                            .addStatement("this.binder = binder")
                            .build())
                    .addMethod(MethodSpec.methodBuilder("asBinder")
                            .addModifiers(Modifier.PUBLIC)
                            .addAnnotation(Override.class)
                            .returns(ClassName.get("android.os", "IBinder"))
                            .addStatement("return binder")
                            .build())
                    .addSuperinterface(ClassName.get("android.os", "IInterface"));
    
            return staticBinderWrapperClassBuilder.build();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String toString() {
    		StringBuffer result = new StringBuffer("[Program \"");
    		result.append(name);
    		result.append("\", ");
    		if( fProtected)
    			result.append("protected");
    		else {
    			result.append(statements.size());
    			result.append(" statements");
    		}
    		if (executable != null)
    			result.append(", linked");
    		if (fModified)
    			result.append(", modified");
    		if (fProgramActive)
    			result.append(", active");
    		if (fSystemObject)
    			result.append( ", system object");
    		result.append("]");
    		return result.toString();
    	}
        private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
            s.defaultReadObject();
    
            // Read in elements until trailing null sentinel found
            Node<E> h = null, t = null;
            for (Object item; (item = s.readObject()) != null; ) {
                @SuppressWarnings("unchecked")
                Node<E> newNode = newNode((E) item);
                if (h == null)
                    h = t = newNode;
                else {
                    NEXT.set(t, newNode);
                    PREV.set(newNode, t);
                    t = newNode;
                }
            }
            initHeadTail(h, t);
        }
        @Override
        public boolean next() {
            if (!this.iterator.hasNext()) {
                this.brlw.numberOfLiteralWords = 0;
                this.brlw.runningLength = 0;
                return false;
            }
            this.brlw.reset(this.iterator.next());
            this.literalWordStartPosition = this.iterator.literalWords(); // +
            // this.brlw.literalWordOffset
            // ==0
            return true;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public BigDecimalAssert asNumber() {
            isPresent(NUMBER.getDescription());
            Node node = getNode(actual, "");
            if (node.getNodeType() == NUMBER) {
                return createBigDecimalAssert(node.decimalValue());
            } else if (node.getNodeType() == STRING) {
                try {
                    return createBigDecimalAssert(new BigDecimal(node.asText()));
                } catch (NumberFormatException e) {
                    failWithMessage("Node \"" + path + "\" can not be converted to number expected: <a number> but was: <" + quoteTextValue(node.getValue()) + ">.");
                }
            } else {
                failOnType(node, "number or string");
            }
            return null;
        }
        @Override
    	public Cookie[] getCookies() {
    		Collection<Cookie> entries = cookies.values();
    		return entries.toArray(new Cookie[0]);
    	}
        @Override Map<String,Object> extractFields(String line){
      try {
        return reader.readValue(line);
      }
     catch (  IOException e) {
        logger.error("Exception while extracting fields {}",e);
      }
      return null;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void showColumn(int colIndex) {
            getColumnModel().setHidden(colIndex, false);
            if (Ext.isIE()) {
                Timer t = new Timer() {
                    public void run() {
                        getView().refresh();
                        getView().updateHeaderSortState();
                    }
                };
                t.schedule(10);
            }
        }
        private boolean transformDataTask(){
    		boolean result=true;
    		String sCurrentFile=pParser.store.sTargetDir+pParser.store.sOutFileName+pParser.store.sOutFileExtension;
    		log.setModuleStep("transformDataTask");
    		ImportFileIntoDbTable importFile = new ImportFileIntoDbTable(pParser, DB_IMPORT_TABLE, log);
    		result = importFile.process(sCurrentFile);
    		importResult = importFile.getResult();
    		return result;
    	}
        public void execute(OperationContext context) throws Exception {
        
        // initialize
        LOGGER.finer("Executing csw:GetRecords request...");
        IProviderFactory factory = context.getProviderFactory();
        
        // evaluate the query
        IQueryEvaluator evaluator = factory.makeQueryEvaluator(context);
        if (evaluator == null) {
          String msg = "IProviderFactory.makeQueryEvaluator: instantiation failed.";
          LOGGER.log(Level.SEVERE,msg);
          throw new OwsException(msg);
        } else {
          evaluator.evaluateQuery(context);
        }
        
        // generate the response
        IResponseGenerator generator = factory.makeResponseGenerator(context);
        if (generator == null) {
          String msg = "IProviderFactory.makeResponseGenerator: instantiation failed.";
          LOGGER.log(Level.SEVERE,msg);
          throw new OwsException(msg);
        } else {
          generator.generateResponse(context);
        } 
          
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Observable<ConnectionResetSharedKeyInner> beginResetSharedKeyAsync(String resourceGroupName, String virtualNetworkGatewayConnectionName, int keyLength) {
            return beginResetSharedKeyWithServiceResponseAsync(resourceGroupName, virtualNetworkGatewayConnectionName, keyLength).map(new Func1<ServiceResponse<ConnectionResetSharedKeyInner>, ConnectionResetSharedKeyInner>() {
                @Override
                public ConnectionResetSharedKeyInner call(ServiceResponse<ConnectionResetSharedKeyInner> response) {
                    return response.body();
                }
            });
        }
        private String normalizeWhitespace(String str) {
        str = WHITESPACE_EXCEPT_SPACE_PATTERN.matcher(str).replaceAll(" ");
        str = TWO_OR_MORE_SPACES_PATTERN.matcher(str).replaceAll(" ");
        return str;
      }
        private PcapPacket readPacket(int magicNumber) throws IOException {
      PacketHeader packetHeader=readPacketHeader(magicNumber);
      Buffer packetData=readPacketData(packetHeader.getInclLen());
      return new PcapPacket(packetHeader,packetData);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle parameters) {
    
            if (purchaseAmount == null) {
                notifyDeveloperError("purchaseAmount cannot be null");
                return;
            } else if (currency == null) {
                notifyDeveloperError("currency cannot be null");
                return;
            }
    
            if (parameters == null) {
                parameters = new Bundle();
            }
            parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY, currency.getCurrencyCode());
    
            logEvent(AppEventsConstants.EVENT_NAME_PURCHASED, purchaseAmount.doubleValue(), parameters);
            eagerFlush();
        }
        public int indexOf(char ch, int start) {
            if (ch > MAX_CHAR_VALUE) {
                return INDEX_NOT_FOUND;
            }
    
            if (start < 0) {
                start = 0;
            }
    
            final byte chAsByte = c2b0(ch);
            final int len = offset + length;
            for (int i = start + offset; i < len; ++i) {
                if (value[i] == chAsByte) {
                    return i - offset;
                }
            }
            return INDEX_NOT_FOUND;
        }
        private int importTables(Referenceable databaseReferenceable, String databaseName, final boolean failOnError) throws Exception {
            int tablesImported = 0;
            List<String> hiveTables = hiveClient.getAllTables(databaseName);
            LOG.info("Importing tables {} for db {}", hiveTables.toString(), databaseName);
            for (String tableName : hiveTables) {
                int imported = importTable(databaseReferenceable, databaseName, tableName, failOnError);
                tablesImported += imported;
            }
    
            if (tablesImported == hiveTables.size()) {
                LOG.info("Successfully imported all {} tables from {} ", tablesImported, databaseName);
            } else {
                LOG.error("Able to import {} tables out of {} tables from {}. Please check logs for import errors", tablesImported, hiveTables.size(), databaseName);
            }
    
            return tablesImported;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static SubdomFunctions onPageScaleFactor ( Emulation self , float pageScaleFactor ) {
      Preconditions . checkArgument ( pageScaleFactor > 0 , "Argument 'pageScaleFactor' must be of type '['float', 'int']'. Received type: '%s'" , pageScaleFactor ) ;
      SubdomFunctions subdomFuncs = self . synchronousCommand ( "Emulation.setPageScaleFactor" , pageScaleFactor ) ;
      return subdomFuncs ;
    }
        public ResourceBundle getResources() {
    		if (resources == null) {
                resources = new FreemindResourceBundle();
    		}
    		return resources;
    	}
        public void stop() {
    
            this.interrupt();
            cancel = true;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static void endSessions ( Client self , String ... sessionIds ) {
      try {
        try ( Socket socket = self . socketForReads ( ReadPreference . PRIMARY_PREFERRED , null ) ) {
          if ( ! socket . supportsSessions ( ) ) return ;
          for ( int i = 0 ;
          i < sessionIds . length ;
          i += CommonConstants . MAX_END_SESSIONS ) {
            SON spec = new SON ( new byte [ ] {
              ( byte ) ']' }
              ) ;
              spec . writeBytes ( sessionIds [ i ] ) ;
              sockInfo . command ( "admin" , spec , new SlaveHandshake ( socket ) , self ) ;
            }
          }
        }
        catch ( Py4JIOException e ) {
          e . printStackTrace ( ) ;
        }
      }
        private String stringHelper(GenTreeNode node) {
            if (node == null) {
                return null;
            }
    
            String s1 = stringHelper(node.leftNode);
            String s2 = node.data.toString();
            String s3 = stringHelper(node.rightNode);
    
            StringBuilder s = new StringBuilder();
            if (s1 != null) {
                s.append(s1 + " ");
            }
            s.append(s2);
            if (s3 != null) {
                s.append(" " + s3);
            }
            return s.toString();
        }
        private void initializeLiveAttributes(){
      method=createLiveAnimatedEnumeration(null,SVG_METHOD_ATTRIBUTE,METHOD_VALUES,(short)1);
      spacing=createLiveAnimatedEnumeration(null,SVG_SPACING_ATTRIBUTE,SPACING_VALUES,(short)2);
      startOffset=createLiveAnimatedLength(null,SVG_START_OFFSET_ATTRIBUTE,SVG_TEXT_PATH_START_OFFSET_DEFAULT_VALUE,SVGOMAnimatedLength.OTHER_LENGTH,true);
      href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Dictionary getComplement(Dictionary dictionary) {
            List<Dictionary> candidates = Lists.newArrayList();
    
            List<Dictionary> dictionaries = getDictionaries();
    
            for (Dictionary d : dictionaries) {
                if (d.getFromLanguage().equals(dictionary.getToLanguage()) && d.getToLanguage().equals(dictionary.getFromLanguage())) {
                    candidates.add(d);
                }
            }
    
            for (Dictionary candidate : candidates) {
                String[] langs = candidate.getName().split("-");
    
                if (langs.length == 2 && (langs[0].equalsIgnoreCase(dictionary.getToLanguage().getName())) &&
                        langs[1].equalsIgnoreCase(dictionary.getFromLanguage().getName())) {
                    return candidate;
                }
            }
    
            return null;
        }
        public RealMatrix getCorrelationStandardErrors() {
            int nVars = correlationMatrix.getColumnDimension();
            double[][] out = new double[nVars][nVars];
            for (int i = 0; i < nVars; i++) {
                for (int j = 0; j < nVars; j++) {
                    double r = correlationMatrix.getEntry(i, j);
                    out[i][j] = FastMath.sqrt((1 - r * r) /(nObs - 2));
                }
            }
            return new BlockRealMatrix(out);
        }
        public void joinGroup(Inet4Address group, VirtualInterface vif) {
    		Native.joinGroup(
    				Utilities.Inet4AddressToInt(group),
    				Utilities.Inet4AddressToInt(vif.getLocalAddress()),
    				vif.getIfIndex());
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setIsotopeListRef(String value) throws RuntimeException {
            StringSTAttribute att = null;
            if (_att_isotopelistref == null) {
                _att_isotopelistref = (StringSTAttribute) attributeFactory.getAttribute("isotopeListRef", "atom");
                if (_att_isotopelistref == null) {
                    throw new RuntimeException("BUG: cannot process attributeGroupName : isotopeListRef probably incompatible attributeGroupName and attributeName");
                }
            }
            att = new StringSTAttribute(_att_isotopelistref);
            super.addRemove(att, value);
        }
        protected Element writeIntToXML(Element parent,int o,String name) throws Exception {
      Element node;
      if (DEBUG) {
        trace(new Throwable(),name);
      }
      m_CurrentNode=parent;
      node=addElement(parent,name,Integer.TYPE.getName(),true);
      node.appendChild(node.getOwnerDocument().createTextNode(new Integer(o).toString()));
      return node;
    }
        public void start() {
            System.out.println("***** "+getDescription());
            DomoMessage msg = getRuleDomoMessage(rule);
            scheduler.schedule(new RuleTask(brain, msg), new DailyIterator(hourOfDay, minute, second));
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ClassMapping getClassMappingByName(final String name) {
            Enumeration ec = _mapping.getRoot().enumerateClassMapping();
            while (ec.hasMoreElements()) {
                ClassMapping cm = (ClassMapping) ec.nextElement();
                String cmName = cm.getName();
                if ((cmName != null) && cmName.equals(name)) { return cm; }
            }
            return null;
        }
        @Override
    
        public void cbrt()
    
        {
    
            if (top < 1)
    
            {
    
                throw new EmptyStackException();
    
            }
    
            stack[top-1] = Math.cbrt(stack[top-1]);
    
        }
        public void testAddFolder(){
    		
    		int childs = lib.getChildCount(lib.getRoot());
    
    		//adding one folder
    		lib.addFolder(lib.getRoot(), folderTestName);
    		int childsExpected = lib.getChildCount(lib.getRoot());
    
    		assertEquals("Folder does not have been added to Library",childs+1,childsExpected);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static Predicate<Field> isAnnotatedWith(Class<? extends Annotation>... annotations) {
            return field -> {
                for (Class<? extends Annotation> annotation : annotations) {
                    if (field.isAnnotationPresent(annotation)) {
                        return true;
                    }
                }
                return false;
            };
        }
        public SubscriptionStateExceptionBean(ApplicationExceptionBean sup,Reason reason,String member){
      super(sup);
      setReason(reason);
      setMember(member);
    }
        public void testLabelWithMixedContentFails() throws Exception {
            checkValidationFailsFromFile("validation-xml/label-with-mixed-content-fails.xml",
                    "validation-error-invalid-content", new Object[] {
                    XFormElements.LABEL, "((PCDATA))?", XHTML2Elements.SPAN
            });
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getLaneOfs() { 
    		if (lanofs <= -99 && !xport) {
    			int lnx = sss.getFragIndex(this)+1;
    			lnx = (lnx < sss.getFragCount() - 1) ?
    				sss.useFrag(lnx).getLeftLanes() : 0 ;
    			 return  -inlane + lnx;
    		} else return lanofs;
    	}
        private void outputMessageBody(MailMessage message, PrintWriter pw) {
            for (Iterator it = message.getBodyLines().iterator(); it.hasNext(); ) {
                String line = (String) it.next();
                if (line.startsWith(".")) {
                    // lines starting with termination character . must be "byte-stuffed":
                    pw.print(".");
                }
                pw.print(line);
    			pw.print("\r\n");
            }
        }
        @Nullable
        public <T> T gauge(String name, Iterable<Tag> tags, @Nullable T obj, ToDoubleFunction<T> valueFunction) {
            Gauge.builder(name, obj, valueFunction).tags(tags).register(this);
            return obj;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JPanel getJPanelTerca12() {
    		if (jPanelTerca12 == null) {
    			jPanelTerca12 = new JPanel();
    			jPanelTerca12.setLayout(new GridBagLayout());
    			jPanelTerca12.setBounds(new Rectangle(0, 252, 100, 20));
    			jPanelTerca12.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.black));
    			jPanelTerca12.setBackground(SystemColor.activeCaptionText);
    		}
    		return jPanelTerca12;
    	}
        protected void addAlienSlidePropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add
    			(createItemPropertyDescriptor
    				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
    				 getResourceLocator(),
    				 getString("_UI_AlienSlideLink_AlienSlide_feature"),
    				 getString("_UI_PropertyDescriptor_description", "_UI_AlienSlideLink_AlienSlide_feature", "_UI_AlienSlideLink_type"),
    				 ExhibitionPackage.Literals.ALIEN_SLIDE_LINK__ALIEN_SLIDE,
    				 true,
    				 false,
    				 true,
    				 null,
    				 null,
    				 null));
    	}
        public Map<String, String> getUriVariablesForResumeFileParse(ResumeFileParseParams params, MultipartFile resume) {
    
    		if (params == null) {
    			params = ParamFactory.resumeFileParseParams();
    		}
    
    		Map<String, String> uriVariables = params.getParameterMap();
    
    		String bhRestToken = bullhornApiRest.getBhRestToken();
    		uriVariables.put(BH_REST_TOKEN, bhRestToken);
    		uriVariables.put(FORMAT, restFileManager.getFileParam(resume));
    		return uriVariables;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setAngle(double ang) {
            this.angle = ang;
            this.anglefix();
            this.dy = Math.sin(ang);
            this.dx = Math.cos(ang);
        }
        private void addToken(Request req, String hdr, String tok) throws ParseException {
    		int idx;
    		NVPair[] hdrs = req.getHeaders();
    		for (idx = 0; idx < hdrs.length; idx++) {
    			if (hdrs[idx].getName().equalsIgnoreCase(hdr))
    				break;
    		}
    		if (idx == hdrs.length)
    			// no such header, so add one
    			{
    			hdrs = Util.resizeArray(hdrs, idx + 1);
    			hdrs[idx] = new NVPair(hdr, tok);
    			req.setHeaders(hdrs);
    		} else
    			// header exists, so add token
    			{
    			if (!Util.hasToken(hdrs[idx].getValue(), tok))
    				hdrs[idx] = new NVPair(hdr, hdrs[idx].getValue() + ", " + tok);
    		}
    	}
        public String getValueParameter(int index){
    	String str;
    	if (index < valueParameters.size()) {
    	    str = (String)valueParameters.elementAt(index);
    	} else str = null;
    	return str;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void save(PosRole entity) {
    		LogUtil.log("saving PosRole instance", Level.INFO, null);
    		try {
    			entityManager.persist(entity);
    			LogUtil.log("save successful", Level.INFO, null);
    		} catch (RuntimeException re) {
    			LogUtil.log("save failed", Level.SEVERE, re);
    			throw re;
    		}
    	}
        public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
            
    if ("DynamicServiceSample".equals(portName)) {
                setDynamicServiceSampleEndpointAddress(address);
            }
            else 
    { // Unknown Port Name
                throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
            }
        }
        protected boolean matchesFilter(String input, String[] filter) {
    		for (String match : filter) {
    			if (!input.contains(match))
    				return false;
    		}
    		return true;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ICFLibMessageLog getLog() {
    		if( log != null ) {
    			return( log );
    		}
    		if( parser != null ) {
    			return( parser.getLog() );
    		}
    		return( null );
    	}
        public static String join ( String self , List < WordBlock > wordBlocks , String floatPart ) {
      StringBuilder wordBuilder = new StringBuilder ( ) ;
      int length = wordBlocks . size ( ) - 1 ;
      WordBlock firstBlock = wordBlocks . get ( 0 ) , start = 0 ;
      if ( length == 1 && firstBlock . get ( 0 ) . toString ( ) . equals ( "1" ) ) {
        wordBuilder . append ( "seribu" ) ;
        start = 1 ;
      }
      for ( int i = start ;
      i <= length ;
      i ++ ) {
        wordBuilder . append ( wordBlocks . get ( i ) . toString ( ) ) ;
        if ( ! wordBlocks . get ( i ) . toString ( ) . equals ( "" ) ) continue ;
        if ( i == length ) break ;
        wordBuilder . append ( self + TENS_TO [ ( length - i ) * 3 ] ) ;
      }
      return wordBuilder . toString ( ) + floatPart ;
    }
        public static boolean isTimeConflict(Time timeFrom,Time timeTo,Time otherTimeFrom,Time otherTimeTo){
      if (JKDateTimeUtil.isTimesEqaualed(timeFrom,otherTimeFrom) || JKDateTimeUtil.isTimesEqaualed(timeTo,otherTimeTo)) {
        return true;
      }
      if (timeFrom.after(otherTimeFrom) && timeFrom.before(otherTimeTo)) {
        return true;
      }
      if (timeTo.after(otherTimeFrom) && timeTo.before(otherTimeTo)) {
        return true;
      }
      if (timeFrom.before(otherTimeFrom) && timeTo.after(otherTimeTo)) {
        return true;
      }
      return false;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Mark getXMark() {
        		Mark mark = null;
        		try {
        			mark = createMark(sldEditor.getFilterFactory().createLiteralExpression("X"), 
    					getDefaultStroke(), getDefaultFill(), 
    					sldEditor.getFilterFactory().createLiteralExpression(new Double(6.0)), 
    					sldEditor.getFilterFactory().createLiteralExpression(new Double(0.0)));
        		}
        		catch (Exception e) {
        			System.out.println("Error creating literal expression within StyleFactoryImpl");
        		}
           	return mark;
        }
        public void delete() {
    
    		for(int i = 1; i < m_nextNo; i++) {
    
    			new File(m_fileName + "_" + i).delete();
    
    		}
    
    		m_nextNo = 1;
    
    	}
        private void writeNextElement(StringBuilder sb, String nextElement) {
    		if (quotechar !=  NO_QUOTE_CHARACTER) {
    			sb.append(quotechar);
    		}
    		for (int j = 0; j < nextElement.length(); j++) {
    			char nextChar = nextElement.charAt(j);
    			if (escapechar != NO_ESCAPE_CHARACTER && nextChar == quotechar) {
    				sb.append(escapechar).append(nextChar);
    			}
    			else if (escapechar != NO_ESCAPE_CHARACTER && nextChar == escapechar) {
    				sb.append(escapechar).append(nextChar);
    			}
    			else {
    				sb.append(nextChar);
    			}
    		}
    		if (quotechar != NO_QUOTE_CHARACTER) {
    			sb.append(quotechar);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void ismAddSubCustomer(Customer subCustomer) {
    		if(subCustomer != null) {
    			getSubCustomers().add(subCustomer);
    		}
    	}
        public void setPositionEng(String string) {
    		if(string == null)
    			positionEng = "";
    		else
    			positionEng = string;
    	}
        public static void writeInt(DataOutputStream dis,boolean isBigEndian,int val) throws IOException {
      if (!isBigEndian) {
        writeLittleEndianInt(dis,val);
      }
     else {
        dis.writeInt(val);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void checkDeleteExistingFile(String filename){
      Log.i(TAG,">>>>>>>>>>>>>>>>>>checkDeleteExistingFile  = " + filename);
      if (filename != null) {
        File temp=new File(filename);
        if (temp != null && temp.exists()) {
          temp.delete();
        }
      }
    }
        public void setDoubleValue(Double value) throws NOMException {
    	if (element!=null) {
    	    element.setDoubleAttribute(name, value);
    	} else {
    	    number_value=value;
    	}
        }
        public void populateAntiHostList(PTContainer c,List<String> antiHosts){
      for (  PTContainer container : c.getStrictAntiPrefs()) {
        if (antiAffinityMapping.containsKey(container)) {
          antiHosts.add(antiAffinityMapping.get(container));
        }
     else {
          String antiHost=getHostForContainer(container);
          if (antiHost != null) {
            antiHosts.add(antiHost);
          }
        }
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void drawString(String string, int x, int y) {
            if (string == null) return;
            byte[] newstr = string.getBytes();
            pDrawBytes(drawable, gc, fontmetrics.XFontSet, newstr, newstr.length, x + originX, y + originY);
        }
        public boolean equals(Object o) {
    	if (o == this)
    	    return true;
    	if (!(o instanceof MBeanOperationInfo))
    	    return false;
    	MBeanOperationInfo p = (MBeanOperationInfo) o;
    	return (p.getName().equals(getName()) &&
    		p.getReturnType().equals(getReturnType()) &&
    		p.getDescription().equals(getDescription()) &&
    		p.getImpact() == getImpact() &&
    		Arrays.equals(p.fastGetSignature(), fastGetSignature()) &&
                    p.getDescriptor().equals(getDescriptor()));
        }
        public void shutDown() {
            // don't shut down twice!
            if (!conditionShutDownCaughtTerm) {
                LOGGER.info(getName() + " shutting down " + getClass().getSimpleName() + " ...");
                conditionShutDownCaughtTerm = true;
                // is this thread waiting for some player to call back?
                try {
                    interrupt();
                }
                catch(SecurityException s) {
                    LOGGER.error(getName() + " did not wake up", s);
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JMenuItem getJCopyPopupItem() {
    		if (jCopyPopupItem == null) {
    			jCopyPopupItem = new JMenuItem();
    			jCopyPopupItem.setText("Copy");
    			jCopyPopupItem.addActionListener(new java.awt.event.ActionListener() {
    				public void actionPerformed(java.awt.event.ActionEvent e) {
    					copy(); // TODO Auto-generated Event stub actionPerformed()
    				}
    			});
    		}
    		return jCopyPopupItem;
    	}
        public void selectedByList(java.lang.Object target) {
            Util.pushTrace("TestGUI(activatedByList)");
            Util.db("Selected object = " + target);
    
            if (ignoreRequest_) {
                Util.db("Ignoring request to change object");
                return;
            }
    
            setAll(false);
    
            Offer o = ((TraderAndOffer) target).offer;
            // printAllProperties(o);
            propertySearchDisplay.setPropertiesFor(o);
            propertySearchDisplay.setVisible(true);
    
            setAll(true);
    
            Util.popTrace();
        }
        public int countWhere(String where) throws SQLException {
            String sql = "select count(*) as MCOUNT from GAMEDATA " + where;
            Connection c = null;
            Statement pStatement = null;
            ResultSet rs =  null;
            try {
                int iReturn = -1;
                c = getConnection();
                pStatement = c.createStatement();
                rs =  pStatement.executeQuery(sql);
                if (rs.next()) {
                    iReturn = rs.getInt("MCOUNT");
                }
                if (iReturn != -1)
                    return iReturn;
            } finally {
                getManager().close(pStatement, rs);
                freeConnection(c);
            }
           throw new SQLException("Error in countWhere");
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static void initializeVariables ( MLModel self ) {
      self . globalVars = new HashMap < > ( ) ;
      for ( String mtfDimensionName : ( String [ ] ) ( self . layoutValidator . getSplittableMtfDimensionNames ( ) ) ) {
        for ( String meshDimensionName : ( String [ ] ) ( self . layoutValidator . getMeshDimensionNameToSize ( ) ) ) {
          String name = globalVarName ( mtfDimensionName , meshDimensionName ) ;
          self . globalVars . put ( new Pair < > ( mtfDimensionName , meshDimensionName ) , ( self . model . newBoolVar ( name ) ) ) ;
        }
      }
      self . localVars = new HashMap < > ( ) ;
      for ( int mtfDimensionSet : self . mtfDimensionSets ) {
        self . localVars . put ( mtfDimensionSet , new HashMap < > ( ) ) ;
        for ( Assignment assignment : self . assignments . get ( mtfDimensionSet ) ) {
          String name = localVarName ( mtfDimensionSet , assignment ) ;
          self . localVars . get ( mtfDimensionSet ) . put ( name , ( self . model . newBoolVar ( name ) ) ) ;
        }
      }
      int memoryUpperBound = 0 ;
      for ( String tensorName : self . graph . getAllTensorNames ( ) ) {
        if ( self . graph . isTensorOnCanonicalDevice ( tensorName ) ) {
          memoryUpperBound += ( int ) self . graph . getTensorSize ( tensorName ) ;
        }
      }
      self . memoryVar = self . model . newIntVar ( 0 , memoryUpperBound , "z" ) ;
    }
        public Collection getChildrenFeatures(Object object) {
    		if (childrenFeatures == null) {
    			super.getChildrenFeatures(object);
    			childrenFeatures.add(StrutsConfig11Package.eINSTANCE.getDataSourceType_SetProperty());
    		}
    		return childrenFeatures;
    	}
        public void init() {
    	Properties props;
    
    	String leaguefile = getParameter("Leaguefile");
    	if(leaguefile != null) {
    	  props = readLeaguefile(leaguefile); // read from options file
    	}
    	else {
    	  props = readParams(); // read Applet params
    	  leaguefile = "param";
    	}
    
    	setup(leaguefile, props);
    
       // if no GUI -> build it now
    	if( !guiBuilt_ ) {
    	  buildGUI();
    	}
    
    	showLeague(leaguefile);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override public void onBatchComplete(){
      int batchId=mBatchId;
      mBatchId++;
      SystraceMessage.beginSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE,"onBatchCompleteUI").arg("BatchId",batchId).flush();
      try {
        mUIImplementation.dispatchViewUpdates(batchId);
      }
      finally {
        Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE);
      }
    }
        protected InputStream retrievePersistanceInStream() throws IOException, CancelledException {
            javax.swing.JFileChooser jfcChooser = getChooser();
    
            do {
                jfcChooser.getSelectedFile();
    
                if (jfcChooser.showOpenDialog(null) == javax.swing.JFileChooser.CANCEL_OPTION) {
                    throw new CancelledException("File choosing cancelled.");
                }
    
            }
            while (!jfcChooser.getSelectedFile().exists());
    
            return new java.io.FileInputStream(jfcChooser.getSelectedFile());
        }
        protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) {
            final Observer<? super V> observer = downstream;
            final SimplePlainQueue<U> q = queue;
    
            if (wip.get() == 0 && wip.compareAndSet(0, 1)) {
                if (q.isEmpty()) {
                    accept(observer, value);
                    if (leave(-1) == 0) {
                        return;
                    }
                } else {
                    q.offer(value);
                }
            } else {
                q.offer(value);
                if (!enter()) {
                    return;
                }
            }
            QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void run() {
    		showStatus( getAppletInfo() );
    
    		if ( spectrum == null ) {
    			try {
               			spectrum = new Spectrum( this );
    				readParameters();
    			}
    			catch ( Exception e ) {
    				showStatus( "Caught IO Error: " + e.toString() );
    			}
    		}
    
    		if ( spectrum != null ) {
    			spectrum.execute();
    		}
    	}
        private CType getSumType(RSummary sum) {
        XTypedSelectElem    elem;
    
        if (sum.getField().getQuery() == null) {
          return getXKjcType(sum.getField().getDatatype());
        }
    
        elem = getSelectElem(sum.getField());
    
        return toNullableType(elem.getVariableDefinition().getType());
      }
        private void prettyPrintLineage(String name, int spaces) {
    	    for ( int i=0; i<spaces; i++ ){
    			System.out.print(" ");
    		}
    		FamilyMember person = _ftree.get(name);
    		if ( person == null ) {
    		    return;
    		}
    		System.out.println( person );
    		if ( person.getChildren().size() == 0 ) {
    			return;
    		}
    		//Recursivley prints the children lineage.
    		List<FamilyMember> children = person.getChildren();
    		for ( FamilyMember kid:children ){
    			prettyPrintLineage( kid.getName(), spaces+3 );
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void addNewLine(){
      if (addLineDialog == null) {
        addLineDialog=new AddParallelLineDialog();
      }
      addLineDialog.setChartEngine(engine);
      addLineDialog.showDialog();
      if (horizontalLineRadiobutton.isSelected()) {
        setHorizontalLineSelected();
      }
     else   if (verticalLineRadiobutton.isSelected()) {
        setVerticalLineSelected();
      }
    }
        public void setConnections(Object handle, Collection elems) {
            if (handle instanceof MAssociation && elems instanceof List) {
                ((MAssociation) handle).setConnections((List) elems);
                return;
            }
            if (handle instanceof MLink && elems instanceof List) {
                ((MLink) handle).setConnections(elems);
                return;
            }
            throw new IllegalArgumentException("handle: " + handle);
        }
        public int query(String statement){
    		
    		int insertId = 0;
    		Statement stmt;
    		try{
    			stmt = con.createStatement();
    			stmt.executeUpdate(statement);
    			ResultSet rs = stmt.executeQuery("SELECT LAST_INSERT_ID() AS ID");
    			if(rs.first()){
    				insertId = rs.getInt("id");
    			}
    
    		}
    		catch (SQLException e){
    			Debug.out("DBConnect.query() - Possibly problems with authentication...!");
    			e.printStackTrace();
    		}
    		return insertId;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    static public ECollection createCollection(ECollection necol){
    		ECollection ecol = null;
    		
    		TCollections tcol = new TCollections();
    		tcol.setName(necol.getColname());
    		tcol.setDescription(necol.getDescription());
    		try {
                ecol = getECollection(tcol.create());
            } catch (MyDMException e) {
                e.printStackTrace();
            }
    		
    		return ecol;
    	}
        protected void renderTableEnd(UIComponent table, ResponseWriter writer) throws IOException {
    
    		writer.endElement("table");
    		writer.writeText("\n", table, null);
    
    	}
        private String convClassToFileName(String classRepresentation) {
    
        return classRepresentation.replace('.', '/') + CLASS_EXT;
        
        /* do not use this; JarFile.getEntry("filename") uses '/' to
           separate path even in Windows. Possible bug in Java? */
        //return classRepresentation.replace('.', File.separatorChar) + CLASS_EXT;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String [ ] getFilePaths ( Table self , int [ ] id_list ) {
      if ( id_list == null ) return new String [ 0 ] ;
      try {
        String [ ] path_array = self . _table [ id_list [ 0 ] ] . path ;
        if ( id_list . length == 0 ) {
          System . out . println ( "IndexOutOfBoundsException " + self . _table . length + " " + id_list ) ;
          path_array = new String [ 0 ] ;
        }
        return path_array ;
      }
      catch ( ArrayIndexOutOfBoundsException e ) {
        System . out . println ( "ArrayIndexOutOfBoundsException " + self . _table . length + " " + id_list ) ;
        path_array = new String [ 0 ] ;
      }
      return new String [ 0 ] ;
    }
        public void evictAll(){
      List<Connection> connections;
    synchronized (this) {
        connections=new ArrayList<Connection>(this.connections);
        this.connections.clear();
      }
      for (  Connection connection : connections) {
        Util.closeQuietly(connection);
      }
    }
        protected void printElementOn(int index, PrintWriter oo) {
    		Heaper value = fetchValue(index);
    		if (value != null) {
    			value.printOn(oo);
    		} else {
    			oo.print("null");
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String durationToN1qlFormat(long duration, TimeUnit unit) {
            switch (unit) {
                case NANOSECONDS:
                    return duration + "ns";
                case MICROSECONDS:
                    return duration + "us";
                case MILLISECONDS:
                    return duration + "ms";
                case SECONDS:
                    return duration + "s";
                case MINUTES:
                    return duration + "m";
                case HOURS:
                    return duration + "h";
                case DAYS:
                default:
                    return unit.toHours(duration) + "h";
            }
        }
        public void setParameter(it.businesslogic.ireport.crosstab.CrosstabParameter tmpParameter) {
            this.jTextFieldName.setText( new String(tmpParameter.getName()));
            this.jComboBoxType.setSelectedItem( new String(tmpParameter.getClassType()));
            this.jRTextExpressionAreaDefaultExpression.setText( new String(tmpParameter.getParameterValueExpression()));                       
        }
        public void testretObject() throws java.lang.Exception {
    
            OMFactory factory = OMAbstractFactory.getOMFactory();
            // lets create the namespace object of the Article element
            OMNamespace ns = factory.createOMNamespace("http://www.serverside.com/articles/introducingAxiom", "article");
            // now create the Article element with the above namespace
            OMElement articleElement = factory.createOMElement("Article", ns);
    
            // comment out this test case since adb now uses an object to represents the any type
            // OMElement ret = stub.retObject(articleElement);
            // assertNotNull(ret);
            // assertEquals(ret.toString(), articleElement.toString());
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setCentre(Point p) {
            try {
                Position newCentre = toPosition(p);
                if (newCentre != null) {
                    centre = newCentre;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        private void breakSubSorterLoop() {
    		GridViewerColumnComparator loopPoint = findSubsorter(this);
    		if (loopPoint!=null) {
    			loopPoint.clearSubSorter();
    		}
    	}
        public SavePlotAction(final GuiComponent component){
      super("Save");
      if (component == null) {
        throw new IllegalArgumentException("Desktop component must not be null");
      }
      this.component=component;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void removeCumulatedStats(ProducerDecoratorBean decorator) {
            if (decorator == null) {
                LOGGER.warn("Decorator is empty");
                return;
            }
    
            for (ProducerAO producer : decorator.getProducers()) {
                for (Iterator<StatLineAO> statLineIterator = producer.getLines().listIterator(); statLineIterator.hasNext(); ) {
                    if (CUMULATED_STAT_NAME_VALUE.equals(statLineIterator.next().getStatName())) {
                        statLineIterator.remove();
                    }
                }
            }
        }
        public void completeDraw( Graphics2D g2d ) {
            coosy.updateDiagramAxis();
            coosy.drawDiagramCoosy( g2d );
            if ( graph != null ) {
                graph.updateDiagramAxis();
                graph.drawDiagramGraph( g2d );
            }
        }
        private void buildST33HeaderEnd(byte[] theBuffer) throws JpxiException {
    	
    	System.arraycopy(
    		theBuffer,
    		0,
    		getST33Header(),
    		getScanHeaderOffSet(),
    		getST33Header().length - getScanHeaderOffSet());
    
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void pull ( Repository self , String remote , String revision ) {
      remote = remote != null ? remote : self . getRemote ( ) ;
      if ( self . create ( ) && ( remote . equals ( self . getRemote ( ) ) || ! remote . equals ( self . getDefaultPullRemote ( ) ) ) ) {
        logger . info ( "Skipping pull from default remote because we just created the local " + self . getFriendlyName ( ) + " repository." ) ;
        return ;
      }
      if ( ! ( remote != null || self . isDefaultPullRemote ( ) ) ) {
        logger . info ( "Skipping pull (no default remote is configured)." ) ;
        return ;
      }
      int updateLimit = Integer . parseInt ( System . getProperty ( UPDATE_VARIABLE , "0" ) ) ;
      if ( updateLimit > 0 && self . getLastUpdated ( ) >= updateLimit ) {
        logger . info ( "Skipping pull due to update limit." ) ;
        return ;
      }
      Timer timer = new Timer ( ) ;
      logger . info ( "Pulling changes from " + remote != null ? remote : "default remote" ) ;
      logger . info ( "Pulling changes from " + self . getFriendlyName ( ) + " into local " + self . getFriendlyName ( ) + " repository (" + formatPath ( self . getLocal ( ) ) + ") .." ) ;
      context . execute ( new PullCommand ( remote , revision ) ) ;
      logger . debug ( "Took " + timer + " to pull changes from remote " + self . getFriendlyName ( ) + " repository." ) ;
      self . markUpdated ( ) ;
    }
        public static void test(long n,long N,long low,int chunkSize,int times){
      long[] values=new long[chunkSize];
      long chunks=n / chunkSize;
      cern.colt.Timer timer=new cern.colt.Timer().start();
      for (long t=times; --t >= 0; ) {
        RandomSampler sampler=new RandomSampler(n,N,low,cern.jet.random.AbstractDistribution.makeDefaultGenerator());
        for (long i=0; i < chunks; i++) {
          sampler.nextBlock(chunkSize,values,0);
        }
        int toDo=(int)(n - chunkSize * chunks);
        if (toDo > 0) {
          sampler.nextBlock(toDo,values,0);
        }
      }
      timer.stop();
      System.out.println("single run took " + timer.elapsedTime() / times);
      System.out.println("Good bye.\n");
    }
        public boolean startServer(){
            try {
                setServerClassPaths();
                setConnectionPaths();            
                bootServer(createJbossLaunchConfiguration());
                boolean result = waitForDeploy();
                if(waitForDeploy()){
                    _isAlive = true;
                    LDPlayerPlugin.getDefault().logInfo(Messages.getString("uk.ac.reload.ldplayer.server.SetupConfiguration.3")); 
                }
                else{
                    _isAlive = false;
                    LDPlayerPlugin.getDefault().logInfo(Messages.getString("uk.ac.reload.ldplayer.server.SetupConfiguration.1"));
                }
                return result;    
    			
            }
            catch(Exception ex) {
    			LDPlayerPlugin.getDefault().logError(Messages.getString("uk.ac.reload.ldplayer.server.SetupConfiguration.5"), ex); 
                return false;
            }        
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void buildPKPDfile(IProgressMonitor monitor) {
          monitor.beginTask("Building PKPD project", 4);
    
          if (!deleteAuditMarkers(getProject()))
             return; 
          
          if (checkCancel(monitor))
             return;
          
          //Get and parse pkpd.xml from file
    //      CM 02008-07-25: Commented out because it wasn't used
    //      Map pluginKeys = scanPlugin(getProject().getFile("pkpd.xml"));
          monitor.worked(1);
          
          if (checkCancel(monitor))
             return;
          
          // TODO: Build PKPD derived resources here
          
          monitor.done();
       }
        public static void manipulate ( IPopoInstance self , IStoredInstance storedInstance , IComponentInstance componentInstance ) {
      self . setIPopoInstance ( storedInstance ) ;
      Set < Boolean > flagsToGenerate = new HashSet < Boolean > ( ) ;
      if ( storedInstance . getContext ( ) . getProperties ( ) != null ) {
        flagsToGenerate . add ( true ) ;
      }
      if ( storedInstance . getContext ( ) . hasHiddenProperties ( ) ) {
        flagsToGenerate . add ( false ) ;
      }
      for ( Boolean publicFlag : flagsToGenerate ) {
        Method getter = self . getFieldPropertyGenerator ( publicFlag ) ;
        Method setter = self . getMethodsNames ( publicFlag ) ;
        String getterName = self . getMethodNames ( publicFlag ) [ 0 ] ;
        String setterName = self . getMethodNames ( publicFlag ) [ 1 ] ;
        BeanUtils . setProperty ( componentInstance , getterName , getter . getName ( ) ) ;
        BeanUtils . setProperty ( componentInstance , setterName , setter . getName ( ) ) ;
      }
    }
        public void testNonLatinProcessName() {
        // temporarily exclude oracle due to qa database 
        String database = System.getProperty("database");
        if (database != null && database.startsWith("oracle"))
          return;
    
        // "Lev Trotskij"
        deployJpdlXmlString("<process name='\u041B\u0435\u0412 \u0422\u0440\u043E\u0446\u043A\u0438\u0439'>" +
          "  <start/>" +
          "</process>");
    
        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()
          .processDefinitionKey("\u041B\u0435\u0412_\u0422\u0440\u043E\u0446\u043A\u0438\u0439")
          .uniqueResult();
    
        assertEquals("\u041B\u0435\u0412 \u0422\u0440\u043E\u0446\u043A\u0438\u0439", processDefinition.getName());
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void walkUpDirs ( @ NotNull File file ) {
      File prevFile = null ;
      File currentFile = file ;
      while ( currentFile != prevFile ) {
        walkUpDirs ( currentFile ) ;
        prevFile = currentFile ;
        currentFile = currentFile . getParentFile ( ) ;
      }
    }
        private Vector buildConfigNodes(Node node) {
    	try {
    	    console.logEntry();
    
    	    Vector results = new Vector();
    	    Node temp = null;
    	    NodeList children = node.getChildNodes();
    
    	    for (int i = 0; i < children.getLength(); i++) {
    		temp = children.item(i);
    		if (temp.getNodeType() == Node.ELEMENT_NODE) {
    		    results.add(buildSingleConfigNode(temp));
    		}
    	    }
    
    	    return results;
    	} finally {
    	    console.logExit();
    	}
        }
        public void mapSheet2Excel(List<MapSheetWrapper> sheetWrappers, String templatePath, OutputStream os)
                throws Excel4JException {
    
            try (SheetTemplate sheetTemplate = exportExcelByMapHandler(sheetWrappers, templatePath)) {
                sheetTemplate.write2Stream(os);
            } catch (IOException e) {
                throw new Excel4JException(e);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static double log10(final double x) {
            final double hiPrec[] = new double[2];
    
            final double lores = log(x, hiPrec);
            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
                return lores;
            }
    
            final double tmp = hiPrec[0] * HEX_40000000;
            final double lna = hiPrec[0] + tmp - tmp;
            final double lnb = hiPrec[0] - lna + hiPrec[1];
    
            final double rln10a = 0.4342944622039795;
            final double rln10b = 1.9699272335463627E-8;
    
            return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
        }
        public static BigDecimal multiply(final BigDecimal x,double factor){
      BigDecimal multiplicand=new BigDecimal(factor,MathContext.DECIMAL64);
      BigDecimal multiplicationResult=x.multiply(multiplicand);
      return multiplicationResult;
    }
        public void flip(){
    		flipped = !flipped;
    		if(flipped){
    			current = imageType.getImage();
    		} else {
    			current = backOfCard;
    		}
    		repaint();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void initInstance() {
    		plugin = this;
    		imageCache = new HashMap();
    
    		// Create and register a new logging listener
    		// mapped to Eclipse's plugin log
    		ProfilerLog.addListener(new ProfilerLogListener());
    		
    		try {
    			resourceBundle= ResourceBundle.getBundle("jmechanic.eclipse.profiler.ProfilerPluginResources");
    		} catch (MissingResourceException x) {
    			resourceBundle = null;
    		}
    	}
        @ NotNull public static List < VirtualFile > listRecursivelyViaWalking ( @ NotNull VirtualFile top ) {
      for ( VirtualFile dir : VfsUtilCore . getChildren ( top , false ) ) {
        ContainerUtil . addAll ( dir , ( new VirtualFileVisitor ( ) ) . visitFile ( dir ) ) ;
      }
      return Collections . emptyList ( ) ;
    }
        public void mouseClicked(java.awt.event.MouseEvent e) {
    		if (this.isEnabled()) {
    			if ((popupMenu == null || popupMenu.getComponentCount() == 0) && mouseInPopupArea) {
    				actionPerformed(new ActionEvent(this, 0, ""));
    			} else if (mouseInPopupArea || e.isPopupTrigger()) {
    				popupMenu.setVisible(true);
    				popupMenu.show(this, 0, getHeight());
    			}
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
            if ("SemanticBindingPortTypePort".equals(portName)) {
                setSemanticBindingPortTypePortEndpointAddress(address);
            }
            else { // Unknown Port Name
                throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
            }
        }
        public void setFocus() {
    		final Component focus = componentSource.first();
    		if (focus != null) {
    			focus.add(new FocusBehavior());
    		}
    	}
        public void windowLostFocus(WindowEvent e) {
    
    		if ((e.getOppositeWindow()==null)||(e.getOppositeWindow().getOwner()!=this)) {
    			hideFrame();
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void save() throws IOException {
            Writer out = getOutputWriter();
    
            Iterator i = groups.values().iterator();
    
            while (i.hasNext()) {
                NNTPNewsrcGroup group = (NNTPNewsrcGroup) i.next();
                group.save(out);
            }
    
            out.close();
        }
        public void createPackageContents() {
    		if (isCreated) return;
    		isCreated = true;
    
    		// Create classes and their features
    		accountEClass = createEClass(ACCOUNT);
    		createEAttribute(accountEClass, ACCOUNT__NAME);
    		createEAttribute(accountEClass, ACCOUNT__DESCRIPTION);
    		createEReference(accountEClass, ACCOUNT__TRANSACTIONS);
    		createEAttribute(accountEClass, ACCOUNT__BALANCE);
    
    		mandateEClass = createEClass(MANDATE);
    		createEAttribute(mandateEClass, MANDATE__NAME);
    		createEAttribute(mandateEClass, MANDATE__DESCRIPTION);
    		createEReference(mandateEClass, MANDATE__ACCOUNTS);
    
    		transactionEClass = createEClass(TRANSACTION);
    		createEAttribute(transactionEClass, TRANSACTION__DESCRIPTION);
    		createEAttribute(transactionEClass, TRANSACTION__AMOUNT);
    		createEAttribute(transactionEClass, TRANSACTION__CATEGORY);
    	}
        public double getScore(Context context, Criteria criteria) throws Exception {
          Signature match = signature.getSignature(context);
          
          for(String name : criteria) {
             Label label = criteria.resolve(name);
             
             if(label != null) {
                Parameter value = match.getParameter(name);
                Contact contact = label.getContact();
    
                   if(value == null) {
                   Collection<String> options = label.getNames(context);
                   
                   for(String option : options) {
                      value = match.getParameter(option);
                      
                      if(value != null) {
                         break;
                      }
                   }
                }
                if(contact.isReadOnly()) {
                   if(value == null) {
                      return -1.0;
                   }               
                }
             }
          }
          return getPercentage(context, criteria);
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setExtraElement(org.apache.axiom.om.OMElement param){
                                
                                    clearAllSettingTrackers();
                                
                                           if (param != null){
                                              //update the setting tracker
                                              localExtraElementTracker = true;
                                           } else {
                                              localExtraElementTracker = false;
                                                  
                                           }
                                       
                                                this.localExtraElement=param;
                                        
    
                                   }
        protected void translateClassDescription( Element parent, OntClass classDescr, Model source ) {
            if (classDescr.isUnionClass()) {
                translateUnionClass( parent, classDescr, source );
            }
            else if (classDescr.isIntersectionClass()) {
                translateIntersectionClass( parent, classDescr, source );
            }
            else if (classDescr.isComplementClass()) {
                translateComplementClass( parent, classDescr, source );
            }
            else if (classDescr.isEnumeratedClass()) {
                translateEnumeratedClass( parent, classDescr, source );
            }
            else if (classDescr.isRestriction()) {
                translateRestrictionClass( parent, classDescr, source );
            }
        }
        private String formatValue(java.lang.String newValue) {
    
    	String myReturnString = "";
    	
    	if (newValue==null) return null;
    	else
    		for (int i=0; i<newValue.length(); i++) {
    
    			// --- Change '>' & '<' with the HTML symbole
    			if (newValue.charAt(i)=='\'')
    				myReturnString += "&#39";
    			else if (newValue.charAt(i)=='\"')
    				myReturnString += "&#34";
    			else 
    				myReturnString += newValue.charAt(i);
    		}
    
    
    	return myReturnString;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void deleteUserData(String user, String domain) {
            String path=parent.getProperty("webmail.data.path")+System.getProperty("file.separator")+
                domain+System.getProperty("file.separator")+user+".xml";
            File f=new File(path);
            if(!f.canWrite() || !f.delete()) {
                log.error("SimpleStorage: Could not delete user "+user+" ("+path+")!");
            } else {
                log.info("SimpleStorage: Deleted user "+user+"!");
            }
            user_cache.remove(user+user_domain_separator+domain);
        }
        @Override public boolean equals(Object o){
      if (this == o) {
        return true;
      }
      if (o == null || this.getClass() != o.getClass()) {
        return false;
      }
      Fact other=(Fact)o;
      if (this.triple == null) {
        if (other.triple == null) {
          return this.getDerivation().equals(other.getDerivation());
        }
     else {
          return false;
        }
      }
     else {
        return this.triple.equals(other.triple);
      }
    }
        public InvocationHandler setInvocationHandler(InvocationHandler handler) {
            InvocationHandler old = delegate;
            delegate = handler;
            return old;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void showOutput() {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    while (true) {
                        EntryMarks ev;
                        synchronized (forOutput) {
                            ev = forOutput.poll();
                        }
                        if (ev == null) {
                            // end of queue
                            return;
                        }
                        if (!mController.isEntryChanged(ev)) {
                            mController.setEntryMarks(ev.entryIndex, ev.builder, ev.result, markerIndex);
                        }
                    }
                }
            });
        }
        public void addOutline(OutlineItem outlineItem) {
        if (outlineItems == null) {
          outlineItems = new ArrayList<OutlineItem>();
        }
        outlineItems.add(outlineItem);
      }
        private void injectProperties(BeanDefinition definition, Object beanInstance) {
    		Dependency[] dependencies = definition
    				.getDependencies(DependencyTarget.Property);
    		Object[] resolved = this.resolveDependencies(dependencies);
    
    		ObjectProxy<Object> bean = Reflect.on(beanInstance);
    
    		for (int i = 0; i < resolved.length; i++) {
    			String setter = "set"
    					+ StringUtils.capitalize(dependencies[i].getPropertyName());
    
    			bean.method(setter, dependencies[i].getType()).invoke(resolved[i]);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void invalidateElementBox(final Element element) {
    
            BlockBox elementBox = (BlockBox) this.findInnermostBox(new IBoxFilter() {
                public boolean matches(Box box) {
                    return box instanceof BlockBox 
                    && box.getElement() != null
                    && box.getStartOffset() <= element.getStartOffset() + 1
                    && box.getEndOffset() >= element.getEndOffset();
                }
            });
            
            if (elementBox != null) {
                elementBox.invalidate(true);
            }
        }
        public InputStream getBinaryStream() throws SQLException {
    
            final byte[] ldata = data;
    
            checkValid(ldata);
    
            return new ByteArrayInputStream(ldata);
        }
        public void onModuleLoad() {
            Editor editor = new Editor();
            editor.setTextPixelSize(400, 300);
            RootPanel.get().add(editor);
            editor.setHTML("This is a sample text that you can edit. If you want edit this text then you need to click on the edit link.");
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void ensureMutatorFor(Map<String, SetGetPair> mutators, String property) {
    		if (!mutators.containsKey(property)) {
    			mutators.put(property, new SetGetPair());
    		}
    	}
        public void incrementElementsCount(int amount){
      if (this.maxElements <= 0) {
        return;
      }
      this.elements+=amount;
      if (this.elements > this.maxElements) {
        throw new RuntimeException("Tried to read NBT tag with too many elements, " + this.elements + " > "+ this.maxElements);
      }
    }
        public void addTables(Collection<Table> tables) {
            for (Iterator<Table> it = tables.iterator(); it.hasNext();) {
                addTable(it.next());
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setPersistenceClass(String persistenceClass) throws Exception {
    		this.persistenceClass = persistenceClass;
    		if (persistenceClass != null) {
    			setStore(PersistenceUtils.getPersistenceStore(this,
    					persistenceClass));
    		} else {
    			setStore(null);
    		}
    	}
        SchemaFuture installHandlers(XMLReader in, SchemaReceiverImpl sr) {
        Handler h = new Handler(sr);
        in.setContentHandler(h);
        return h;
      }
        public int count(String where) {
            if (where==null) where="";
            if (where.indexOf("MMNODE")!=-1) {
                where=convertMMNode2SQL(where);
            } else {
                where=QueryConvertor.altaVista2SQL(where,database);
            }
            String query="SELECT Count(*) FROM "+getFullTableName()+" "+where;
            return basicCount(query);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String parse(String str, final CommandLineParser.CallbackHandler handler, ParsingState initialState) throws CommandFormatException {
            if(str == null) {
                return null;
            }
            final ParsingStateCallbackHandler callbackHandler = getCallbackHandler(handler);
            return StateParser.parse(str, callbackHandler, initialState);
        }
        public void nameColumns(String tableName, JdbcNameGenerator nameGen) {
            if (col.name == null) {
                col.name = nameGen.generateFieldColumnName(tableName, fmd.name, false);
            } else if (!nameGen.isColumnInTable(tableName, col.name)) {
                try {
                    nameGen.addColumnName(tableName, col.name);
                } catch (IllegalArgumentException e) {
                    throw BindingSupportImpl.getInstance().runtime(
                        "Invalid jdbc-column-name for field " + fmd.name + ": " +
                        e.getMessage() + "\n" + getContext());
                }
            }
        }
        public void displayMessage( Component component, Object aMessage, String aTitle, int type ) {
    		// The isDisplayingMessage flag is potentially useful for focusLost event handlers
    		// which may want to ignore events caused by error messages, for example.
    		synchronized( this ) {
    			if (isDisplayingMessage) {
    				return;
    			}
    			isDisplayingMessage = true;
    			JOptionPane.showMessageDialog(component, aMessage, aTitle, type );
    			isDisplayingMessage = false;
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override public boolean[] existsAll(List<Get> gets) throws IOException {
      boolean[] ret=new boolean[gets.size()];
      int i=0;
      for (  boolean b : exists(gets)) {
        ret[i++]=b;
      }
      return ret;
    }
        public void setBackgroundProcessingInd(int backgroundProcessingInd) {
    		if (!(this.backgroundProcessingInd == backgroundProcessingInd)) {
    			int oldbackgroundProcessingInd= 0;
    			oldbackgroundProcessingInd = this.backgroundProcessingInd;
    			this.backgroundProcessingInd = backgroundProcessingInd;
    			setModified("backgroundProcessingInd");
    			firePropertyChange(String.valueOf(APPLICATIONCONTROLS_BACKGROUNDPROCESSINGIND), oldbackgroundProcessingInd, backgroundProcessingInd);
    		}
    	}
        public void setRows(Location location, Set changedPaths) {
        this.location     = location;
        this.changedPaths = changedPaths;
    
        if(changedPaths.size() > 0) {
          for(Object path : changedPaths) {
            boolean enabled = location.getBranch().equals(FileTableRow.parseURL(path.toString(),
                                                                                FileTableRow.PARSE_URL_BRANCH));
    
            enableItems(enabled, UPDATE_CS, REVERT_CS);
    
            break;
          }
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static Schema loadSchema ( String path ) throws IOException {
      try ( InputStream json = new FileInputStream ( path ) ) {
        Schema schema = Schema . parseFrom ( json ) ;
        return schema ;
      }
    }
        private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {
      ObjectInputStream.GetField f=s.readFields();
      hgap=f.get("hgap",0);
      vgap=f.get("vgap",0);
      if (f.defaulted("vector")) {
        Hashtable<String,Component> tab=(Hashtable)f.get("tab",null);
        vector=new Vector<>();
        if (tab != null && !tab.isEmpty()) {
          for (Enumeration<String> e=tab.keys(); e.hasMoreElements(); ) {
            String key=(String)e.nextElement();
            Component comp=(Component)tab.get(key);
            vector.add(new Card(key,comp));
            if (comp.isVisible()) {
              currentCard=vector.size() - 1;
            }
          }
        }
      }
     else {
        vector=(Vector)f.get("vector",null);
        currentCard=f.get("currentCard",0);
      }
    }
        private void parseSize(UWP uwp) {
    		int			size = uwp.getDiameter();
    		
    		if (size == 0) {
    			planetType = PlanetType.Cerean;
    		}
    		
    		radius = size * 800;
    
    		// Following sets day length to be some whole number of minutes.
    		day = 60 * (int)(Die.d6(7) * 50  * Math.pow(radius/6400.0, 0.33));
    		
    		if (distance < 50) {
    			day *= 100;
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected IPath getAbsolutePath(IPath parent, String refinement) {
    		// get the path from the refinement
    		IPath path = new Path(refinement);
    		if (path.isAbsolute() == false) {
    			IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
    			IFile file = root.getFile(parent);
    			path = file.getParent().getFullPath().append(path);
    		}
    
    		return path;
    	}
        public TemplateModel exec( List<TemplateModel> arguments ) throws TemplateModelException {
            if( arguments.size() != 1 ) {
                throw new TemplateModelException( "FilterTransform takes exactly one argument" );
            }
    
            TemplateModel model = arguments.get( 0 );
    
            if( model instanceof TemplateMethodModel ) {
                return new FilterTransform1( (TemplateMethodModel) model );
            } else if( model instanceof TemplateMethodModel2 ) {
                return new FilterTransform2( (TemplateMethodModel2) model );
            } else {
                throw new TemplateModelException( "FilterTransform takes a method model" );
            }
        }
        public Named getAnyNamedObject(String name) {
        if (name == "") return null;
        Named object = (Named)findOwnObject(name);
        if (object != null) return object;
        else {//find an original that has not changed
          //Debug.noteln("AUISetEd: looking in originals for",name);
          object = getStringOriginal(name);
          if (!isCurrentNamedObject(object)) //!name.equals(object.getName())
    	object = null;
          //Debug.noteln(" found", object);
          return object;
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void add(PostalAddress postal) {
            if (postal != null) {
                postalAddress.add(postal);
                update();
            }
        }
        @OperationsPerInvocation(SIZE)
    	@Benchmark
    	public int arrayList_get() {
    		int sum = 0;
    		for (int i = 0; i < SIZE; ++i) {
    			sum += arrayList.get(i);
    		}
    		return sum;
    	}
        private void doHighlight(String colorMode) throws WidgetException {
    		if (!(getGUIDriver() instanceof HighlightProvider)) {
    			return;
    		}
    		HighlightProvider highDriver = (HighlightProvider) getGUIDriver();
    
    		if (highDriver.isHighlight()) {
    			setBackgroundColor(highDriver.getHighlightColor(colorMode));
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static BufferedImage mapFromBinaries ( ImageMap self , EOPatch eopatch , int dstShape , byte [ ] requestData ) {
      if ( self . featureName . contains ( "raster" ) ) {
        BufferedImage raster = eopatch . getBufferedImage ( self . featureType ) . getRaster ( ) . getDataBuffer ( ) . createCompatibleWritableRaster ( dstShape , self . rasterType ) . getSampleModel ( ) . getDataBuffer ( ) . setRegion ( 0 , 0 , dstShape , dstShape , dstShape ) ;
        if ( raster == null ) {
          raster = new BufferedImage ( dstShape , dstShape , self . rasterType ) . getRaster ( ) . getDataBuffer ( ) . setRegion ( 0 , 0 , dstShape , dstShape ) ;
        }
        BufferedImage newRaster = reproject ( eopatch , toBinaryMask ( requestData ) ) ;
        raster . setRGB ( newRaster != null ? newRaster . getRGB ( ) : 0 , 0 , dstShape , dstShape ) ;
        return raster ;
      }
      return null ;
    }
        public String getValueAsString() {
            NodeList nodeslist = this.value.getChildNodes();
            StringBuffer buffer = new StringBuffer();
            for (int i = 0; i<nodeslist.getLength(); i++) {
                if ((nodeslist.item(i).getNodeType()==Node.TEXT_NODE) ||
                    (nodeslist.item(i).getNodeType()==Node.CDATA_SECTION_NODE))
                {
    
                    buffer.append(nodeslist.item(i).getNodeValue());
                }
            }
    
            return buffer.toString();
        }
        public InsertBuilder generateQuestionMarks() {
    	for(int i = 0; i < insertColumns.size(); i++) {
    		values.add("?");
    	}
    	return this;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ExecutableTests getExecutableTests() throws ShiftException {
            loadInheritedActions();
            ExecutableTests eTests = new ExecutableTests();
            for (Iterator iter = tests.entryIterator(); iter.hasNext();) {
                Test test = (Test) iter.next();
                optimizeTest(test);
                fillOutTest(test);
                eTests.add(convertTest(test));
            }
            return eTests;
        }
        public DerivativeStructure toRadians(){
      final DerivativeStructure ds=new DerivativeStructure(compiler);
      for (int i=0; i < ds.data.length; ++i) {
        ds.data[i]=FastMath.toRadians(data[i]);
      }
      return ds;
    }
        @Override
      public int compareTo(ID o) {
        TaskID that = (TaskID)o;
        int jobComp = this.jobId.compareTo(that.jobId);
        if(jobComp == 0) {
          if(this.isMap == that.isMap) {
            return this.id - that.id;
          }
          else return this.isMap ? -1 : 1;
        }
        else return jobComp;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testCursorChangeUpdateList() throws SQLException {
            
            // Update will fail
            cursorChange(
                    "42X31",
                    "select I, C from t for update",
                    "update t set i=i+19, c='OLD' || cast(i as CHAR(20)) where current of ",
                    "select I, C from t for update of I"
                    );
            
            // Delete will succeed.
            cursorChange(
                    null,
                    "select I, C from t for update",
                    "DELETE FROM t WHERE CURRENT OF ",
                    "select I, C from t for update of I"
                    );
    	}
        public void setSummaryIntervals(FromUntilPair[] newpairs) {
            super.setSummaryIntervals(newpairs);
            dirty = true;
    
            if(writeatonce) {
                saveConfiguration();
            }
        }
        public synchronized int writeToStream(OutputStream out) throws InterruptedException, IOException {
      while (mSize == 0 && !mClosed) {
        wait(TIMEOUT);
      }
      if (mSize == 0 && mClosed) {
        return -1;
      }
     else {
        final boolean wasFull=mSize == mBuf.length;
        final int copied=Math.min(mSize,mBuf.length - mStart);
        out.write(mBuf,mStart,copied);
        mStart+=copied;
        mSize-=copied;
        if (mStart == mBuf.length) {
          mStart=0;
        }
        if (wasFull) {
          notifyAll();
        }
        assert globalIntegrity();
        if (copied / 1000 < mReadHist.length - 1) {
          mReadHist[copied / 1000]++;
        }
     else {
          mReadHist[mReadHist.length - 1]++;
        }
        return copied;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void onDescriptorWriteRequest(String address,int transId,int offset,int length,boolean isPrep,boolean needRsp,int srvcType,int srvcInstId,ParcelUuid srvcId,int charInstId,ParcelUuid charId,ParcelUuid descrId,byte[] value){
      UUID srvcUuid=srvcId.getUuid();
      UUID charUuid=charId.getUuid();
      UUID descrUuid=descrId.getUuid();
      if (DBG)   Log.d(TAG,"onDescriptorWriteRequest() - " + "service=" + srvcUuid + ", characteristic="+ charUuid+ "descriptor="+ descrUuid);
      BluetoothDevice device=mAdapter.getRemoteDevice(address);
      BluetoothGattService service=getService(srvcUuid,srvcInstId,srvcType);
      if (service == null)   return;
      BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid);
      if (characteristic == null)   return;
      BluetoothGattDescriptor descriptor=characteristic.getDescriptor(descrUuid);
      if (descriptor == null)   return;
      try {
        mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);
      }
     catch (  Exception ex) {
        Log.w(TAG,"Unhandled exception: " + ex);
      }
    }
        public void setReplyto(Address[] param){
                                  
                                       validateReplyto(param);
    
                                   
                                              if (param != null){
                                                 //update the setting tracker
                                                 localReplytoTracker = true;
                                              } else {
                                                 localReplytoTracker = false;
                                                     
                                              }
                                          
                                          this.localReplyto=param;
                                  }
        public boolean isStored(String aFilePath) {
    		//fLogger.debug(aFilePath);
    		File lFile = new File( getBaseDirectoryPath() + aFilePath );
    		return lFile.exists(); 
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private Map<Class<?>, Formatter> findFormatMethods()
        {
            final Map<Class<?>, Formatter> formats = new HashMap<Class<?>, Formatter>();
            for (Method method : this.getClass().getMethods())
            {
                Format formatAnnotation = method.getAnnotation(Format.class);
                if (formatAnnotation != null)
                {
                    Class<?>[] parameterTypes = method.getParameterTypes();
                    if (parameterTypes.length == 0)
                    {
                        throw new InvalidFormatMethodException(getClass(), method, "Format methods must take at least 1 parameter!");
                    }
                    formats.put(parameterTypes[0], createFormatter(method, parameterTypes, formatAnnotation.value()));
                }
            }
            return formats;
        }
        protected void read(ObjectInputStream s) throws IOException, ClassNotFoundException {
            val header = BaseDataBuffer.readHeader(s);
            data = Nd4j.createBuffer(header.getRight(), length, false);
    
            data.read(s, header.getLeft(), header.getMiddle(), header.getRight());
        }
        public boolean isConnected() {
             IOSession session = getSession();
             if( session == null ) return false;
             return session.isConnected();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void print() {
    	PrinterJob pj = PrinterJob.getPrinterJob();
    	pj.setPrintable(this);
    
    	if (pj.printDialog()) {
    	    pj.defaultPage();
    	    try {
    		pj.print();
    	    } catch (PrinterException e) {
    		JOptionPane.showMessageDialog(null, e.getMessage(), "EID fout", 
    		    JOptionPane.ERROR_MESSAGE);
    	    }
    	}
        }
        public static ChannelServerEventListener initWithDelegate_port_protocol_ ( ChannelServerEventListener self , Object cb_obj , int port , int proto ) throws IOException {
      self . init ( ) ;
      if ( cb_obj == null ) {
        throw new NullPointerException ( "callback object is null" ) ;
      }
      self . __cb_obj = cb_obj ;
      self . __usernotif = null ;
      if ( proto == _lightbluecommon . RFCOMM ) {
        usernotif = IOBluetooth . IOBluetoothRFCOMMChannel . registerForChannelOpenNotifications_selector_withChannelID_direction_ ( self , "newChannelOpened:channel:" , port , _macutil . kIOBluetoothUserNotificationChannelDirectionIncoming ) ;
      }
      else if ( proto == _lightbluecommon . L2CAP ) {
        usernotif = IOBluetooth . IOBluetoothL2CAPChannel . registerForChannelOpenNotifications_selector_withPSM_direction_ ( self , "newChannelOpened:channel:" , port , _macutil . kIOBluetoothUserNotificationChannelDirectionIncoming ) ;
      }
      if ( usernotif == null ) {
        throw new IOException ( "Unable to register for channel-" + "opened notifications on server socket on channel/PSM " + port ) ;
      }
      self . __usernotif = usernotif ;
      return self ;
    }
        public void inverseTranslateVect(float[] vec) throws Exception {
            if (vec.length != 3) { throw new Exception(
                    "vec must be of size 3."); }
    
            vec[0] = vec[0] - m03;
            vec[1] = vec[1] - m13;
            vec[2] = vec[2] - m23;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
            
    if ("FLAuth".equals(portName)) {
                setFLAuthEndpointAddress(address);
            }
            else 
    { // Unknown Port Name
                throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
            }
        }
        public void visit(RegExprSpec n, A argu) {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
       }
        public Player createPlayer(String name, float leftLimit, float rightLimit) {
            Player player = new Player(name, players.size(), leftLimit, rightLimit);
            players.add(player);
    
            return player;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void save(String data){
      LOGGER.info("Cache: Trying to save " + id + "..");
      try (BufferedWriter writer=Files.newBufferedWriter(file,CHARSET)){
        writer.write(new Long(System.currentTimeMillis() / 1000).toString() + "\n");
        writer.write(data);
        LOGGER.info("Cache: Saved " + id + ".");
      }
     catch (  IOException ex) {
        LOGGER.warning("Cache: Error saving " + id + " ["+ ex+ "]");
      }
    }
        public boolean getVerticalLinesExistence() {
            GraphProperties graphProps = XgChart2D.getGraphProperties(0);
    
            return graphProps.getGraphLabelsLinesExistence();
        }
        protected void printSessionAttributes(HttpServletRequest request) {
        if (true) {
          HttpSession session = request.getSession();
          Logger.debug(this, "--> session-parameter:");
    
          Enumeration enum_app = session.getAttributeNames();
    
          while (enum_app.hasMoreElements()) {
            String attribute = enum_app.nextElement().toString();
            Logger.debug(this, "   " + attribute + "\t\t:    " + session.getAttribute(attribute));
          }
    
          Logger.debug(this, "<--  session-parameter");
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String getSystemProperty(String propName) {
            final String temp = propName;
            try {
                String prop = AccessController.doPrivileged(
                                                            new PrivilegedAction<String>() {
                                                                @Override
                                                                public String run() {
                                                                    return System.getProperty(temp);
                                                                }
                                                            });
                return prop;
            } catch (SecurityException se) {
                // LOG THE EXCEPTION
                return null;
            }
        }
        public void put(String key, String value) {
    		if (key.equals(VERB)) {
    			return;
    		}
    
    		mFields.put(key, value);
    	}
        @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.466 -0400",hash_original_method="CC627F0F353C80BB97E82A837A36768C",hash_generated_method="C510F9BA0D51F7A1D6FB275AB3D13B3F") static String clean(String str){
      if (str == null || str.length() == 0) {
        return str;
      }
      int len=str.length();
      char[] chars=new char[len];
      int count=0;
      for (int i=0; i < len; i++) {
        if (Character.isLetter(str.charAt(i))) {
          chars[count++]=str.charAt(i);
        }
      }
      if (count == len) {
        return str.toUpperCase();
      }
      return new String(chars,0,count).toUpperCase();
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setAnnotationVisible(boolean isVisible) {
            getParent().invalidate();
            if (null == annotation) annotation = new Annotation();   
            annotation.setVisible(isVisible);
          }
        public DocumentNGramHistogram(int iMinSize,int iMaxSize){
      MinSize=iMinSize;
      MaxSize=iMaxSize;
      DataString="";
      NGramHistogram=new HashMap();
    }
        public void decreaseStack(int amount) {
    		if (amount > stack) {
    			throw new IllegalArgumentException(
    					"Stack would be negative after decreasing.");
    		}
    		this.stack -= amount;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean isRoot_isIn() {
    		if(!this.lstIsInInited) {
    			this.lstIsInInited = true;
    			this.initLstIsIn();
    		}
    		else this.synchronize();
    		
    		return (this.lstIsIn == null || this.lstIsIn.isEmpty());
    	}
        public static < T extends Event > T getEventTags ( T self , String id , final AsyncCallback < T > callback ) {
      callback . onReturnHttpDataOnly ( ) ;
      if ( callback . isAsyncReq ( ) ) {
        return getEventTagsWithHttpInfo ( id , callback ) ;
      }
      else {
        ( ( AsyncCallback < T > ) callback ) . onSuccess ( self ) ;
        return self ;
      }
    }
        public String collapse() {
            String s = "";
            s+=this.getData();
            if(this.getParent() != null) {
                s += this.getParent().collapse();
            }
            for (TreeNode<E> e : this) {
                s += e.getData().toString();
                s += e.getParent().collapse();
            }
            return s;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public synchronized void loadKeys(){
      try {
        PropertyInfo props=_coordinator.getPropertyInfo();
        String internalApiAlgoOverride=null;
        if (props != null) {
          internalApiAlgoOverride=props.getProperty(SYSTEM_PROPERTY_INTERNAL_API_ALGO);
        }
        _log.debug("Internal Api algo override property: " + internalApiAlgoOverride);
        if (internalApiAlgoOverride != null && internalApiAlgoOverride.equals(SYSTEM_PROPERTY_INTERNAL_API_ALGO_VALUE_NEW)) {
          _internalApiCurrentKey=getSignatureKey2(NEW_SIGNATURE_INTERNALAPI_KEY,NEW_INTERNAL_API_SIGN_ALGO);
          deleteSignatureKey(CURRENT_SIGNATURE_INTERNALAPI_KEY);
        }
     else {
          _internalApiCurrentKey=getSignatureKey2(CURRENT_SIGNATURE_INTERNALAPI_KEY,CURRENT_INTERNAL_API_SIGN_ALGO);
        }
        _interVDCCurrentKey=getSignatureKey2(SIGNATURE_INTERVDC_KEY,CURRENT_INTERVDC_API_SIGN_ALGO);
      }
     catch (  Exception e) {
        throw new IllegalStateException("Exception while retrieving key",e);
      }
      if (_internalApiCurrentKey == null) {
        throw new IllegalStateException("Key was null / Unable to get current internal api key.");
      }
      if (_interVDCCurrentKey == null) {
        throw new IllegalStateException("Key was null / Unable to get current inter vdc api key.");
      }
      _initialized=true;
      _lastUpdated.set(System.currentTimeMillis());
      return;
    }
        private static MethodHandle nan_minmax_object ( MethodHandle mh , Class < ? > type , Object value , int offset , int length ) {
      int validCount = count ( length , offset ) ;
      Object filledValue = fillObject ( value , offset ) ;
      Object data = ( ( Number ) mh . invoke ( filledValue , type ) ) . intValue ( ) ;
      if ( ! type . isPrimitive ( ) ) {
        data = type . isPrimitive ( ) ? data : type . cast ( data ) ;
        return mh . asType ( data ) ;
      }
      return whereMethod ( data , validCount != 0 ) ;
    }
        public void removeResource(Resource res) throws XMLDBException {
    
            if (res == null || res.getId() == null || res.getId().length() == 0) {
                // Query result resource will have null ID
                throw new XMLDBException(ErrorCodes.INVALID_RESOURCE,
                                         "Resource passed is null or its ID is empty.");
            }
    
            checkOpen();
            try {
                col.remove(res.getId());
            } catch (Exception e) {
                throw FaultCodes.createXMLDBException(e);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JScrollPane getJScrollPaneList() {
    		if (jScrollPaneList == null) {
    			jScrollPaneList = new JScrollPane();
    			jScrollPaneList.setPreferredSize(new java.awt.Dimension(120,100));
    			jScrollPaneList.setMinimumSize(new java.awt.Dimension(120,100));
    			jScrollPaneList.setViewportView(getJListFilters());
    		}
    		return jScrollPaneList;
    	}
        public String toString(){
      StringBuilder sb=new StringBuilder();
      sb.append("================== Preface ======================\n");
      sb.append(this.header.toString());
      sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));
      sb.append(String.format("last_modified_date = 0x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.last_modified_date[0],this.last_modified_date[1],this.last_modified_date[2],this.last_modified_date[3],this.last_modified_date[4],this.last_modified_date[5],this.last_modified_date[6],this.last_modified_date[7]));
      sb.append(String.format("version = 0x%02x%02x%n",this.version[0],this.version[1]));
      sb.append(String.format("content_storage = %s%n",this.content_storage.toString()));
      sb.append(String.format("operational_pattern = %s%n",this.operational_pattern.toString()));
      sb.append(this.essencecontainers.toString());
      sb.append(this.dm_schemes.toString());
      return sb.toString();
    }
        public Card dealCard() {
          if ( index >= deck.size() )
             return null;
          else
             return deck.get( index++ );
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
        public ListActivatedRulesInRuleGroupResult listActivatedRulesInRuleGroup(ListActivatedRulesInRuleGroupRequest request) {
            request = beforeClientExecution(request);
            return executeListActivatedRulesInRuleGroup(request);
        }
        public String getRecaptchaHostName() {
            if (log.isTraceEnabled()) {
                log.trace("ENTER/EXIT: getRecaptchaHostName()[" + recaptchaHostName + "]");
            }
    
            return recaptchaHostName;
        }
        public HttpResponse send() {
    		if (!followRedirects) {
    			return _send();
    		}
    
    		int redirects = this.maxRedirects;
    
    		while (redirects > 0) {
    			redirects--;
    
    			final HttpResponse httpResponse = _send();
    
    			final int statusCode = httpResponse.statusCode();
    
    			if (HttpStatus.isRedirect(statusCode)) {
    				_reset();
    				set(httpResponse.location());
    				continue;
    			}
    
    			return httpResponse;
    		}
    
    		throw new HttpException("Max number of redirects exceeded: " + this.maxRedirects);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
            
    if ("AdParamServiceInterfacePort".equals(portName)) {
                setAdParamServiceInterfacePortEndpointAddress(address);
            }
            else 
    { // Unknown Port Name
                throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
            }
        }
        static synchronized public DBConnectionManager getInstance() {
            if (instance == null) {
                instance = new DBConnectionManager();
            }
            clients++;
            return instance;
        }
        protected String getRegistry() {
            if (!RuntimeMode.isOpenShiftMode(getProject().getProperties())) {
                return getConfigWithFallback(Config.registry, "fabric8.generator.registry", null);
            }
    
            return null;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void finalize(){
    		try{
    //			CyberoamLogger.connectionPoolLog.debug("finalize CLOSING THE CONNECTION RSW: " + createTime);
    			this.closeAll();			
    		}catch(Exception e){
    		}
    	}
        public void saveData() {
    	CvsData.setRootString( EXPERT_MODE,
    //			(new Boolean(getcbExpertMode().isSelected())).toString());
    			getcbExpertMode().isSelected() ? "True" : "False");
    
    	CvsData.setRootString( USING_SSH, 
    			String.valueOf(getSshAutenticate().isSelected()));
    
    	CvsData.setRootString( SSH_IDENTITY, getidentityFileName().getText());
    
    	CvsData.setRootString( BROKEN_NT_CVS, 
    			String.valueOf(getcbUsingBrokenNtServer().isSelected()));
    	
    	try {
    		CvsData.commit();
    	} catch (Exception e) {
    		handleException(e);
    	}
    	DialogClosed();
    }
        public Object getFormVar(String key) {
    		if (data.containsKey(key)) {
    			return data.get(key);
    		} else {
    			return null;
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static final Object getVlanBrickOutputVlanVlanState ( final Object self , final String vlanId ) {
      Element config = new Element ( "config" ) ;
      Element getVlanBrief = new Element ( "getVlanBrief" ) ;
      config . addAttribute ( "vlanBrief" , getVlanBrief ) ;
      Element output = new Element ( "output" ) ;
      Element vlan = new Element ( "vlan" ) ;
      vlan . addAttribute ( "vlanId" , vlanId ) ;
      Element vlanIdKey = new Element ( "vlan-id" ) ;
      vlanIdKey . addAttribute ( "vlanId" , vlanId ) ;
      Element vlanState = new Element ( "vlan-state" ) ;
      vlanState . addAttribute ( "vlanState" , vlanState ) ;
      final Callback callback = new Callback ( ) {
        @ Override public void onCallback ( Element config ) {
        }
      };
      return callback . execute ( config ) ;
    }
        public static int [ ] tokenOffsets ( List < Token > tokens ) {
      int endOffset = 0 ;
      int previousEndRow = 0 ;
      int previousEndColumn = 0 ;
      for ( Token t : tokens ) {
        int tokenType = t . getType ( ) ;
        String tokenString = t . getText ( ) ;
        ( ( int [ ] ) t . getBounds2D ( ) ) [ 0 ] = t . getBounds2D ( ) [ 0 ] ;
        ( ( int [ ] ) t . getBounds2D ( ) ) [ 1 ] = t . getBounds2D ( ) [ 1 ] ;
        endOffset += startColumn ;
        if ( previousEndRow == startRow ) {
          endOffset -= previousEndColumn ;
        }
        startOffset = endOffset ;
        endOffset += tokenString . length ( ) ;
        System . arraycopy ( tokenString . toCharArray ( ) , 0 , ( ( int [ ] ) t . getBounds2D ( ) ) [ 0 ] , startOffset , tokenString . length ( ) ) ;
        previousEndRow = endRow ;
        previousEndColumn = endColumn ;
      }
      return new int [ ] {
        ( ( int [ ] ) t . getBounds2D ( ) ) [ 0 ] , ( ( int [ ] ) t . getBounds2D ( ) ) [ 1 ] , ( ( int [ ] ) t . getBounds2D ( ) ) [ 2 ] , ( ( int [ ] ) t . getBounds2D ( ) ) [ 3 ] };
      }
        private String getFilter() {
    		Class<?> serviceInterface = this.getServiceInterface();
    		String serviceFilter = this.getServiceFilter();
    		StringBuilder filter = new StringBuilder();
    		if (serviceInterface != null) {
    			filter.append(String.format("(objectClass=%s)", serviceInterface
    					.getName()));
    		}
    		if (serviceFilter != null) {
    			filter.append(serviceFilter);
    		}
    		if (filter.length() == 0) {
    			return null;
    		}
    		return String.format("(&%s)", filter);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void fireMessageSent(final String message) {
            assert message != null;
            ConnectorListener[] fireListeners = Connector.this.listeners.getListeners(ConnectorListener.class);
            if (fireListeners.length == 0) {
                return;
            }
            ConnectorMessageEvent event = new ConnectorMessageEvent(this, message);
            for (ConnectorListener listener : fireListeners) {
                listener.messageSent(event);
            }
        }
        public void add(final Banks bank, final Entity entity) {
    		final List<Entity> bankAccess = getListAddingUnknownBanks(bank);
    		if (!bankAccess.contains(entity)) {
    			bankAccess.add(entity);
    		}
    	}
        private int cg_varMIPS(Operand3a var, int offset) {
    		int size;
    		size = var.getSize();
    		var.setOffset(offset);
    		if(debugCG){System.out.println("\\ "+var.getName3a()+"  @ = " + offset);}
    		return offset + size;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public JSONObject getJSONObject(int index) throws JSONException {
        Object object = get(index);
        if (object instanceof JSONObject) {
          return (JSONObject) object;
        }
        throw new JSONException(NLS.bind("JSONArray[{0}] is not a JSONObject.", index)); //$NON-NLS-1$
      }
        public static boolean fetchObjectFromDBByPK ( JdbcTemplate jdbcTemplate , Object obj , String table , List < String > fieldList , Object pkValue ) throws SQLException {
      if ( pkValue == null ) {
        blankObject ( obj , fieldList ) ;
        return false ;
      }
      List < Object > row = jdbcTemplate . queryForList ( getSqlSelectAllNonPKFieldsByPK ( table , fieldList , jdbcTemplate . getDelims ( ) ) , pkValue ) ;
      if ( row == null ) {
        blankObject ( obj , fieldList ) ;
        return false ;
      }
      Collections . addAll ( fieldList , row ) ;
      assignFromList ( jdbcTemplate , fieldList . subList ( 1 , fieldList . size ( ) ) , row ) ;
      return true ;
    }
        public void close() throws SQLException {
    		Log.record("JDBCConnection.close: closing " + this, Log.kLogLevelDebug);
    //		Log.record(Utils.generateStackTrace(4), Log.kLogLevelDebug);
    		mStatement.close();
    		mConnection.close();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void printToFile(String s, boolean append) {
            try {
                FileWriter fstream = new FileWriter("out.txt", append);
                BufferedWriter out = new BufferedWriter(fstream);
                out.write(s);
                out.close();
            } catch (Exception e) {//Catch exception if any
                System.err.println("Error: " + e.getMessage());
            }
        }
        @Deprecated
      public void addEvent(String packageName, long timeStamp, int eventType) {
        EventBuilder eventBuilder =
            EventBuilder.buildEvent()
                .setPackage(packageName)
                .setTimeStamp(timeStamp)
                .setEventType(eventType);
        if (eventType == Event.CONFIGURATION_CHANGE) {
          eventBuilder.setConfiguration(new Configuration());
        }
        addEvent(eventBuilder.build());
      }
        public void testDoCheckWithNotEmptyText(){
      LOGGER.debug("doCheckWithNotEmptyText");
      elements.add(element);
      mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);
      expectLastCall().once();
      expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("something");
      TextEmptinessChecker instance=new TextEmptinessChecker(mockTextElementBuilder,TEXT_EMPTY_MSG,null);
      instance.setProcessRemarkService(mockProcessRemarkService);
      replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);
      instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);
      verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getText(Object object) {
    		String label = ((ModelElement)object).getName();
    		return label == null || label.length() == 0 ?
    			getString("_UI_ModelElement_type") :
    			getString("_UI_ModelElement_type") + " " + label;
    	}
        public void reload()
       {
          providers = new HashSet<S>();
          loadedImplementations = new HashSet<Class<?>>();
    
          for (URL serviceFile : loadServiceFiles())
          {
             loadServiceFile(serviceFile);
          }
    
          if (locatorLoader == null)
             locatorLoader = java.util.ServiceLoader
                      .load(ServiceLocator.class);
    
          for (ServiceLocator locator : locatorLoader)
          {
             Collection<Class<S>> serviceTypes = locator.locate(expectedType);
             if ((serviceTypes != null) && !serviceTypes.isEmpty())
             {
                for (Class<S> type : serviceTypes) {
                   loadClass(type); // TODO lb3 test this now
                }
             }
          }
    
       }
        public static boolean isOnCooldown ( CooldownService self , MessageContext ctx ) {
      if ( ! self . getBuckets ( ) . isValid ( ) ) {
        return false ;
      }
      Bucket bucket = self . getBuckets ( ) . getBucket ( ctx . getMessage ( ) ) ;
      return bucket . getTokens ( ) == 0 ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override public void eUnset(int featureID){
    switch (featureID) {
    case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__LEFT_OPERAND:
        setLeftOperand((Expression)null);
      return;
    case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__OPERATOR:
    setOperator(OPERATOR_EDEFAULT);
    return;
    case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__RIGHT_OPERAND:
    setRightOperand((Expression)null);
    return;
    }
    super.eUnset(featureID);
    }
        public void setDefinition(String definition) {
    		if (this.term_definition == null) {
    			this.term_definition = new TermDefinition();
    		}
    		this.term_definition.setTerm_id(term_id);
    		this.term_definition.setTerm_definition(definition);
    	}
        protected void drawBorder (Graphics g) {
    		// wipe the background (spacing colour)
    		g.setColor (this.spacingColour);
    		g.fillRect (0, 0, getWidth(), getHeight());
    
    		g.setColor (Color.black);
    		int size = getWidth();
    		g.drawRect (0, 0, size - 1, size - 1);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean hangupAll() {
            if (interlocutors.size() < 1) {
                Log.debug("hangup", "No interlocutors");
                return false;
            }
            Interlocutor inter;
            for (int i = 0; i < interlocutors.size(); i++) {
                inter = (Interlocutor) interlocutors.get(i);
                for (UserActionListener ual : actionHandlers) {
                    ual.handleHangupRequest(inter);
                }
            }
            return true;
        }
        private void addStep(Set steps, Step add) {
            if(steps.contains(add)) {
                throw new IllegalStateException("Found circular dependency graph from step '"+add.getName()+"':"+getStepNames(steps));
            }
            steps.add(add);
        }
        private void removeOldSignedPreKeys(OmemoDevice userDevice) {
            if (OmemoConfiguration.getMaxNumberOfStoredSignedPreKeys() <= 0) {
                return;
            }
    
            TreeMap<Integer, T_SigPreKey> signedPreKeys = loadOmemoSignedPreKeys(userDevice);
    
            for (int i = 0; i < signedPreKeys.keySet().size() - OmemoConfiguration.getMaxNumberOfStoredSignedPreKeys(); i++) {
                int keyId = signedPreKeys.firstKey();
                LOGGER.log(Level.INFO, "Remove signedPreKey " + keyId + ".");
                removeOmemoSignedPreKey(userDevice, i);
                signedPreKeys = loadOmemoSignedPreKeys(userDevice);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void process ( Logentries self , Metric metric ) {
      self . queue . add ( metric ) ;
      if ( self . queue . size ( ) >= self . queueSize ) {
        LOG . debug ( "Queue is full, sending logs to Logentries" ) ;
        self . send ( ) ;
      }
    }
        protected StringBuffer logOutput() {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            CaptureOutputStream cos = new CaptureOutputStream(baos);
            PrintStream ps = new PrintStream(cos);
    
            System.setOut(ps);
            System.setErr(ps);
    
            StringBuffer buffer = cos.getCapturedOutputBuffer();
            return buffer;
        }
        protected void reduceParseTree(CompilationUnitDeclaration unit) {
    	// remove statements from methods that have no possible matching nodes
    	TypeDeclaration[] types = unit.types;
    	for (int i = 0, l = types.length; i < l; i++)
    		purgeMethodStatements(types[i], true); 
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void log(int channel, String source, String info) {
        String entry = this.ownerId + "." + source + (info == null ? "" : "\t"+info);
        if ( getEnabled() ) {
          if ( s_streams[channel] != null ) {
            if ( USE_TIMESTAMP ) {
              entry = System.currentTimeMillis()+": "+entry;
            }
            s_streams[channel].println(entry);
            if (s_streams[channel].checkError()) {
              System.err.println(entry);
            }
          }
        }
      }
        public static Pair < List < String > , Integer > scan ( byte [ ] data , ClamConfiguration clamConf ) {
      try {
        ClamdScanner scanner = new ClamdScanner ( clamConf ) ;
        if ( scanner == null ) {
          String errmsg = "Could not connect to ClamAV daemon." ;
          return Pair . create ( Collections . < String > emptyList ( ) , errmsg ) ;
        }
        try {
          scanner . scan ( data ) ;
        }
        finally {
          scanner . close ( ) ;
        }
        return Pair . create ( scanner . getInfected ( ) , scanner . getErrors ( ) ) ;
      }
      catch ( IOException e ) {
        String errmsg = "Could not connect to ClamAV daemon." ;
        return Pair . create ( Collections . < String > emptyList ( ) , errmsg ) ;
      }
    }
        private void thrownDie() {
    		if (currentPlayerSquare instanceof JailSlashFreePassSquare && !currentPlayerSquare.shouldPlayerMove(currentActivePlayer))
    		{
    			boolean hasDouble = checkForDouble();
    			((JailSlashFreePassSquare)currentPlayerSquare).release(currentActivePlayer, hasDouble);		}
    		else if (gameBoard.get(currentActivePlayer.getCurrentPosition()).shouldPlayerMove(currentActivePlayer))
    		{
    			int[] result = ui.guiComponents.dice.Dice.getGameDice().getDieOutcome();
    			int dieSum = result[0]+result[1];
    			movePlayer(currentActivePlayer, dieSum, true);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void setInputScoreStartRange ( InputScoreStartRange self , double score ) {
      if ( self . getInputScoreStartRangeMetadata ( ) . isReadOnly ( ) ) {
        throw new DMLRuntimeException ( "Input ScoreStartRange is not read-only" ) ;
      }
      try {
        score = Double . valueOf ( score ) ;
      }
      catch ( NumberFormatException e ) {
        throw new DMLRuntimeException ( "Invalid score value for inputScoreStartRange" , e ) ;
      }
      if ( ! isValidDecimalValue ( score , self . getInputScoreStartRangeMetadata ( ) ) ) {
        throw new DMLRuntimeException ( "Invalid score value for inputScoreStartRange" , e ) ;
      }
      self . getMy_map ( ) . put ( "inputScoreStartRange" , score ) ;
    }
        public static Map < String , String > getGoal ( String path , String opts ) {
      String cmd = "mfsgetgoal" ;
      Map < String , String > ret = new HashMap < String , String > ( ) ;
      if ( opts != null ) {
        cmd += " -" + opts ;
      }
      else {
        opts = "" ;
      }
      cmd += "" + path ;
      out = __cmd . run ( cmd , JavaShell . class ) ;
      String output = out . getStdout ( ) . toString ( ) ;
      if ( "r" . equals ( opts ) ) {
        String [ ] goal = output . split ( ": " ) ;
        ret . put ( goal [ 1 ] , "" ) ;
      }
      else {
        for ( String line : output . split ( "\n" ) ) {
          if ( line . isEmpty ( ) ) continue ;
          if ( path . contains ( line ) ) continue ;
          String [ ] comps = line . split ( "" ) ;
          String keytext = comps [ 0 ] + " with goal" ;
          if ( keytext != null ) ret . put ( keytext , comps [ 3 ] ) ;
        }
      }
      return ret ;
    }
        public String toString() {
    		String result = "";
    		for (int i = 0; i < program.size(); i++) {
    			result += program.get(i).toString() + "\n";
    		}
    		return result;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void addErrorListener(ActionListener listener){
      if (onErrorListeners == null) {
        onErrorListeners=new EventDispatcher();
      }
      onErrorListeners.addListener(listener);
    }
        private static boolean checkValueItemParent ( String policyElement , String policyName , String policyKey , String policyValueName , XPathObject xpathObject , String policyFileData , boolean checkDeleted , boolean testItem ) throws XPathExpressionException {
      for ( Element element : xpathObject . elements ( policyElement ) ) {
        for ( ValueItem valueItem : element . getXPathValues ( policyValue ) ) {
          String searchString = processValueItem ( valueItem , policyKey , policyValueName , policyElement , element , checkDeleted ) ;
          if ( ! testItem ) {
            return searchString . equals ( policyValue ) ;
          }
          if ( regexSearchRegPolData ( Pattern . quote ( searchString ) , policyFileData ) ) {
            log . debug ( "found the search string in the pol file, " + policyName + " is configured" ) ;
            return true ;
          }
        }
      }
      return false ;
    }
        protected void validateKeyword(KeywordType[] param){
                                 
                                  if ((param != null) && (param.length < 1)){
                                    throw new java.lang.RuntimeException();
                                  }
                                  
                                  }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void stopThreads() {
            if (scannerThread != null) {
                scannerThread.shutdown();
                scannerThread = null;
            }
            if (busmonitor != null) {
                busmonitor.shutdown();
                busmonitor=null;
            }
        }
        public void dispatchEvent(CoefficientEvent event){
    		CoefficientEventHandler[] handlers = EventHandlerRegistry.getInstance().getHandlers(event.getClass());
    		if (handlers == null) return;
    		for (int i = 0; i < handlers.length; i++) {			
    			//TODO: think about remote invocation	
    			handlers[i].handleEvent(event);
    		}
    	}
        public static boolean isInstanceOf(final Object object, final Class target) {
    		if (object == null || target == null) {
    			return false;
    		}
    		return target.isInstance(object);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void printIndents() throws IOException {
        try {
          write(indents[depthCounter.getLevel()]);
        } catch (IndexOutOfBoundsException e) {
          // unlikely needed so can be slow
          for(int i = 0; i < depthCounter.getLevel(); i++)
            write("  ");
        }
       
      }
        public Index indexById(byte[] id) throws IOException {
            if (id.length != 8) {
                throw new IllegalArgumentException("Expected 8 byte identifier: " + id.length);
            }
            return indexById(readLongBE(id, 0));
        }
        public void testGetNode() {
    		final DirectedAcyclicGraph<Object> dag = new DirectedAcyclicGraph<Object>();
    		final Object o1 = new Object();
    		final Object o2 = new Object();
    		final Node<Object> n = dag.getNode(o1);
    		assertSame(n, dag.getNode(o1));
    		assertNotSame(n, dag.getNode(o2));
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setParameterExtention(java.lang.String extMethod) throws IllegalArgumentException {
    		if (extMethod == null) {
    			new IllegalArgumentException("ExtMethod must nto be null.");
    		}
    
    		DescriptorUtils.checkMethodExtensionRules(extMethod);
    
    		this.parameterExtension = extMethod;
    	}
        public void setThreadPool(IEventQueueThreadPool pool) {
            synchronized (getLock()) {
                this.pool = pool;
            }
        }
        private void clearTextFields() {
    	tfName.set(null);
    	tfType.set(null);
    	tfQuantity.setText("");
    	tfAllSum.setText("");
    	mask = isFullInit ? 0 : 1;
    	setBtnAddToTableEnabled();
    	tfName.requestFocus();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected boolean fireRowChangeRequest(int oldCol, int oldRow, int newCol, int newRow) {
            MasterObjectChangeEvent e = new MasterObjectChangeEvent(this, oldCol, oldRow, newCol, newRow);
            for (Iterator i = rowChangeListeners.iterator(); i.hasNext();) {
                IMasterObjectChangeListener element = (IMasterObjectChangeListener) i.next();
                element.requestChange(e);
            }
            return e.doit;
        }
        public void setStartRule(int month, int dayOfMonth, int time) {
            if (isFrozen()) {
                throw new UnsupportedOperationException("Attempt to modify a frozen SimpleTimeZone instance.");
            }
    
            getSTZInfo().setStart(month, -1, -1, time, dayOfMonth, false);
            setStartRule(month, dayOfMonth, 0, time, WALL_TIME);
        }
        public String getIPString(InetAddress addr) {
    	if (addr == null) return new String("");
    		
    	String addrstr = addr.toString();
    	int slash_loc = addrstr.indexOf('/');
    	return addrstr.substring(slash_loc+1, addrstr.length());
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String guessGithubRepo ( ) {
      Process p = Runtime . getRuntime ( ) . exec ( "git ls-remote --get-url origin" ) ;
      if ( p . getErrorStream ( ) == null || p . getInputStream ( ) == null ) {
        return null ;
      }
      String url = p . getInputStream ( ) . toString ( ) . trim ( ) ;
      Matcher m = GIT_URL . fullmatch ( url ) ;
      if ( ! m . matches ( ) ) {
        return null ;
      }
      return m . group ( 1 ) ;
    }
        public AudioReader(String mimeType){
      super(mimeType);
      setDefault("factor",1.0);
      setDefault("offset",0.0);
    }
        public void addAll(Map options) {
            if (options == null) {
                String msg = "options parameter cannot be null";
                throw new IllegalArgumentException(msg);
            }
            for (Iterator i = options.entrySet().iterator(); i.hasNext();) {
                Map.Entry entry = (Map.Entry) i.next();
                Radio radio = new Radio(entry.getKey().toString(),
                                        entry.getValue().toString());
                add(radio);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    Collection<MobSimVehicleRoute> createPlans(){
      List<MobSimVehicleRoute> vehicleRoutes=new ArrayList<MobSimVehicleRoute>();
      for (  CarrierAgent carrierAgent : carrierAgents) {
        List<MobSimVehicleRoute> plansForCarrier=carrierAgent.createFreightDriverPlans();
        vehicleRoutes.addAll(plansForCarrier);
      }
      return vehicleRoutes;
    }
        public AdsUpdateAdsQuery(VkApiClient client,UserActor actor,int accountId,String data){
      super(client,"ads.updateAds",Utils.buildParametrizedType(List.class,Integer.class));
      accessToken(actor.getAccessToken());
      accountId(accountId);
      data(data);
    }
        static void pickledump ( Object theObject , String fname ) throws IOException {
      FileOutputStream fhandle = new FileOutputStream ( fname ) ;
      ObjectOutputStream oos = new ObjectOutputStream ( fhandle ) ;
      oos . writeObject ( theObject ) ;
      oos . close ( ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void unwind(final String tagName) throws SAXException, XmlReaderException {
            this.currentHandlers.pop();
            if (this.currentHandlers.isEmpty() && !this.outerScopes.isEmpty()) {
                this.currentHandlers = (Stack) this.outerScopes.pop();
            }
            if (!this.currentHandlers.isEmpty()) {
                getCurrentHandler().endElement(tagName);
            }
        }
        private void copy(InputStream in, File outFile) throws IOException {
    
            log.logFile(outFile);
    		OperatingSystem.getOperatingSystem().mkdirs(log, outFile.getParentFile());
    
    		BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(outFile));
            copy(in, out);
    		out.close();
    	}
        public void addNoteList(double[] freqArray, double[] rhythmArray){
    		int[] dynamic = new int[freqArray.length];
    		for(int i=0;i<freqArray.length;i++){
    			dynamic[i] = Note.DEFAULT_DYNAMIC;
    		}
    		this.addNoteList(freqArray, rhythmArray, dynamic);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setKeyStroke(String keyStroke) {
    		if (Converter.isDifferent(this.keyStroke, keyStroke)) {
    			String oldkeyStroke= null;
    			oldkeyStroke = this.keyStroke;
    			this.keyStroke = keyStroke;
    			setModified("keyStroke");
    			firePropertyChange(String.valueOf(APPLICATIONCONTROLS_KEYSTROKE), oldkeyStroke, keyStroke);
    		}
    	}
        protected void addShowresponsehierarchyPropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add
    			(createItemPropertyDescriptor
    				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
    				 getResourceLocator(),
    				 getString("_UI_View_showresponsehierarchy_feature"),
    				 getString("_UI_PropertyDescriptor_description", "_UI_View_showresponsehierarchy_feature", "_UI_View_type"),
    				 DxlPackage.Literals.VIEW__SHOWRESPONSEHIERARCHY,
    				 true,
    				 false,
    				 false,
    				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
    				 null,
    				 null));
    	}
        public static Value TLCEval(Value val){
      Value evalVal=SetEnumValue.convert(val);
      if (evalVal != null) {
        return evalVal;
      }
      evalVal=FcnRcdValue.convert(val);
      if (evalVal != null) {
        return evalVal;
      }
      return val;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
        protected void logImpl(LogLevel level,Object[] message,Throwable throwable)
        {
            //format log message (without exception)
            String text=this.formatLogMessage(level,message,null);
    
            //get log level
            int levelValue=level.getValue();
            switch(levelValue)
            {
                case LogLevel.DEBUG_LOG_LEVEL_VALUE:
                    this.APACHE_LOGGER.debug(text);
                    break;
                case LogLevel.ERROR_LOG_LEVEL_VALUE:
                    this.APACHE_LOGGER.error(text,throwable);
                    break;
                case LogLevel.INFO_LOG_LEVEL_VALUE:
                default:
                    this.APACHE_LOGGER.info(text);
                    break;
            }
        }
        public void checkImports( final Buffer buffer ) {
            myErrorSource.clear();
            final String filename = buffer.getPath();
            if ( !filename.endsWith( ".java" ) ) {
                return ;     // not a java file, don't check
            }
    
            JavaParser parser = new JavaParser();
            CUNode cu = parser.parse( buffer );
            cu.setFilename(buffer.getPath());
            checkImports(cu);
        }
        public int hashCode() {
    		int result;
    		result = (fieldName != null ? fieldName.hashCode() : 0);
    		result = 29 * result + (order != null ? order.hashCode() : 0);
    		return result;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JButton getJButtonCancel() {
    		if (jButtonCancel == null) {
    			jButtonCancel = new JButton();
    			jButtonCancel.setText(Messages.getString("QueryExportFrame.12")); //$NON-NLS-1$
    			jButtonCancel.setEnabled(false);
    			jButtonCancel.addActionListener(new ActionListener() {
    
    				public void actionPerformed(ActionEvent e) {
    			        if ((exportThread != null) && exportThread.isAlive()) {
    			        	exportThread.interrupt();
    			        }
    				}
    				
    			});
    		}
    		return jButtonCancel;
    	}
        protected void setLocale(HttpServletRequest request, Locale locale) {
    
            HttpSession session = request.getSession();
            if (locale == null) {
                locale = Locale.getDefault();
            }
            session.setAttribute(Globals.LOCALE_KEY, locale);
    
        }
        public boolean equals(final AbstractIdentifiedObject object, final boolean compareMetadata) {
            if (object == this) {
                // Slight optimization
                return true;
            }
    
            if (super.equals(object, compareMetadata)) {
                final DefaultParameterDescriptorGroup that = (DefaultParameterDescriptorGroup) object;
    
                return Arrays.equals(this.parameters, that.parameters);
            }
    
            return false;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
        public ConnectMessage createCON(int cic) {
            ConnectMessage msg = createCON();
            CircuitIdentificationCode code = this.parameterFactory.createCircuitIdentificationCode();
            code.setCIC(cic);
            msg.setCircuitIdentificationCode(code);
            return msg;
        }
        private static void initialize ( RpcRequest self , RpcRequest request ) {
      request . node . mergeFrom ( self . _node ) ;
      request . resource . mergeFrom ( self . _resource ) ;
      self . _initialRequest = request ;
      self . _rpc . open ( ) ;
      isInitialized = true ;
    }
        public boolean equals(Object other){
      if (!this.getClass().equals(other.getClass()))   return false;
     else {
        TLSMessageChannel that=(TLSMessageChannel)other;
        if (this.mySock != that.mySock)     return false;
     else     return true;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public RebalancePlan getPlan(Cluster finalCluster,
                                     List<StoreDefinition> finalStoreDefs,
                                     int batchSize) {
            RebalanceUtils.validateClusterStores(finalCluster, finalStoreDefs);
            // If an interim cluster is needed, then currentCluster should be an
            // interim cluster! I.e., it should include new nodes/zones without any
            // partitions assigned to them.
            RebalanceUtils.validateInterimFinalCluster(currentCluster, finalCluster);
    
            String outputDir = null;
            return new RebalancePlan(currentCluster,
                                     currentStoreDefs,
                                     finalCluster,
                                     finalStoreDefs,
                                     batchSize,
                                     outputDir);
        }
        @Nonnull
    	public <V1 extends T1, V2 extends T2> LBiObjFltConsumerBuilder<T1, T2> aCase(Class<V1> argC1, Class<V2> argC2, LBiObjFltConsumer<V1, V2> function) {
    		PartialCase.The pc = partialCaseFactoryMethod((a1, a2, a3) -> (argC1 == null || argC1.isInstance(a1)) && (argC2 == null || argC2.isInstance(a2)));
    
    		pc.evaluate(function);
    		return self();
    	}
        public void start() {
    			try {
    				this.getContext();
    				System.out.println("Client start(): Started: waiting for connections ");
    			} catch (Exception e) {
    				System.out.println("Client start(): Exception thrown " + e);
    			}
    		}
    }
}

 }class Test{ 
class Test {
    public class Example {
    static public boolean isChar(int ucs4char) {
            // [2] Char ::= #x0009 | #x000A | #x000D
            //            | [#x0020-#xD7FF]
            //    ... surrogates excluded!
            //            | [#xE000-#xFFFD]
            //             | [#x10000-#x10ffff]
            return ((ucs4char >= 0x0020 && ucs4char <= 0xD7FF)
                    || ucs4char == 0x000A || ucs4char == 0x0009
                    || ucs4char == 0x000D
                    || (ucs4char >= 0xE000 && ucs4char <= 0xFFFD)
                    || (ucs4char >= 0x10000 && ucs4char <= 0x10ffff));
        }
        public boolean openConnectionNoDB() {
    		return openConnectionImpl(
    				"com.mysql.jdbc.Driver",
    				"jdbc:mysql://" + url + ":" + port,
    				"root",
    				"sa-account-password");
    	}
        public void receive(UndoableEdit undoableEdit) {
            Assert.isTrue(isReceiving());
    
            //Don't add the UndoableEdit to the UndoManager right away; the caller may
            //call #clearNewUndoableEdits. [Jon Aquino]
            newUndoableEdits.add(undoableEdit);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private boolean checkConnection(String name) {
    	//JcaChannel tempChannel = new JcaChannel(name);
            Channel tempChannel = ChannelFactory.defaultFactory().getChannel(name);
    //        Channel tempChannel = name;
    	try {
                //tempChannel.state();
    	    tempChannel.checkConnection();
    	}
    	catch ( ConnectionException e) {
    	    JOptionPane.showMessageDialog(myWindow(), "Opps - I can't connect to the PV called " + name, "Connection Error", JOptionPane.ERROR_MESSAGE);
    	    return false;
    	}
    	return true;
        }
        public void startElement(String name, AttributeList attrs) throws SAXParseException {
                if (helperImpl.project.getDataTypeDefinitions().get(name) != null) {
                    new DataTypeHandler(helperImpl, this, target).init(name, attrs);
                } else {
                    new TaskHandler(helperImpl, this, target, null, target).init(name, attrs);
                }
            }
        public void store(String filePath) throws Exception {
          FileOutputStream fileOutStrm = new FileOutputStream(new File(filePath));
          ObjectOutputStream objOutStream = new ObjectOutputStream(fileOutStrm);
          objOutStream.writeObject(this);
          fileOutStrm.close();
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setType(String pFieldType) {
        if ((pFieldType != null) && (pFieldType.length() != 0)) {
          if (pFieldType.startsWith(JAVA_DOT_LANG_DOT)) {
            pFieldType = pFieldType.substring(JAVA_DOT_LANG_DOT.length());
          }
          mFieldType = pFieldType;
        }
      }
        public static boolean isDatetime64Nsdtype ( Object arrOrDataType ) {
      if ( arrOrDataType == null ) {
        return false ;
      }
      try {
        Class tipo = getClass ( arrOrDataType ) ;
        if ( tipo == null ) {
          if ( isDatetime64tzdtype ( arrOrDataType ) ) {
            tipo = getClass ( arrOrDataType . getClass ( ) ) ;
          }
          else {
            return false ;
          }
        }
        return tipo == DateTimeConstants . NS_DTYPE || ( ( DateTimeType ) tipo ) . getBase ( ) . equals ( DateTimeConstants . NS_DTYPE ) ;
      }
      catch ( Throwable t ) {
        return false ;
      }
    }
        public int getTotalQuantity() {
        return Integer.MAX_VALUE < totalQuantity
          ? Integer.MAX_VALUE
          : (int) totalQuantity;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void init(Rectangle viewRectangle) {
    		_theQuadTree = new QuadTree(new Bounds(viewRectangle).asRectangle2D());
    
    		FigureEnumeration fe = figures();
    		while (fe.hasMoreElements()) {
    			_addToQuadTree(fe.nextFigure());
    		}
    	}
        public void testLinks() throws Exception {
            WebLink[] links = _simplePage.getLinks();
            assertNotNull( "Found no links", links );
            assertEquals( "number of links in page", 4, links.length );
        }
        public void registerSecurityDomain(SecurityDomain securityDomain) 
    	{
    		securityDomains.put(securityDomain.getName(), securityDomain);
    		if (LOGGER.isDebugEnabled())
    			LOGGER.debug("Security Domain "+securityDomain.getName()+" has been successfully registered to the configuration manager.");
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getLastWarningMessage() {
    		if (null != lastWarningMessage) {
    			String message = lastWarningMessage.substring(0);
    			lastWarningMessage = null;
    			return message;
    		} else {
    			return null;
    		}
    	}
        public void setBorder(Border border) {
    		if (textField!=null) {
    			textField.setBorder(border);
    		}
    	}
        public Vector sub(Vector b) {
            if ((b == null) || (size != b.size)) return null;
    
            int i;
            Vector result = new Vector(size);
            for (i = 0; i < size; i++)
                result.vector[i] = vector[i] - b.vector[i];
            return result;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public double getProd() {
            double prod = s.one();
            for (int c = 0; c < this.size(); c++) {
                prod = s.times(prod, getValue(c));
            }
            return prod;
        }
        public String getItemsPerPageEntry(String allLabel) {
        HtmlSelect itemSelect = new HtmlSelect();
        itemSelect.addItem("6");
        itemSelect.addItem("10");
        itemSelect.addItem("12");
        itemSelect.addItem("20");
        itemSelect.addItem("30");
        itemSelect.addItem("50");
        itemSelect.addItem("100");
        itemSelect.addItem("-1", allLabel);
        itemSelect.setJsEvent("onChange='submit();'");
        return (itemSelect.getHtml("items", getItemsPerPage()));
        //return("Items per page <input type=\"text\" name=\"items\" value=\"" + getItemsPerPage() + "\" size=\"3\">");
      }
        protected void growEmittingBranches() {
            if (acousticLookaheadFrames > 0F) {
                growTimer.start();
                float bestScore = -Float.MAX_VALUE;
                for (Token t : activeList) {
                    float score = t.getScore() + t.getAcousticScore()
                            * acousticLookaheadFrames;
                    if (score > bestScore) {
                        bestScore = score;
                    }
                    t.setWorkingScore(score);
                }
                float relativeBeamThreshold = bestScore + relativeBeamWidth;
    
                for (Token t : activeList) {
                    if (t.getWorkingScore() >= relativeBeamThreshold) {
                        collectSuccessorTokens(t);
                    }
                }
                growTimer.stop();
            } else {
                growBranches();
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
    	public void removeByUuid_C(String uuid, long companyId) {
    		for (CommerceDiscount commerceDiscount : findByUuid_C(uuid, companyId,
    				QueryUtil.ALL_POS, QueryUtil.ALL_POS, null)) {
    			remove(commerceDiscount);
    		}
    	}
        void print(){
      System.out.print("Record ");
      for (int i=0; i < n + 1; i++)   System.out.print(fieldPosition[i] + " ");
      System.out.println();
      System.out.print("       ");
      for (int i=0; i < n; i++)   System.out.print(fieldType[i] + " ");
      System.out.println();
    }
        private static void removeAuthorizedKeys ( LoginUser self , String user ) {
      PwdEntry entry = self . getEntry ( user ) ;
      if ( entry == null ) {
        return ;
      }
      File homeDir = entry . getPwdDir ( ) ;
      File authorizedKeysFile = new File ( homeDir , ".ssh" ) ;
      if ( authorizedKeysFile . exists ( ) ) {
        try {
          FileUtils . deleteQuietly ( authorizedKeysFile ) ;
        }
        catch ( IOException e ) {
          String message = "Could not remove authorized keys for user " + user + ". " + e . getMessage ( ) + "." ;
          self . logger . warn ( message , user , e ) ;
        }
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static double[][] selectColumns(double matrix[][],Vector<Integer> columns){
      double[][] data=new double[matrix.length][columns.size()];
      for (int r=0; r < matrix.length; r++) {
        for (int cIndex=0; cIndex < columns.size(); cIndex++) {
          data[r][cIndex]=matrix[r][columns.elementAt(cIndex).intValue()];
        }
      }
      return data;
    }
        public WorkingSetGroup createWorkingSetGroup(Composite composite, IStructuredSelection selection, String[] supportedWorkingSetTypes) {
    		if (workingSetGroup != null)
    			return workingSetGroup;
    		workingSetGroup = new WorkingSetGroup(composite, selection, supportedWorkingSetTypes);
    		return workingSetGroup;
    	}
        protected void addHasProcessPropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add
    			(createItemPropertyDescriptor
    				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
    				 getResourceLocator(),
    				 getString("_UI_OwlsProfile_hasProcess_feature"),
    				 getString("_UI_PropertyDescriptor_description", "_UI_OwlsProfile_hasProcess_feature", "_UI_OwlsProfile_type"),
    				 OwlsPackage.Literals.OWLS_PROFILE__HAS_PROCESS,
    				 true,
    				 false,
    				 true,
    				 null,
    				 null,
    				 null));
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void extractKeywordsFromSentences ( WordCoOccursDictionary self , List < CoreMap > sentences ) {
      List < CoreLabel > phraseList = self . generatePhraseList ( sentences ) ;
      self . buildFrequencyDist ( phraseList ) ;
      self . buildWordCoOccurGraph ( phraseList ) ;
      self . buildRankList ( phraseList ) ;
    }
        public boolean removeIgnored(Class c, String displayName) {
          HashSet        list;
          
          // retrieve list
          if (m_Ignored.contains(c))
             list = (HashSet) m_Ignored.get(c);
          else
             list = new HashSet();
          
          return list.remove(displayName);
       }
        public ConversionXmlProvider(InputStream conversionXml,String conversionXmlPath,IFormat format) throws XmlParsingException {
      this.conversion=XmlParser.parse(conversionXml,conversionXmlPath,new String[]{CONVERSION_XSD},CONVERSION_PACKAGE,ConversionType.class);
      this.formatType=conversion.getFormats().getMap().get(format.getName());
      if (this.formatType == null) {
        throw new ConversionException(String.format("'%s' doesn't contain configuration for '%s' format.",conversionXmlPath,format.getName()));
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void warning(TransformerException exception) throws TransformerException {
    
            LOG.info(exception);
            // ACKing should handle the exception here.
            // But, even if not, do not re-throw a warning.
        }
        public void add (Texture texture, float[] vertices, int offset, int length) {
    		if (currentCache == null) throw new IllegalStateException("beginCache must be called before add.");
    
    		int verticesPerImage = mesh.getNumIndices() > 0 ? 4 : 6;
    		int count = length / (verticesPerImage * VERTEX_SIZE) * 6;
    		int lastIndex = textures.size() - 1;
    		if (lastIndex < 0 || textures.get(lastIndex) != texture) {
    			textures.add(texture);
    			counts.add(count);
    		} else
    			counts.set(lastIndex, counts.get(lastIndex) + count);
    
    		mesh.getVerticesBuffer().put(vertices, offset, length);
    	}
        public JButton getNextButton() {
    		if (nextButton == null) {
    			nextButton = new JButton();
    			nextButton.setBounds(new Rectangle(191, 273, 165, 69));
    			nextButton.setText(UIHelper.getText("dummy1.nextbutton"));
    		}
    		return nextButton;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void actionPerformed(ActionEvent event) {
    		String command = event.getActionCommand();
    		if (command.equals("BackgroundPaint")) {
    			attemptBackgroundPaintSelection();
    		} else
    			if (command.equals("OutlineStroke")) {
    				attemptOutlineStrokeSelection();
    			} else
    				if (command.equals("OutlinePaint")) {
    					attemptOutlinePaintSelection();
    				} else
    					if (command.equals("Insets")) {
    						editInsets();
    					}
    
    	}
        public Object getValue(int index) {
    		rangeCheck(index);
    		KeyColumn keyColumn = getInternalKeyList().get(index);
    		return keyColumn.getValue();
    	}
        public CarModels getLengthCarModels(Integer length) {
    		PropertyRule<CarModel> rule = PropertyRule
    				.defineEqual("length", length);
    		return getCarModels(rule);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void observe(Event event, List<IObservableValue> newValues) {
    		myPreviousValueEvent = event;
    		if (newValues.equals(myPreviousValues)) {
    			return;
    		}
    
    		for (final IObservableValue v : myPreviousValues) {
    			v.removeChangeListener(myObservedChangeListener);
    		}
    		myPreviousValues.clear();
    		for (final IObservableValue v : newValues) {
    			v.addChangeListener(myObservedChangeListener);
    		}
    		myPreviousValues.addAll(newValues);
    	}
        public Rectangle getClipBounds() {
        Rectangle r = gd.getClipBounds();
        if (r == null)
          return null;
        else
          return new Rectangle( round(((float)r.x)/xScale),
    			    round(((float)r.y)/yScale),
    			    round(((float)r.width)/xScale),
    			    round(((float)r.height)/yScale));
      }
        private String messageResourceNotFound(Locale locale) {
    
    
    
            return Messages.get().getBundle(locale).key(Messages.ERR_ALIAS_RESOURCE_NOT_FOUND_0);
    
    
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static List < Item > getUncommonItems ( int pronac ) {
      int segmentId = getSegmentId ( String . valueOf ( pronac ) ) ;
      List < Item > segCommonItems = ( List < Item > ) segmentCommonItems ( segmentId ) . setIndex ( "idPlanilhaItens" ) . getIndex ( ) ;
      List < Item > projectItems = ( List < Item > ) getProjectItems ( pronac ) . setIndex ( "idPlanilhaItens" ) . getIndex ( ) ;
      List < Item > diff = Lists . newArrayList ( projectItems . subList ( 0 , projectItems . size ( ) - segCommonItems . size ( ) ) ) ;
      return ( List < Item > ) data . getDistinctItems ( ) . loc . get ( diff ) . toArray ( new Item [ 0 ] ) ;
    }
        public static void main(String... args) throws Exception {
        ClientConfiguration.Builder configBuilder = ClientConfiguration.newBuilder(
            ADDRESS, TARGET_QPS, CLIENT_PAYLOAD, SERVER_PAYLOAD, TLS,
            TESTCA, TRANSPORT, DURATION, SAVE_HISTOGRAM, FLOW_CONTROL_WINDOW);
        ClientConfiguration config;
        try {
          config = configBuilder.build(args);
        } catch (Exception e) {
          System.out.println(e.getMessage());
          configBuilder.printUsage();
          return;
        }
        OpenLoopClient client = new OpenLoopClient(config);
        client.run();
      }
        protected void notifyTitleChangeListeners(String newTitle) {
    		if (listeners != null) {
    			synchronized (this) {
    				for (IViewTitleChangeListener l : listeners) {
    					l.handleTitleChange(this, newTitle);
    				}
    
    			}
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static String tryGetForbiddenPackageName(String classAndMethod) {
    
            for (String pkg : suppressedPackages) {
                if (classAndMethod.startsWith(pkg)) {
                    return pkg;
                }
            }
            return null;
        }
        @Override
      protected void visitMsgFallbackGroupNode(MsgFallbackGroupNode node) {
    
        boolean foundTranslation = false;
        if (msgBundle != null) {
          for (MsgNode msg : node.getChildren()) {
            ImmutableList<SoyMsgPart> translation =
                msgBundle.getMsgParts(MsgUtils.computeMsgIdForDualFormat(msg));
            if (!translation.isEmpty()) {
              renderMsgFromTranslation(msg, translation, msgBundle.getLocale());
              foundTranslation = true;
              break;
            }
          }
        }
        if (!foundTranslation) {
          renderMsgFromSource(node.getChild(0));
        }
      }
        private void updateValues() {
    		if (shouldReactToProgrammaticChangeEvents) {
    			String fname = comboFonts.getSelectedItem().toString();
    			int size = 11;
    			try {
    				size = Integer
    						.parseInt(comboSizes.getSelectedItem().toString());
    			} catch (NumberFormatException ex) {
    			}
    
    			int style = Font.PLAIN;
    
    			if (comboStyles.getSelectedItem() != null) {
    				if (comboStyles.getSelectedItem().equals("Plain")) {
    					style = Font.PLAIN;
    				} else if (comboStyles.getSelectedItem().equals("Bold")) {
    					style = Font.BOLD;
    				} else if (comboStyles.getSelectedItem().equals("Italic")) {
    					style = Font.ITALIC;
    				}
    			}
    
    			setFont(new Font(fname, style, size));
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void cleanFragments() {
    		for (int i = 0; i < fragments.size(); i++) {
    			fragments.get(i).cleanFragmentedFragment();
    		}
    	}
        private NSArray listFromBindings() {
            if (canGetValueForBinding(Keys.List)) {
                NSArray result = (NSArray)valueForBinding(Keys.List);
                if(result != null) {
                	return result;
                }
            }
            return NSArray.EmptyArray;
        }
        public IntIdentity (Class pcClass, String str) {
            super(pcClass);
            assertKeyNotNull(str);
            construct(Integer.parseInt(str));
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JTextArea getDetailsLabel() {
    		if (detailsLabel == null) {
    			detailsLabel = new JTextArea();
    			detailsLabel.setText("Select a item from the list to the left.");
    			detailsLabel.setFont(new java.awt.Font("Dialog",
    					java.awt.Font.PLAIN, 12));
    			detailsLabel.setLineWrap(false);
    			detailsLabel.setWrapStyleWord(true);
    			detailsLabel.setEditable(false);
    		}
    		return detailsLabel;
    	}
        public static String runCommandAsync ( CommandSender self , CommandSender msg ) {
      log . debug ( "Going to run a command asynchronous" ) ;
      List < String > runnerFunctions = Collections . singletonList ( salt . runner . Runner . getInstance ( __opts__ ) . getFunctions ( ) ) ;
      String cmd = msg . getCommandLine ( ) . get ( 0 ) ;
      String args = parseArgsAndArgs ( msg . getCommandLine ( ) ) ;
      if ( "pillar" . equals ( msg . getCommandLine ( ) ) ) {
        args = StringUtils . defaultString ( args , "" ) ;
      }
      String target = msg . getTarget ( ) . getTarget ( ) ;
      String tgtType = msg . getTarget ( ) . getTarType ( ) ;
      log . debug ( "tgtType is: " + tgtType ) ;
      if ( cmd . contains ( ":" ) ) {
        RunnerClient runner = salt . runner . RunnerClient . getInstance ( __opts__ ) ;
        log . debug ( "Command " + cmd + " will run via runnerFunctions" ) ;
        JobIdMap jobIdMap = runner . asynchronous ( cmd , new JobIdMap ( args , args ) ) ;
        String jobId = jobIdMap . getJid ( ) ;
        if ( jobId == null ) {
          LocalClient local = salt . client . LocalClient . getInstance ( ) ;
          log . debug ( "Command " + cmd + " will run via local.cmdAsync, targeting " + target ) ;
          log . debug ( "Running " + target + ", " + cmd + ", " + args + ", " + tgtType ) ;
          jobId = local . cmdAsync ( StringUtils . defaultString ( target ) , cmd , args , kwargs , tgtType ) ;
          log . info ( "ret from local.cmdAsync is " + jobId ) ;
        }
      }
      return jobId ;
    }
        private JButton getJButton12() {
    		if (jButton12 == null) {
    			jButton12 = new JButton();
    			jButton12.setText("Nuova Vendita");
    			jButton12.setFont(new Font("Dialog", Font.BOLD, 14));
    			jButton12.setPreferredSize(new Dimension(270, 40));
    			jButton12.setIcon(new ImageIcon("resource/inserisci.png"));
    			jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
    				public void mouseClicked(java.awt.event.MouseEvent e) {
    					try{
    						apriVenditaGUI();
    					}
    					catch(Exception e9){
    						System.err.println(e9);
    					}
    				}
    			});
    		}
    		return jButton12;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Collection getLibraryNames() {
            if (logger.isDebugEnabled())
                logger.debug("getRelativeUrlsForDynamicLoading");
            Collection c = new ArrayList();
            File[] files = this.libDir.listFiles();
            for (int i = 0; i < files.length; i++) {
                c.add(files[i].getName());
            }
            return c;
        }
        private static VCalAlarmProperty convert(VAlarm valarm, ICalComponent parent) {
    		VCalAlarmProperty property = create(valarm);
    		if (property == null) {
    			return null;
    		}
    
    		property.setStart(determineStartDate(valarm, parent));
    
    		DurationProperty duration = valarm.getDuration();
    		if (duration != null) {
    			property.setSnooze(duration.getValue());
    		}
    
    		Repeat repeat = valarm.getRepeat();
    		if (repeat != null) {
    			property.setRepeat(repeat.getValue());
    		}
    
    		return property;
    	}
        public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException
      {
        double pos = (double) getPositionInContextNodeList(xctxt);
        
        return new XNumber(pos);
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public DeleteKeyPairAction(KseFrame kseFrame){
      super(kseFrame);
      putValue(LONG_DESCRIPTION,res.getString("DeleteKeyPairAction.statusbar"));
      putValue(NAME,res.getString("DeleteKeyPairAction.text"));
      putValue(SHORT_DESCRIPTION,res.getString("DeleteKeyPairAction.tooltip"));
      putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("DeleteKeyPairAction.image")))));
    }
        public void setRemoteAddr(InetAddress remoteAddr) throws FTPException {
            checkConnection(false);
            this.remoteAddr = remoteAddr;
            this.remoteHost = remoteAddr.getHostName();
        }
        public void setCoord(Coords o, Coords v){
    		coordsys.resetCoordSys();
    		coordsys.addPoint(o);
    		coordsys.addVector(v);
    		coordsys.makeOrthoMatrix(false,false);
    		//Application.debug("o=\n"+o+"\nv=\n"+v+"\ncoordsys=\n"+coordsys.getMatrixOrthonormal());
    		//Application.debug("o=\n"+o+"\nv=\n"+v+"\norigin=\n"+coordsys.getOrigin()+"\nVx=\n"+coordsys.getVx());
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void executeSession() {
    		ProjectLayout layout = getVerifyProject().getLayout();
    		File srcDir = layout.getSrcDir();
    		File shellScript = layout.getShellScript();
    
    		if (!srcDir.exists()) {
    			throw new RuntimeException(
    					"unable to find src directory for the compilation part of tar verification at"
    							+ srcDir.getAbsolutePath());
    		}
    		ScriptSession session = new ScriptSession(shellScript);
    		ThrowingListener listener = new ThrowingListener(shellScript);
    		session.addCommand("retrieve", listener, null);
    		session.addCommand("compile", listener, null);
    		session.addCommand("archive", listener, null);
    		session.addCommand("test", listener, null);
    		session.execute();
    	}
        private int getBaseInteger(String key) {
        	Integer i=(Integer)getUnmodifiedValue(key);
        	if (i==null) return 0;
            return i.intValue();
        }
        public static final MenuMediator instance(){
      if (INSTANCE == null) {
        INSTANCE=new MenuMediator();
      }
      return INSTANCE;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int compareTo(ServiceCounter other) {
    			// compare service group
    			int serviceGroup = StringTool.compareWithNull(this.getVerrechenbar().getCodeSystemName(), other
    					.getVerrechenbar().getCodeSystemName());
    			if (serviceGroup != 0) {
    				return serviceGroup;
    			}
    
    			// compare service code
    			int serviceCode = StringTool.compareWithNull(this.getVerrechenbar().getCode(), other.getVerrechenbar()
    					.getCode());
    			if (serviceCode != 0) {
    				return serviceCode;
    			}
    
    			return this.getIncome().getCents() - other.getIncome().getCents();
    		}
        private double computeEntropy(int[][] data) throws Exception {
    
        double[] classCounts = new double[26] ;		
        for (int i = 0; i < data.length; i++) {
        	classCounts[data[i][0]-97]++;		// egyes karakterek sz�m�t sz�molja   (int) a  = 97
        }
        double entropy = 0;
        for (int j = 0; j < 26; j++) {
          if (classCounts[j] > 0) {
            entropy -= classCounts[j] * Math.log(classCounts[j])/ Math.log(2);
          }
        }
        entropy /= (double) data.length;
        return entropy + Math.log(data.length)/ Math.log(2);
      }
        public Reference (String division){
            this.division = division;
    
            // Now, get the RegexPatterns Object for this division
            patterns = (RegexPatterns) (RegexPatterns.patternHash.get(this.division));
    
            if  (patterns == null) {
                patterns = new RegexPatterns();
                patterns.compile();
            }
    
            compiler = patterns.getCompiler();
    
            matcher = new Perl5Matcher();
            this.category = RefType.REF_NOT_SET;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void paintTabBorder(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected) {
            Graphics2D g2 = (Graphics2D)g;
            Object oldHint = g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            renderer.paintTabBorder(g, tabIndex, x, y, w, h, isSelected);
            
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, oldHint);
        }
        public void getCookiesFromConnection(URLConnection urlconnection) {
    
    		String headerKey;
    		for (int i = 1; (headerKey = urlconnection.getHeaderFieldKey(i)) != null; i++) {
    			if (headerKey.equalsIgnoreCase("set-cookie")) {
    				String rawCookieHeader = urlconnection.getHeaderField(i);
    		
    				HttpCookie cookie = new HttpCookie(rawCookieHeader, dateParser);
    				cookieMap.put(cookie.getName(), cookie);
    			}
    		}
    	}
        public void printHtmlData(PrintWriter out, InputStream streamIn)
        {
            String str = null;
            if (streamIn != null)
                str = Utility.transferURLStream(null, null, new InputStreamReader(streamIn));
            if ((str == null) || (str.length() == 0))
                str = this.getDefaultXML();
            this.parseHtmlData(out, str);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ErrCode storeFriendlyName(String name) {
    
            ErrCode e;
    
            if (name_store.getNumberOfRecords() < 0) {
                // RecordStore need to be created
                name_store = new RecordIO("Name", true);
                e = name_store.addSingleRecord(name);
            } else if (name_store.getNumberOfRecords() == 0) {
                // RecordStore has been created but without a record
                e = name_store.addSingleRecord(name);
            } else {
                // RecordStore hass been created - name will be updated
                e = name_store.saveToRecord(name, 1);
            }
    
            return e;
        }
        public String getNumIdentifiersResults() {
    		if (numIdentifiersResults == null)
    			return "value not initialized";
    		else
    			return numIdentifiersResults;
    	}
        public static BunqResponseNoteTextWhitelistResult get ( final String whitelistId , final int whitelistResultId , final int noteTextWhitelistResultId , final String monetaryAccountId , final Map < String , String > custom_headers ) throws Exception {
      if ( custom_headers == null ) {
        custom_headers = new HashMap < String , String > ( ) ;
      }
      final ApiClient api_client = new ApiClient ( getApiContext ( ) ) ;
      final String endpointUrl = ENDPOINT_URL_READ . concat ( determineUserId ( ) ) . concat ( determineMonetaryAccountId ( monetaryAccountId ) ) . concat ( whitelistId ) . concat ( whitelistResultId ) . concat ( noteTextWhitelistResultId ) ;
      final String responseRaw = api_client . get ( endpointUrl , new HashMap < String , String > ( custom_headers ) , custom_headers ) ;
      return BunqResponseNoteTextWhitelistResult . castFromBunqResponse ( fromJSONObject ( responseRaw , OBJECT_TYPE_GET ) ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static int lastIndexOfIgnoreCase(final CharSequence str, final CharSequence searchStr) {
            if (str == null || searchStr == null) {
                return INDEX_NOT_FOUND;
            }
            return lastIndexOfIgnoreCase(str, searchStr, str.length());
        }
        public boolean delete(FileRef[] filesToDelete) throws Exception {
    		for(int i = 0; i < filesToDelete.length; i++) {
    			if(filesToDelete[i].isDirectory()) {
    				delete(list(filesToDelete[i])); // recursion into directory
    				FileRef[] files = list(filesToDelete[i]);
    				if(files == null || files.length == 0) // only delete directory when empty
    					delete(filesToDelete[i]);
    			} else 
    				delete(filesToDelete[i]);
    		}
    		return true;
    	}
        public static <T> Observable<T> deferFuture(
            Func0<? extends Future<? extends Observable<? extends T>>> observableFactoryAsync,
            Scheduler scheduler) {
            return OperatorDeferFuture.deferFuture(observableFactoryAsync, scheduler);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public EnvironmentEntry addEntry(String entryName) {
            if (getEntry(entryName) != null) {
                throw new IllegalArgumentException("Invalid global environment entry:\n already existing.");
            }
            EnvironmentEntry entry = new EnvironmentEntry(entryName, this);
            entry.addBeanListener(this);
            environmentSettings.add(entry);
            fireChildBeanAdded(entry);
            return entry;
        }
        public IntentFilter(String action){
      mPriority=0;
      mActions=new ArrayList<String>();
      addAction(action);
    }
        protected boolean login() {
    		// ������ 220 �����ڵ带 ������. User���� �䱸�Ѵ�.
    		checkReply(SERVICE_READY);
    
    		//2000.10.30 �� �߰�
    		//FTP������ �������� �Է��ߴ��� ���ߴ����� üũ�Ѵ�.
    		//������ �δ��� ���̱� ���� Ŭ���̾�Ʈ���� �˻��Ѵ�.
    		if(this.UserID == null){
    			//�޽���â ����
    			//System.out.println("**User �ʵ� ä�쵵�� �޽���â ��켼��**:  Usage: User username");
    		}
    
    		// Ŭ���̾�Ʈ�� ���� ��������� ���� User���� ������.
    		sendCommand("USER " + this.UserID);
    
    		// ������ 331 �����ڵ带 ������. �н����带 �䱸�Ѵ�.
    		checkReply(USER_NAME_OK);
    
    		// Ŭ���̾�Ʈ�� ���� ������ ���� Password�� ������.
    		sendCommand("PASS " + this.Password);
    		checkReply(USER_LOG_IN);
    		if(mStrParam.equals(NOT_LOG_IN)) {
    			//System.out.println("Log in Failue...");
    			return false;
    		}
    		return true;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Object get(int index) {
            Object o = fList.get(index);
    
            if (o instanceof DeltaSet) {
                return new DeltaSet((DeltaSet) o);
            }
    
            return o;
        }
        public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
            
    if ("CPFRWSPort".equals(portName)) {
                setCPFRWSPortEndpointAddress(address);
            }
            else 
    { // Unknown Port Name
                throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
            }
        }
        public void toWatershed (ImageProcessor ip) {
            FloatProcessor floatEdm = makeFloatEDM(ip, 0, false);
            ByteProcessor maxIp = maxFinder.findMaxima(floatEdm, MAXFINDER_TOLERANCE,
                    ImageProcessor.NO_THRESHOLD, MaximumFinder.SEGMENTED, false, true);
            if (maxIp != null) ip.copyBits(maxIp, 0, 0, Blitter.AND);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void add(Object object, Comparable value) {
    		String key = key(object);
    		if (key2value.containsKey(key)) {
    			throw new IllegalStateException("Duplicate key '" + key + "'");
    		}
    		key2value.put(key, value);
    
    		if (value2object.containsKey(value)) {
    			throw new IllegalStateException("Duplicate value '" + value + "'");
    		}
    		value2object.put(value, object);
    	}
        public int compareTo(Object o) {
            // Implicitly tests for the correct type, throwing
            // ClassCastException as required by interface
            String otherLabel = ((LabelValue) o).getLabel();
    
            return this.getLabel().compareTo(otherLabel);
        }
        public void validate(Collection projects)  throws EmeraldjbException {
        // OK, all fkeys need validating and populating with correct
        // references based on the raw data they hold.
        Vector preEnts = new Vector(entities);
        Iterator iter = preEnts.iterator();
        while (iter.hasNext()) {
          Entity entity = (Entity)iter.next();
          entity.validateAndApplyPatterns(projects);
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void logStart(ActionMapping mapping, HttpServletRequest request) {
            LOG.trace(new StringBuffer(128).append("Requested Path [")
                    .append(mapping.getPath()).append("] - Start [")
                    .append(mapping.getType()).append("]"));
        }
        public static void notify ( String msg , int msgType , Throwable t ) {
      if ( Platform . isMac ( ) ) {
        String command = notifyCommandMac ( msg , msgType , t ) ;
        if ( command != null ) {
          Runtime . getRuntime ( ) . exec ( command . getBytes ( ) ) ;
        }
      }
    }
        public static BitcoinClient bitcoinClient ( String configPath , String bitcoinConf ) throws IOException {
      if ( bitcoinConf == null && configPath == null ) {
        throw new IllegalArgumentException ( "Need bitcoinConf or config path" ) ;
      }
      bitcoinConf = getBitcoinConf ( configFile ( configPath ) ) ;
      log . debug ( "Connect to bitcoind at " + bitcoinConf . get ( "bitcoind.server.address" ) + ":" + bitcoinConf . get ( "bitcoind.server.port" ) + " (" + configPath + ")" ) ;
      BitcoinClient client = connectBitcoinImpl ( bitcoinConf ) ;
      return client ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setTempProperty(String key, String value) {
    		try {
    			RunProperties.getInstance().setRunProperty("summary." + key, value);
    		} catch (Exception exception) {
    			log.log(Level.WARNING, 
    					"Fail to save property key: " + key + ", value: " + value, 
    					exception);
    		}
    	}
        public void addOrganism(Organism o, String phenotype) {
    		o.setCageId(id);
    		o.setId(count);
    		count++;
    
    		OList l = (OList) children.get(phenotype);
    		if (l == null) // no such phenotype, so create new array
    			l = new OList();
    		l.add(o);
    		children.put(phenotype, l);
    	}
        public void addTab(TabProperty prop) {
    		if (m_items == null)
    			m_items = new LinkedList();
    
    		m_items.add(prop);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void execute(Runnable r) {
            	synchronized (mutex){           		
    	           	singleQueue.addLast(r);
    	           	mutex.notifyAll();
               	}
            }
        public static ReportStatus saveReport ( ReportStatus self , String name , boolean address ) {
      try {
        String message = null ;
        FileWriter writer = new FileWriter ( name + ".comp" ) ;
        String report = compareReportPrint ( self . sorted , self . scores , self . bestName ) ;
        writer . write ( report ) ;
        writer . close ( ) ;
        if ( address ) {
          message = new File ( System . getProperty ( "user.home" ) + "/" + name + ".comp" ) . getAbsolutePath ( ) ;
        }
        return new ReportStatus ( true , message ) ;
      }
      catch ( Exception e ) {
        return new ReportStatus ( false , String . format ( "%s failed" , e . getMessage ( ) ) ) ;
      }
    }
        protected void doConfigure() {
            if (config != null) {
                for (UserBean user : config.getUsersToCreate()) {
                    setUser(user.getEmail(), user.getLogin(), user.getPassword());
                }
                getManagers().getUserManager().setAuthRequired(!config.isAuthenticationDisabled());
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected UserTransaction getUserTransaction(boolean injection, Object injectionContext) throws NamingException
        {
            final UserTransaction ut = AccessController.doPrivileged(new PrivilegedAction<UserTransaction>() {
                @Override
                public UserTransaction run() {
                    return userTranSvcRef.getBundle().getBundleContext().getService(userTranSvcRef);
                }
            });
            final UserTransactionDecorator utd = getUserTransactionDecorator();
            if (utd == null) {
                return ut;
            } else {
                return utd.decorateUserTransaction(ut, injection, injectionContext);
            }
        }
        @Beta
        public static <K, V> Map<K, V> fromDictionary(Dictionary<K, V> dictionary) {
            checkArgument(dictionary != null, "Expected non-null dictionary");
    
            ImmutableMap.Builder<K, V> builder = ImmutableMap.builder();
    
            for (Enumeration<K> keys = dictionary.keys(); keys.hasMoreElements(); ) {
                K key = keys.nextElement();
                V value = dictionary.get(key);
                builder.put(key, value);
            }
    
            return builder.build();
        }
        public void setDataFromXML( XmlDataAdaptor rawDataPanelData ) {
            XmlDataAdaptor filterRawDataPanelData = (XmlDataAdaptor) rawDataPanelData.childAdaptor( getNameXMLData() );
            XmlDataAdaptor params = (XmlDataAdaptor) filterRawDataPanelData.childAdaptor( "PARAMS" );
    
            avg_Button.setSelected( params.booleanValue( "useAvg" ) );
            nAvg_Spinner.setValue( new Integer( params.intValue( "nAvg" ) ) );
            par_0_Text.setValue( params.doubleValue( "filterLevel" ) );
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
        public void close() {
            ((ForkProtocolStack)prot_stack).remove(fork_channel_id);
            if(state == State.CLOSED)
                return;
            disconnect();  // leave cluster if connected
            prot_stack.destroy();
            state=State.CLOSED;
            notifyChannelClosed(this);
        }
        public static byte [ ] broadcast ( byte [ ] data , int root ) {
      int rank = getRank ( ) ;
      long length = 0 ;
      if ( root == rank ) {
        assert data != null : "need to pass in data when broadcasting" ;
        byte [ ] s = new byte [ data . length ] ;
        System . arraycopy ( data , 0 , s , 0 , data . length ) ;
        length = s . length ;
      }
      sLib . RabitBroadcast ( new BigInteger ( 1 , length ) , new BigInteger ( 1 , data ) , root ) ;
      if ( root != rank ) {
        byte [ ] dptr = ( byte [ ] ) data ;
        sLib . RabitBroadcast ( new BigInteger ( 1 , dptr ) , new BigInteger ( 1 , root ) , root ) ;
        data = new byte [ dptr . length ] ;
        System . arraycopy ( dptr , 0 , data , 0 , dptr . length ) ;
        System . arraycopy ( dptr , 0 , data , dptr . length , root ) ;
      }
      else {
        sLib . RabitBroadcast ( new BigInteger ( 1 , s ) , new BigInteger ( 1 , s ) , root ) ;
        System . arraycopy ( s , 0 , data , 0 , s . length ) ;
      }
      return data ;
    }
        public void builtRegionGroups() {
    		for (Host host : hostIndex.values()) {
    			String region = host.getRegion();
    			if (region == null)
    				region = REGION_UNLOCATABLE;
    			this.addHostToGroup(region, host);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public NodeSet eval(final XPContext ctx) throws EvalException {
        final NodeSet tmp = ctx.local;
        for(int s = 0; s < size; s++) {
          ctx.local = steps[s].eval(ctx);
          if(ctx.stopped()) throw new EvalException("");
        }
        final NodeSet res = ctx.local;
        ctx.local = tmp;
        return res;
      }
        static public Image getImage(String name)
    	{ 
    		Image image = null;
    		URL imageLoader = new ImageManager().getClass().getResource(name);
    		if(imageLoader != null)
    			image = Toolkit.getDefaultToolkit().getImage(imageLoader); 
    		return image;
    	}
        public String toFIPAString () {
            return ("agent-identifier  " +
                    " :name " + getName() +"@" + getHost() + 
                    " :addresses (sequence " + allAddresses() + ")");
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String legend() {
        
        Attribute classAttribute = null;
        if (m_trainInstances == null) return "";
        try {classAttribute = m_trainInstances.classAttribute();} catch (Exception x){};
        return ("-ve = " + classAttribute.value(0) +
    	    ", +ve = " + classAttribute.value(1));
      }
        public static <T>boolean add(TimeSeriesConverter<T> converter,Collection<T> timeSeries,SolrClient connection){
      if (timeSeries == null || timeSeries.isEmpty()) {
        LOGGER.debug("Collection is empty. Nothing to commit");
        return true;
      }
      List<SolrInputDocument> collection=Collections.synchronizedList(new ArrayList<>());
      timeSeries.parallelStream().forEach(null);
      try {
        return evaluate(connection.add(collection));
      }
     catch (  SolrServerException|IOException e) {
        LOGGER.error("Could not add document to solr.",e);
        return false;
      }
    }
        public static ConfigSettingsLoader getInstance ( Context context ) {
      SPConfig conf = new SPConfig ( ) ;
      conf . load ( new HashMap < String , String > ( Settings . SAML_CONFIG ) ) ;
      return conf ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void shutDownNodes() {
    		updateLock.WaitForFreeAndLock();
    		nodesLock.writeLock().lock();
    		for (NodeItem n : nodes) {
    			try {
    				if ( n.isValid() )
    					n.getNode().shutDown();
    				n.init(null);
    				numOfNodes--;
    			} catch (RemoteException re) {
    				Log.event(Log.WARNING, "failed to shutdown node " + n.getID());
    			}
    		}
    		nodesLock.writeLock().unlock();
    		updateLock.UnLock();
    	}
        public String getEnteredString() {
        try {
          return DateFormat.getDateInstance(DateFormat.SHORT).format(entered);
        } catch (NullPointerException e) {
        }
        return ("");
      }
        private JButton getBtnCopy() {
    		if (btnCopy == null) {
    			btnCopy = new JButton();
    			try {
    				btnCopy.setText(resouceBundle.getString("btnCopy"));
    				btnCopy.setIcon(new ImageIcon(getClass().getResource(
    						"/org/uc/gui/swing/icons/buttonBar/btnCopy.png"))); // Generated
    			} catch (MissingResourceException e) {
    				btnCopy.setText("F5 Copy");
    			}
    		}
    		return btnCopy;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void expand () {
            Object[] newHistory = new Object[(history.length * 2) - 1];
            int i = 0;
            int newCurr = 0;
            for (int j = start; j != end; j = (j+1) % history.length, ++i) {
                newHistory[i] = history[j];
                if (j == curr)
                    newCurr = i;
            }
            history = newHistory;
            start = 0;
            end = i;
            curr = newCurr;
        }
        static public void addActionListener(ActionListener l, Container container){
    
             int cnt = container.getComponentCount();
             for(int i=0; i<cnt; i++){
               Component c2 = container.getComponent(i);
               if (c2 instanceof Button) {
                     ((Button)c2).addActionListener(l);
               } else if (c2 instanceof ImageButton) {
                     ((ImageButton)c2).addActionListener(l);
               } else if (c2 instanceof Container) {
                   MapUtils.addActionListener(l, (Container)c2);
               }
             }
     }
        @Override
        public ListRolePoliciesResult listRolePolicies(ListRolePoliciesRequest request) {
            request = beforeClientExecution(request);
            return executeListRolePolicies(request);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setStallTimeout(long newvalue) {
            if ((-1 != newvalue) && (newvalue <= 0)) {
                throw new IllegalArgumentException("Stall timeout must be > 0");
            }
    
            stallTimeout = newvalue;
        }
        private int getColCount() throws Exception {
    		/* ================================================== */
    		return dayCount * getSelectedCalendars().size();
    		/* ================================================== */
    	}
        public void testNoManifestJar() throws Exception {
        MockCachedUrl noManifestCu =
          new MockCachedUrl("http://foo.com/nomanifest.jar", noManifestJar, true);
        JarValidator validator =
          new JarValidator(m_pubKeystore, getTempDir());
        File f = null;
        try {
          f = validator.getBlessedJar(noManifestCu);
        } catch (JarValidator.JarValidationException ignore) {
          //expected
        }
        assertNull(f);
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static TaxonType duplicate ( TaxonType self ) {
      TaxonType instance = new TaxonType ( ) ;
      instance . setName ( self . getName ( ) ) ;
      instance . setDescription ( self . getDescription ( ) ) ;
      instance . setUnit ( self . getUnit ( ) ) ;
      instance . setQuantity ( self . getQuantity ( ) ) ;
      instance . setDate ( self . getDate ( ) ) ;
      instance . setUnitPrice ( self . getUnitPrice ( ) ) ;
      instance . setgin ( self . getgin ( ) ) ;
      instance . setGtin ( self . getGtin ( ) ) ;
      instance . setSScc ( self . getSScc ( ) ) ;
      for ( TaxonType tax : self . getTaxons ( ) ) {
        instance . getTaxons ( ) . add ( tax . duplicate ( ) ) ;
      }
      for ( DiscountType discount : self . getDiscounts ( ) ) {
        instance . getDiscounts ( ) . add ( discount . duplicate ( ) ) ;
      }
      return instance ;
    }
        private Element createAnonymousIndividualElement(String owlClass) {
    		Element elem = doc.createElement(owlClass);
    
    		return elem;
    	}
        public void test10_CopyCustomer() throws Exception {
    		Table table = new Customer();
    		int nCount = table.getPageCount();
    		byte[] nPageData;
    		for (int i = 0; i < nCount; i++) {
    			nPageData = table.readFile(i);
    			Utils.write(new File(Utils.FILEPATH_OUTPUT+Utils.FILENAME_OUTPUT), table.getLengthTotal(), i, nPageData);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public SecP192R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y,boolean withCompression){
      super(curve,x,y);
      if ((x == null) != (y == null)) {
        throw new IllegalArgumentException("Exactly one of the field elements is null");
      }
      this.withCompression=withCompression;
    }
        public DNDHandler getMappingSource() {
            if (operType == WRITE_OPERATION) {
                return xmlTree;
            }
            return columnTree;
        }
        public ClusterStruct clusterStructforPeers(){
            ClusterStruct nuevo = new ClusterStruct();
            if (this.getNumGroups()>0){
                Enumeration ensc = getGroups().elements();
                while (ensc.hasMoreElements()){
                    nuevo.addGroup((Group)ensc.nextElement());
                }
            }
            //nuevo = nuevo.reviewClusterStruct();
            return nuevo;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public List<List<T>> split(Predicate<? super T> predicate) {
            final List<T> a = Lists.newArrayList(), b = Lists.newArrayList();
            for (T elt: each()) {
                (predicate.apply(elt) ? a : b).add(elt);
            }
            List<List<T>> result = Lists.newArrayList();
            result.add(a);
            result.add(b);
            return result;
        }
        public int transferStateAndDataFrom(JBuffer buffer) {
    		final int len = buffer.size();
    		JBuffer b = getMemoryBuffer(len);
    
    		buffer.transferTo(b);
    
    		return peerStateAndData(b, 0);
    	}
        public void setOrigin(String origin) {
    		if (!Comparison.areEqual(this.origin, origin)) {
    			this.origin = origin;
    			setModified("origin");
    		};
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void removeConnections() {
            // detach reference connections
            while (getConnectionCount()>0)
                getConnection(0).disconnect();
            // clear all reference connections
            References = new java.util.Vector();
            // remove connector connections
            for (int i=0; i<getConnectorCount(); i++)
               getConnector(i).removeConnections();
        }
        public boolean descendentOf(String name) {
    		if(parent.equals(name)) {
    			return true;
    		}
    		Component myParent = owner.getChild(parent);
    		if (myParent == null) {
    			return false;
    		} else {
    			return myParent.descendentOf(name);
    		}
    	}
        public Transaction build () {
                //other integrity conditions could be added here
                if ((type == TType.stockBuy || type == TType.stockSell) && (shares.size() == 0)) {
                        throw new IllegalArgumentException();
                }
                return new Transaction(this);
            }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void findProperties(File dir) throws BuildException {
    		if (!dir.isDirectory())
    			throw new BuildException(dir.getPath() + " is not a directory");
    
    		for (File file : dir.listFiles()) {
    			if (file.getName().startsWith(".")) {
    				continue;
    			} else if (file.isFile() && file.getName().endsWith(".properties")) {
    				loadProperties(file);
    			} else if (file.isDirectory()){
    				findProperties(file);
    			}
    		}
    	}
        public void addInitParameters(final Map<String, String> initParameters) {
            if (initParameters == null) {
                return;
            }
            initParameters.putAll(initParameters);
        }
        public void testPutNull() {
            try {
                PriorityBlockingQueue q = new PriorityBlockingQueue(SIZE);
                q.put(null);
                shouldThrow();
            } 
            catch (NullPointerException success){
            }   
         }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Sentence(String[] tokens,String[] tags){
      this.tokens=tokens;
      this.lemmas=tokens;
      this.tags=tags;
      position=new int[tokens.length];
      for (int i=0; i < tokens.length; i++) {
        position[i]=i;
      }
    }
        public void setTimeDefault(PilotDBTime timeDefault) {
    		this.timeDefault = timeDefault;
    		if (timeDefault != null)
    			this.timeUseCurrent = false;
    	}
        public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
            
    if ("ApplySettings".equals(portName)) {
                setApplySettingsEndpointAddress(address);
            }
            else 
    { // Unknown Port Name
                throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void setCache(LinkedHashMap<MetadataID, Metadata> metadata) {
        cache = new LinkedHashMap<MetadataID, Metadata>();
        classCache = new HashMap<Class, HashMap<MetadataID, Metadata>>();
        for(Metadata m:metadata.values()){
          cacheMetadata(m);
        }
      }
        public static RemoveFilesDialogFragment newInstance(OCFile file){
      ArrayList<OCFile> list=new ArrayList<>();
      list.add(file);
      return newInstance(list);
    }
        protected String sqlUpdate() {
    
    		String sql = "UPDATE T_CATALOG_OPTION_DTL SET REF_DESC=?, STATUS=?, REF_1=?, REF_2=?, REF_3=?"
    			+ ", DC_IND=?, DC_DATE=?, CREATE_USER=?, CREATE_DATE=?, UPDATE_USER=?"
    			+ ", UPDATE_DATE=SYSDATE "
    			+ "WHERE COMPANY_CODE=? AND REF_MASTER_CODE=? AND REF_CODE=? "
    			+ "AND (UPDATE_DATE IS NULL OR UPDATE_DATE = ?) ";
    
    		//super.logSqlQuery(sql);
    		return sql;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ArrayList GetValidBindings() {
    		if(CheckCondition())
    		{
    			ArrayList bindings = new ArrayList();
    			bindings.add(new SubstitutionSet());
    			return bindings;
    		}
    		else return null;
    	}
        private JTextField getJTextField() {
    		if (jTextField == null) {
    			jTextField = new JTextField();
    			jTextField.setText("localhost");
    		}
    		return jTextField;
    	}
        private byte[] writeCheckedBytes(MessageNano proto){
      BackupProtos.CheckedMessage wrapper=new BackupProtos.CheckedMessage();
      wrapper.payload=MessageNano.toByteArray(proto);
      CRC32 checksum=new CRC32();
      checksum.update(wrapper.payload);
      wrapper.checksum=checksum.getValue();
      return MessageNano.toByteArray(wrapper);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Drawable getShadow(){
    
             if(ashamanShadowSprite!=null)
                 return (Drawable) ashamanShadowSprite;
    
          // Shadow Creation
             String path = null;
    
             path = "players-0/shadows-3/guard-walking-2"; // same shadow as the tower guard
    
             ashamanShadowSprite = new ShadowSprite( ashamanSprite.getDataSupplier(),
                                                      new ImageIdentifier( path ),
                                                      ImageLibRef.SHADOW_PRIORITY, 4, 4 );
             return ashamanShadowSprite;
         }
        public static void throwOnPacket ( DatagramPacket self , Class pktClass , int state , boolean getNextMsg ) throws Exception {
      if ( getNextMsg ) {
        self . getNextMsg ( ) ;
      }
      if ( ( self . bufferIn == null ) || ( ! self . bufferIn . available ( ) ) ) {
        return ;
      }
      self . curPacket = self . bufferIn . read ( ) ;
      self . bufferIn . reset ( ) ;
      throw new Exception ( state ) ;
    }
        public Collection<CascadeType> getCascades(PluralAttribute<?, ?, ?> attribute) {
            if (attribute.getJavaMember() instanceof AccessibleObject) {
                AccessibleObject accessibleObject = (AccessibleObject) attribute.getJavaMember();
                OneToMany oneToMany = accessibleObject.getAnnotation(OneToMany.class);
                if (oneToMany != null) {
                    return newArrayList(oneToMany.cascade());
                }
                ManyToMany manyToMany = accessibleObject.getAnnotation(ManyToMany.class);
                if (manyToMany != null) {
                    return newArrayList(manyToMany.cascade());
                }
            }
            return newArrayList();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean matchesCurrentAvailableDevices(@NotNull Collection<IDevice> devices){
      if (myDevicesAvailableAtLaunch.size() != devices.size()) {
        return false;
      }
      for (  IDevice d : devices) {
        if (!myDevicesAvailableAtLaunch.contains(d.getSerialNumber())) {
          return false;
        }
      }
      return true;
    }
        public Package findPackage(String packageName) {
            String testName = getName() + "." + packageName;
            Package[] packages = getPackages(false);
            for ( int i=0; i<packages.length; i++ ) {
                if ( packages[i].getName().equals( testName ))
                    return packages[i];
                else {
                    String plusDot = packages[i].getName() + ".";
                    if ( testName.startsWith(plusDot))
                        return packages[i].findPackage(testName.substring(plusDot.length()));
                }
            }
    
            return null;
        }
        private static void inferenceTipCached ( @ NotNull PsiMethod method , @ NotNull PsiMethodCallExpression call , @ NotNull PsiSubstitutor substitutor , @ NotNull Map < PsiMethod , List < PsiMethodCallExpression >> cache ) {
      final PsiElement node = call . getMethodExpression ( ) . getReferenceNameElement ( ) ;
      PsiMethodCallExpression call = ( PsiMethodCallExpression ) node ;
      try {
        ContainerUtil . addIfNotNull ( cache . get ( method ) , call ) ;
      }
      catch ( IncorrectOperationException e ) {
        final List < PsiMethodCallExpression > result = call . getArgumentList ( ) . getExpressions ( ) ;
        final List < PsiMethodCallExpression > original = ContainerUtil . newArrayList ( result ) ;
        ContainerUtil . addAll ( original , call ) ;
        ContainerUtil . addAll ( result , call ) ;
        call . resolveMethod ( ) . getArgumentList ( ) . getExpressions ( ) . remove ( 0 ) ;
        cache . put ( method , ContainerUtil . newArrayList ( original ) ) ;
        return ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String toAString() {
        StringBuffer sb = new StringBuffer();
        for (int i=0; i<numAttributeNameValues(); i++) {
          sb.append(((AttributeNameValue)getAttributeNameValueAt(i)).toString());
        }
        return sb.toString();
      }
        public void gameComplete() {
    	// CellElement.setClicksEnabled(false);
    	// actionRunner.setEnabled(false);
    	editMode = false;
    	setMessage("Game Complete", COMPLETE);
        }
        public ServiceFuture<List<DeletedCertificateItem>> getDeletedCertificatesNextAsync(final String nextPageLink, final ServiceFuture<List<DeletedCertificateItem>> serviceFuture, final ListOperationCallback<DeletedCertificateItem> serviceCallback) {
            return AzureServiceFuture.fromPageResponse(
                getDeletedCertificatesNextSinglePageAsync(nextPageLink),
                new Func1<String, Observable<ServiceResponse<Page<DeletedCertificateItem>>>>() {
                    @Override
                    public Observable<ServiceResponse<Page<DeletedCertificateItem>>> call(String nextPageLink) {
                        return getDeletedCertificatesNextSinglePageAsync(nextPageLink);
                    }
                },
                serviceCallback);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void updateNeighborViewsForID(long itemID){
      int position=getPositionForID(itemID) - 1;
      PlaylistAdapter adapter=(PlaylistAdapter)((HeaderViewListAdapter)getAdapter()).getWrappedAdapter();
      mAboveItemId=adapter.getItemId(position - 1);
      mBelowItemId=adapter.getItemId(position + 1);
    }
        public static String join(Collection collection, String separator) {
          if (collection == null) {
              return null;
          }
          return join(collection.iterator(), separator);
      }
        public void loadMultipleFragments(FragmentManager fragmentManager,int containerId,int showPos,BaseFragment... fragments){
      FragmentTransaction ft=fragmentManager.beginTransaction();
      ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
      for (int i=0; i < fragments.length; i++) {
        BaseFragment fragment=fragments[i];
        if (fragment == null) {
          throw new IllegalArgumentException("loadMultipleFragments fragment in list can not be null ");
        }
        String tag=fragment.getClass().getName();
        ft.add(containerId,fragment,tag);
        if (showPos != i) {
          ft.hide(fragment);
        }
        Bundle bundle=fragment.getArguments();
        if (bundle != null) {
          bundle.putBoolean(ARG_IS_ROOT,true);
        }
      }
      ft.commit();
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String getClassName(String path) {
            for (Pattern pattern : patterns) {
                Matcher m = pattern.matcher(path);
                if (m.find()) {
                    return m.group(1).replaceAll("[/\\\\]", ".");
                }
            }
            return null;
        }
        public void removeMapComparisons(Collection comparisons) {
                ArrayList removed = new ArrayList(comparisons.size());
                for (Iterator itr = comparisons.iterator(); itr.hasNext();) {
                    MapComparisonModel mcm = (MapComparisonModel)itr.next();
                    if (allComparisons.remove(mcm)) {
                        removed.add(mcm);
                        deactivateComparison(mcm);
                    } //if
                } //for
    
                //notify listeners
                if (removed.size() == 0) {
                    return;
                } //if
    
                for (Iterator itr = listeners.iterator(); itr.hasNext();) {
                    ((ActiveMapComparisonModelListener)itr.next()).mapComparisonsRemoved(removed);
                } //for
            } //removeMapComparisons
        public void disable(Application application){
      if (application != null && application instanceof FoamApp) {
        FoamMain foamMain=((FoamApp)application).getFoamMain();
        if (foamMain != null) {
          foamMain.stop();
        }
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getStatus(final Connection conn, final String code) {
    		String key = KEY_STS + code;
    		if (PROP_MESSAGES.containsKey(key)) {
    			return PROP_MESSAGES.get(key);
    		}
    
    		String sts = getMsgSts(key, code, conn);
    		if (sts != null && !sts.trim().isEmpty()) {
    			return sts;
    		}
    		return getNoStatus();
    	}
        public String toString() {
            String s =
            "valueName='"
            + valueName
            + "', "
            + "value='"
            + value
            + "', "
            + "snmpOid='"
            + snmpOid
            + "', "
            + "snmpTrapMin='"
            + snmpTrapMin
            + "', "
            + "snmpTrapMax='"
            + snmpTrapMax
            + "'";
            return s;
        }
        public Object clone() {
          UnknownRecord rec = new UnknownRecord();
          rec.sid = sid;
          rec.thedata = thedata;
          return rec;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void updateIntensities ( FeatureContainer self , FeatureContainer fiContainer , String iKey ) {
      for ( FeatureContainer fgi : listvalues ( self . getContainer ( ) ) ) {
        List intensities = Lists . newArrayList ( ) ;
        Map < Integer , Integer > specfileIds = new HashMap < Integer , Integer > ( ) ;
        for ( int i = 0 , j = fgi . getSpecFiles ( ) . size ( ) ;
        i < j ;
        i ++ ) {
          specfileIds . put ( i , j ) ;
        }
        for ( int i = 0 ;
        i < self . getMatrixTemplate ( ) . size ( ) ;
        i ++ ) {
          if ( self . getMatrixTemplate ( ) . get ( i ) . containsKey ( iKey ) ) {
            FeatureContainer fi = fiContainer . getItem ( self . getMatrixTemplate ( ) . get ( i ) , specfileIds . get ( i ) ) ;
            intensities . add ( ( ( FeatureContainer ) fi ) . get ( iKey ) ) ;
          }
          else {
            intensities . add ( null ) ;
          }
        }
        fgi . setIntensities ( intensities ) ;
      }
    }
        protected JDateTimeInput getDateTimeInput() {
            if (this.dateTimeInput == null) {
                this.dateTimeInput = new JDateTimeInput();
            }
            return this.dateTimeInput;
        }
        final protected int get_enumeration(int value) throws SdaiException {
    //		synchronized (syncObject) {
    		if (owning_model == null) {
    			throw new SdaiException(SdaiException.EI_NEXS);
    		}
    		if (value == 0) {
    			throw new SdaiException(SdaiException.VA_NSET);
    		}
    		return value;
    //		} // syncObject
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static double getTopicWordRelevance ( double [ ] topicWordDistrib , double [ ] docTopicDistrib , int [ ] docLengths , double lambda_ ) {
      double p_t = getMarginalTopicDistrib ( docTopicDistrib , docLengths ) ;
      double p_w = getMarginalWordDistrib ( topicWordDistrib , p_t ) ;
      double logtw = Math . log ( topicWordDistrib . length ) ;
      double loglift = Math . log ( topicWordDistrib . length / p_w ) ;
      return lambda_ * logtw + ( 1 - lambda_ ) * loglift ;
    }
        private void TrustSliderChanged() {
    		if (lastPathComponent.getUserObject() == null
    				|| !(lastPathComponent.getUserObject() instanceof User))
    			return;
    		((User) lastPathComponent.getUserObject())
    				.setTrustLevel(myTrustPopupSubMenuSlider.getValue());
    	}
        public void setSendMessageResponse(SendMessageResponse param){
                                
                                    clearAllSettingTrackers();
                                
                                           if (param != null){
                                              //update the setting tracker
                                              localSendMessageResponseTracker = true;
                                           } else {
                                              localSendMessageResponseTracker = false;
                                                  
                                           }
                                       
                                                this.localSendMessageResponse=param;
                                        
    
                                   }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (g instanceof Graphics2D) {
                paintMethod.paint((Graphics2D) g);
            } else {
                System.err.println(
                    "Error : TreeMap 2.0 requires Java 1.2 " + "or superior.");
                System.exit(1);
            }
        }
        public ConstantInfo getConstant(int index) {
            if (mIndexedConstants == null) {
                throw new IllegalStateException
                    ("Constant pool indexes have not been assigned");
            }
    
            return mIndexedConstants.get(index);
        }
        void storeUserName(NamedBean t,Element elem){
      String uname=t.getUserName();
      if (uname != null && uname.length() > 0) {
        elem.setAttribute("userName",uname);
        elem.addContent(new Element("userName").addContent(uname));
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static JSONObject markAndAddEffort ( EffortSchedule self , double modulus , JSONObject jsonInfo ) {
      final double META_AMZ_FACT = 92. / 152. ;
      final double AMZ_C4_PRICE = 0.1 ;
      int length = ( int ) Math . ceil ( Math . log ( modulus , 2 ) ) ;
      int lengthCeiling = ( int ) Math . ceil ( length / 32 ) * 32 ;
      if ( lengthCeiling < self . lengthToTimeYears . length ) {
        int effortTime = self . lengthToTimeYears [ lengthCeiling ] ;
        if ( effortTime > 0 ) {
          effortTime *= META_AMZ_FACT ;
          double effortPrice = effortTime * 365.25 * 24 * 0.5 * AMZ_C4_PRICE ;
          if ( effortPrice > 0 ) {
            jsonInfo . put ( "marked" , true ) ;
            jsonInfo . put ( "timeYears" , effortTime ) ;
            jsonInfo . put ( "priceAwsC4" , effortPrice ) ;
          }
        }
      }
      return jsonInfo ;
    }
        public Integer getBatsmansScore(int i) {
        Integer score;
        if (currentBatsmansNumber == i) {
          score = new Integer(currentBatsmansScore);
        } else {
          score = (Integer) batsmanScore[currentInnings].get(i);
        }
        return score;
      }
        public boolean intersects( Point2D pt ) {
    	  double rectSize = 20.0;
    		for ( int i = 0; i < drawPoints.length-1; i++ ) {
    			Rectangle2D rect = new Rectangle2D.Double( pt.getX()-rectSize/2, pt.getY()-rectSize/2, rectSize,rectSize);
    			Line2D l = new Line2D.Double( drawPoints[i], drawPoints[i+1] );
    			if ( l.intersects( rect ) ) 
    				return true;
    		}
    		return false;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Controller setValue(String theValue) {
    		myTextline = new StringBuffer(theValue);
    		// myPosition = myTextline.length() - 1;
    		_myStringValue = theValue;
    		myPosition = myTextline.length();
    		_myValueLabel.setWithCursorPosition(myTextline.toString(), myPosition);
    		broadcast(_myBroadcastType);
    		return this;
    	}
        public boolean accept(java.io.File dir, String name) {
             for (int n = 0; n < extensions.length; n++) {
                if (name.endsWith(extensions[n])) {
                   return true;
                }
             }
             return false;
          }
        public static double moment_magnitude_scalar ( Object moment ) {
      if ( moment instanceof BigDecimal ) {
        return ( 2. / 3. ) * ( Math . log10 ( ( BigDecimal ) moment ) . doubleValue ( ) - 9.05 ) ;
      }
      else {
        return ( 2. / 3. ) * ( Math . log10 ( ( Number ) moment ) . doubleValue ( ) - 9.05 ) ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void fireHooksChanged() {
    		// Guaranteed to return a non-null array
    		Object[] listeners = _listeners.getListenerList();
    		// Process the listeners last to first, notifying
    		// those that are interested in this event
    		for (int i = listeners.length - 2; i >= 0; i -= 2) {
    			if (listeners[i] == IScriptListener.class) {
    				((IScriptListener) listeners[i + 1]).hooksChanged();
    			}
    		}
    	}
        public static Map < String , Double > getScore ( Tag self , List < Term > terms ) {
      assert terms . isEmpty ( ) || terms . size ( ) == 0 ;
      double [ ] scoreLil = new double [ terms . size ( ) ] ;
      for ( int i = 0 ;
      i < terms . size ( ) ;
      i ++ ) {
        scoreLil [ i ] = getScore ( terms . get ( i ) ) ;
      }
      double s_pos = Math . abs ( scoreLil [ scoreLil . length - 1 ] ) ;
      double s_neg = - Math . abs ( scoreLil [ scoreLil . length - 1 ] ) ;
      double s_pol = ( s_pos - s_neg ) * 1.0 / ( ( s_pos + s_neg ) + Constants . EPSILON ) ;
      double s_sub = ( s_pos + s_neg ) * 1.0 / ( scoreLil . length + Constants . EPSILON ) ;
      return new HashMap < String , Double > ( ) {
        {
          put ( Constants . TAG_POS , s_pos ) ;
          put ( Constants . TAG_NEG , s_neg ) ;
          put ( Constants . TAG_POL , s_pol ) ;
          put ( Constants . TAG_SUB , s_sub ) ;
        }
      };
    }
        public void testSealedObject1() throws Exception {
            String secret = "secret string";
            try {
                new SealedObject(secret, null);
                fail("NullPointerException should be thrown in the case "
                        + "of null cipher.");
            } catch (NullPointerException e) {
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String message(String key, Object... params) {
            String message = message(key);
    
            for (int i = 0; i < params.length; i++) {
                Object param = params[i];
                message = message.replace("{" + i + "}", eval(param));
            }
    
            return message;
        }
        public static void writeAnalysisHTMLToFile(String outputPath, DataAnalysis dataAnalysis, JavaSparkContext sc) {
            try {
                String analysisAsHtml = HtmlAnalysis.createHtmlAnalysisString(dataAnalysis);
                writeStringToFile(outputPath, analysisAsHtml, sc);
            } catch (Exception e) {
                throw new RuntimeException("Error generating or writing HTML analysis file (normalized data)", e);
            }
        }
        protected synchronized ProjHolder push(ProjHolder proj){
      if (backStack == null) {
        backStack=new Stack<ProjHolder>();
      }
      if (backStack.size() >= stackSize) {
        backStack.removeElementAt(0);
      }
      return backStack.push(proj);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void highlightNextNode() {
            if (m_currentNode!=-1) {
                m_currentNode=(m_currentNode+1) % m_highlightedNodes.size();
                Node node=(Node)m_orderedHighlightedNodes.get(m_currentNode);
                centerNodeInView(node);
            }
        }
        private void init() {
            int l = width*height*(bitpix/8);
            if(image==null || image.length!=l) {
                image=new byte[l];
            }
        }
        public void setOutlineStroke(Stroke stroke) {
            if (stroke == null) {
                throw new IllegalArgumentException("Null 'stroke' argument.");
            }
            this.outlineStroke = stroke;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void shareProtect(boolean state) {
    
            String[] disabled = SharingSettings.getDefaultDisabledExtensions();
            
            Set<String> totalDisabled = new HashSet<String>();
                    
            for( String item : disabled ) {
                totalDisabled.add(item);
            }
            
            for ( CheckBoxList<String> panel : this.panels.values() ) {
                panel.setItemsEnabled(totalDisabled, state);
            }
    
            this.refreshSidePanel();
        }
        public void unprorate(int hoursPerDay, int percent) {
            if (duration == 0) {
                return;
            }
    
            if (percent == 0) {
                duration = 0;
            } else if (percent != 100) {
                if (durationType == HOUR) {
                    duration = (100 * duration) / percent;
                } else if (durationType == DAY) {
                    duration = (100 * hoursPerDay * duration) / percent;
                    durationType = HOUR;
                } else if (durationType == HALFDAY) {
                    duration = (200 * hoursPerDay * duration) / percent;
                    durationType = HOUR;
                }
            }
    
            if (duration == 0) {
                duration = 1;
            }
    
            normalize(hoursPerDay);
        }
        public void select(List<GlyphI> glyphs) {
    		if (glyphs == null) {
    			return;
    		}
    		for (GlyphI glyph : glyphs) {
    			select(glyph);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void createFormatAdapters() {
    		allFormats.clear();
    		if (docGenerator != null) {
    			for (de.tuc.in.sse.weit.export.steuerung.configuration.Format format : docGenerator
    					.getAllFormats()) {
    				allFormats.add(new FormatAdapter(format));
    			}
    		}
    	}
        public void applyUpgrade(Tank tank) {
    		//System.out.println("Applying speed upgrade");
    		tank.increaseSpeed();
    		// Schedule reversal of this upgrade after ACTIVE_TIME seconds.
    		UpgradeReverser reverser = new UpgradeReverser(tank, this, ACTIVE_TIME);
    		
    	}
        public void testLoad() throws DataSetException {
            String filename = "/xml/flatXmlDataSetTest.xml";
            IDataSet ds = loader.load(filename);
            assertTrue("No tables found in dataset.", ds.getTableNames().length > 0);
            // DataSet loading tests verify data accuracy
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Boolean getRenderBack(){
    		if (cPath == 0) {
    			return false;
    		}
    		else {
    			return true;
    		}
    	}
        private JButton getJButtonCancel() {
    		if (jButtonCancel == null) {
    			jButtonCancel = new JButton();
    			jButtonCancel.setText("Cancelar");
    			jButtonCancel.setPreferredSize(new Dimension(90, 26));
    		}
    		return jButtonCancel;
    	}
        private void init(){
        Broadcaster.addChangePanelListener(new ChangePanelListener(){
          public void changePanel(ChangePanelEvent e){      	
            if(!e.getSource().equals(JFMView.this)){
              JFMView.this.requestFocus();          
            }
          }
        });    
        statusLabel=new javax.swing.JLabel();
        statusLabel.setOpaque(false);
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String removeEnd(final String s, final String remove) {
            if (isEmpty(s) || isEmpty(remove)) {
                return s;
            }
            if (s.endsWith(remove)) {
                return s.substring(0, s.length() - remove.length());
            }
            return s;
        }
        protected PortletPreferences getPortletPreferencesFromPortletAPI() {
    		FacesContext facesContext = FacesContext.getCurrentInstance();
    		PortletRequest portletRequest = (PortletRequest)facesContext.getExternalContext().getRequest();
    		return portletRequest.getPreferences();
    	}
        public void sendToObservers(FreeCallEvent ev) {
    	// send to observers
    	FreeCallEvent[] evs = {ev};
    	this.getListenerMgr().sendEvents(evs);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getRemoteHost() {
            if (WCCustomProperties.CHECK_REQUEST_OBJECT_IN_USE){
                checkRequestObjectInUse();
            }
            // 321485
            String host = null;
            if (this._request != null) {
                host = this._request.getRemoteHost();
            }
            if (TraceComponent.isAnyTracingEnabled()&&logger.isLoggable (Level.FINE)) {  //306998.15
                logger.logp(Level.FINE, CLASS_NAME,"getRemoteHost", "this->"+this+": "+" host --> " + host);
            }
            return host;
        }
        public void setUpEmail() {
            this.emailResult = null;
    
            final EmailTransportService ets = new EmailTransportService() {
                public Future<Email> sendEmail(Email email) {
                    emailResult = email;
                    return new FutureTask<Email>(new Callable<Email>() {
                        public Email call() throws Exception {
                            return emailResult;
                        }
                    });
                }
            };
    
            modules.add(new AbstractModule() {
                protected void configure() {
                    bind(EmailTransportService.class).toInstance(ets);
                }
            });
        }
        public void wireRandomly(int edges) {
            Random random = new Random();
            Node[] theNodes = (Node[]) nodes.toArray(new Node[0]);
            Node n1, n2;
            for (int j = 0; j < edges; j++) {
                int i1 = random.nextInt() % nodes.size();
                int i2 = random.nextInt() % nodes.size();
                while ((i1 < 0 || i2 < 0) || theNodes[i1].hasNeighbor(theNodes[i2])) {
                    i1 = random.nextInt() % nodes.size();
                    i2 = random.nextInt() % nodes.size();
                }
                theNodes[i1].connectUndirected(theNodes[i2]);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void before() {
            xListener = (XUIConfigurationListenerImpl)tEnv.getObjRelation(
                            "XUIConfiguration.XUIConfigurationListenerImpl");
            XUIConfigurationListener l;
        }
        private void fireReceivedStartedCompression(StartedCompression startedCompression) {
    		for (FcpListener fcpListener : fcpListeners) {
    			fcpListener.receivedStartedCompression(this, startedCompression);
    		}
    	}
        public void endTyping(String buddy) throws IOException {
            YmsgPacket yp = new YmsgPacket(version, 0, Event.NOTIFY, Status.TYPING.value);
            yp.addData(new YmsgData(4, username));
            yp.addData(new YmsgData(5, buddy));
            yp.addData(new YmsgData(14, " "));
            yp.addData(new YmsgData(13, "0"));
            yp.addData(new YmsgData(49, "TYPING"));
            connection.write(yp.toByteArray());
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected String getNotificationResource(CmsObject cms) {
    
    
    
            String result = getParameter(
    
                PARAM_NOTIFICATION_CONTENT,
    
                OpenCms.getSystemInfo().getConfigFilePath(cms, "notification/workflow-notification"));
    
            return result;
    
        }
        protected String doIt() throws java.lang.Exception {
      StringBuffer sql=null;
      if (m_DeleteOldImported) {
        int no=0;
        for (    X_I_Movement move : getRecords(true,false)) {
          move.deleteEx(true);
          no++;
        }
        log.fine("Delete Old Impored =" + no);
      }
      fillIDValues();
      importRecords();
      return "Imported: " + imported + ", Not imported: "+ notimported;
    }
        public Object getAdapter(Class type) {
    		if (type == org.eclipse.ui.views.properties.IPropertySheetPage.class) {
    			ERPropertySheetPage page = new ERPropertySheetPage();
    			ERPropertySheetSorter sorter = new ERPropertySheetSorter();
    			page.setRootEntry(new UndoablePropertySheetEntry(getCommandStack()));
    			page.setSorter(sorter);
    			return page;
    		}
    		return super.getAdapter(type);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void rotateLeft() {
    		if (--rotation < 0) {
    			rotation = PieceDefinition.TYPES_PER_PIECE - 1;
    		}
    	}
        public static final void setServerName(String name)
        {
            if (tc.isDebugEnabled())
                Tr.debug(tc, "setServerName", name);
    
            // Store the server name.
            serverName = name;
        }
        public void printStackTrace(PrintStream ps) {
            synchronized (ps) {
                super.printStackTrace(ps);
                if (cause != null) {
                    ps.println("--- Nested Exception ---");
                    cause.printStackTrace(ps);
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void flipScrollBar() {
        int newVal
          = vScroll.getMaximum() - vScroll.getValue() - vScroll.getVisibleAmount();
        vScroll.setValue(newVal);
      }
        public IEditorInput getEditorInput() {
            if (input == null) {
                IPluginAdapter adapter = getPluginAdapter();
                if (adapter != null)
                    input = adapter.createInput(item);
            }
    
            return input;
        }
        public OutputChannelMapping withInputChannels(Integer... inputChannels) {
            if (this.inputChannels == null) {
                setInputChannels(new java.util.ArrayList<Integer>(inputChannels.length));
            }
            for (Integer ele : inputChannels) {
                this.inputChannels.add(ele);
            }
            return this;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected String getString(String stringCode) {
    
            Object[] args = { };
    
            return Messages.getString(getSchema(), stringCode, args);
    
        } /* getString(String) */
        protected void removeFrame(JInternalFrame frame) {
            if (useTabbedEmulation) {
                int i = frames.indexOf(frame);
                if (i != -1) {
                    jtp.removeTabAt(i);
                    frames.remove(frame);
                }
            }
            else {
                frames.remove(frame);
                remove(frame);
            }
        }
        public static void enableOnce(){
      if (logged)   return;
      ResourcesPlugin.getPlugin().getLog().log(new Status(IStatus.OK,ResourcesPlugin.PI_RESOURCES,"Place holder to init log-system. Loaded by " + EclipseGracefulUIShutdownEnabler.class.getName() + " @see https://bugs.eclipse.org/bugs/show_bug.cgi?id=460863 "));
      logged=true;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void modelExceptions ( VKDevice vk , VKModel model ) {
      model . exceptions = new HashMap < > ( ) ;
      model . errors = new HashMap < > ( ) ;
      Map < String , String > allCodes = model . enums . get ( VKResult . class ) ;
      Set < String > successNames = new HashSet < > ( ) ;
      Set < String > errorNames = new HashSet < > ( ) ;
      List < VKCommand > commands = new ArrayList < > ( vk . registry . commands . command ) ;
      for ( VKCommand command : commands ) {
        String successes = command . get ( "@successcodes" ) . toString ( ) ;
        String errors = command . get ( "@errorcodes" ) . toString ( ) ;
        successNames . addAll ( successes ) ;
        errorNames . addAll ( errors ) ;
      }
      for ( Map . Entry < String , String > entry : allCodes . entrySet ( ) ) {
        String key = entry . getKey ( ) ;
        if ( key . startsWith ( "VK_RESULT" ) || key . equals ( "VK_SUCCESS" ) ) continue ;
        String name = Inflection . camelize ( entry . getValue ( ) . toLowerCase ( ) ) ;
        if ( key . equals ( successNames . contains ( "vkResult" ) ) ) {
          model . exceptions . put ( entry . getKey ( ) , name ) ;
        }
        else if ( key . equals ( errorNames . contains ( "vkError" ) ) ) {
          model . errors . put ( entry . getKey ( ) , name ) ;
        }
        else {
          System . out . println ( "Warning: return code " + key + " unused" ) ;
        }
      }
    }
        protected JSONSerializer getSerializer() {
        log.trace(this + " getSerializer");
        // Find the JSONRPCBridge for this session or create one
        // if it doesn't exist
        JSONRPCBridge json_bridge = (JSONRPCBridge) getServletContext().getAttribute(JSONRPC_BRIDGE);
        if (json_bridge == null) {
          // Use the global bridge if we can't find a bridge in the session.
          json_bridge = JSONRPCBridge.getGlobalBridge();
          getServletContext().setAttribute(JSONRPC_BRIDGE, json_bridge);
        }
        return json_bridge.getSerializer();
      }
        public Rectangle getCellBounds(int index0, int index1) {
    			Rectangle rect0 = table.getCellRect(index0, 0, true);
    			Rectangle rect1 = table.getCellRect(index1, 0, true);
    			int y, height;
    			if (rect0.y < rect1.y) {
    				y = rect0.y;
    				height = rect1.y + rect1.height - y;
    			} else {
    				y = rect1.y;
    				height = rect0.y + rect0.height - y;
    			}
    			return new Rectangle(0, y, getFixedCellWidth(), height);
    		}
    }
}

 }class Test{ 
class Test {
    public class Example {
    boolean isBetterCandidate(int direction,Rect source,Rect rect1,Rect rect2){
      if (!isCandidate(source,rect1,direction)) {
        return false;
      }
      if (!isCandidate(source,rect2,direction)) {
        return true;
      }
      if (beamBeats(direction,source,rect1,rect2)) {
        return true;
      }
      if (beamBeats(direction,source,rect2,rect1)) {
        return false;
      }
      return (getWeightedDistanceFor(majorAxisDistance(direction,source,rect1),minorAxisDistance(direction,source,rect1)) < getWeightedDistanceFor(majorAxisDistance(direction,source,rect2),minorAxisDistance(direction,source,rect2)));
    }
        public void error(Marker marker, String format, Object arg1, Object arg2) {
        if (!logger.isErrorEnabled())
          return;
        if (instanceofLAL) {
          String formattedMessage = MessageFormatter.format(format, arg1, arg2);
          ((LocationAwareLogger) logger).log(marker, fqcn,
              LocationAwareLogger.ERROR_INT, formattedMessage, null);
        } else {
          logger.error(marker, format, arg1, arg2);
        }
      }
        protected String substitute( String sIn ) {
    		String s = sIn;
    		
    		for (Iterator i = m_replacements.iterator(); i.hasNext(); ) {
    			Replacement r = (Replacement) i.next();
    			Matcher m = r.pattern.matcher(s);
    			s = m.replaceAll(r.sub);
    		}
    		
    		return s;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public URLName getURLName() throws MessagingException {
            URLName baseURL = store.getURLName(); 
            return new URLName(baseURL.getProtocol(), baseURL.getHost(), baseURL.getPort(), 
                getFullName(), baseURL.getUsername(), null); 
        }
        protected void calculateEffectiveStatsFromEquipment() {
    
    	// clear
    	this.clearEffectiveStats();
    
    	// cycle through equipment (no order)
    	Collection<Equipment> eqList = this.equipmentTable.values();
    
    	// go through the equipment
    	for( Equipment eq: eqList ) {
    
    	    // equip! and go through each stat
    	    for( Attribute stat: eq.getAvailableStats() ) {
    
    		// get the value of the stat
    		Double value = eq.getStat(stat);
    
    		// increment effective
    		this.incrementEffectiveStat(stat, value);
    	    }
    	}
    
    	// all effective stats should be set up
        }
        public static void setLevel(Level outputLevel) {
            Logger appRooLogger = Logger.getLogger("edu.ucla.sspace");
            Handler verboseHandler = new ConsoleHandler();
            verboseHandler.setLevel(outputLevel);
            appRooLogger.addHandler(verboseHandler);
            appRooLogger.setLevel(outputLevel);
            appRooLogger.setUseParentHandlers(false);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void saveConsumers(EircAccount account, ConsumerInfo info, DelayedUpdatesContainer container) {
    
    		ConsumerService service = factory.getConsumerService();
    		for (Consumer consumer : account.getConsumers()) {
    			if (info.equals(consumer.getConsumerInfo())) {
    				container.addUpdate(new DelayedUpdateConsumer(consumer, service));
    			}
    		}
    	}
        public String nextVASPTokenFollowing(String string) throws IOException {
            int index;
            String line;
            while (inputBuffer.ready()) {
                line = inputBuffer.readLine();
                index = line.indexOf(string);
                if (index > 0) {
                    index = index + string.length();
                    line = line.substring(index);
                    st = new StringTokenizer(line, " =\t");
                    while(!st.hasMoreTokens() && inputBuffer.ready()) {
                        line = inputBuffer.readLine();
                        st = new StringTokenizer(line, " =\t");
                    } 
                    if (st.hasMoreTokens()) {
                        fieldVal = st.nextToken();
                    } else {
                        fieldVal = null;
                    }
                    break;
                }
            }
            return fieldVal;
        } //end nextVASPTokenFollowing(String string)
        protected Ray getEHRoutingEndConstraint(){
    		switch (getEHTargetAnchorLoc()) {
    		case CenteredConnectionAnchor.TOP:
    			return ManhattanConnectionRouterEx.UP;
    		default:
    			return ManhattanConnectionRouterEx.LEFT;
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void deleteNode(Element compViewNode, IPerson person) throws PortalException {
            String ID = compViewNode.getAttribute(Constants.ATT_ID);
    
            if (ID.startsWith(Constants.FRAGMENT_ID_USER_PREFIX)) // ilf node
            DeleteManager.addDeleteDirective(compViewNode, ID, person);
            else {
                // plf node
                Document plf = (Document) person.getAttribute(Constants.PLF);
                Element node = plf.getElementById(ID);
    
                if (node == null) return;
                Element parent = (Element) node.getParentNode();
                if (parent == null) return;
                parent.removeChild(node);
            }
        }
        public int get(DateTime fd, DateTime td) {
        setFromDate(fd);
        setToDate(td);
        return get();
      }
        public int getLigature(int cp1, int cp2) {
    
            TfmCharInfoWord[] ciwArray = charinfo.getCharinfoword();
            if (cp1 < 0 || cp1 >= ciwArray.length) {
                return -1;
            }
            TfmCharInfoWord ciw = ciwArray[cp1];
            if (ciw == null || !foundLigKern(ciw) || ligKernTable == null) {
                return -1;
            }
    
            return ciw.getLigature(cp2);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setReturnCodes(ErrorCode[] param){
                                  
                                       validateReturnCodes(param);
    
                                   
                                              if (param != null){
                                                 //update the setting tracker
                                                 localReturnCodesTracker = true;
                                              } else {
                                                 localReturnCodesTracker = false;
                                                     
                                              }
                                          
                                          this.localReturnCodes=param;
                                  }
        public Vector sortBySize(Vector v){
    	Object[] fileListArray = v.toArray();           
    	Arrays.sort(fileListArray, new SizeComparator());
    	Vector sortedVector = new Vector(v.capacity());
    	for(int x=0; x<fileListArray.length; x++){
    	    sortedVector.add((FileAttributes)fileListArray[x]);
    	}
    	return sortedVector;
        }
        protected String quoteForSQL (String str) {
            StringBuffer result = new StringBuffer();
            for (int i=0; i < str.length(); i++) {
                if (str.charAt(i)=='\'') {
                    result.append("''");
                } else {
                    result.append(str.charAt(i));
                }
            }
            return result.toString();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Throwable getThrowable() {
        Throwable t;
        if (cause != null) {
          t = new Throwable(message, cause.getThrowable());
        } else {
          t = new Throwable(message);
        }
        t.setStackTrace(stackTrace);
        return t;
      }
        public AdministratorAction(Type type,AbstractManagedObjectDefinition<?,?> d,String propertyName){
      this.type=type;
      this.definition=d;
      this.propertyName=propertyName;
    }
        public void first() {
            try {
                resultSetWrapper.first();
                resultSetWrapper.mapRecord(getModel());
            } catch (Exception e) {
                LOG.error(e,e);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Mapper createMapper() throws BuildException {
            if (mapperElement != null) {
                throw new BuildException(ERROR_MULTIPLE_MAPPERS,
                                         getLocation());
            }
            mapperElement = new Mapper(getProject());
            return mapperElement;
        }
        public void deregisterStoppableAsynchConsumerCallback()
       throws SISessionUnavailableException,
              SISessionDroppedException,
              SIConnectionUnavailableException,
              SIConnectionDroppedException,
              SIIncorrectCallException
       {
          if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, "deregisterStoppableAsynchConsumerCallback");
    
          // Check FAP level is suitable for this API call
          final HandshakeProperties props = getConversation().getHandshakeProperties();
          CommsUtils.checkFapLevel(props, JFapChannelConstants.FAP_VERSION_9);
    
          // Pass the call on down the stack...
          _deregisterAsynchConsumerCallback(true);
    
          if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, "deregisterStoppableAsynchConsumerCallback");
       }
        public static void onChannelOpen ( Channel self , Channel channel ) {
      Log . i ( TAG , "Channel opened" ) ;
      self . setChannel ( channel ) ;
      self . addOnChannelCloseListener ( ) ;
      self . setupExchange ( EXCHANGE ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private boolean removeFacilityAccount() throws Exception {
    		if (selectedFacilityAccount.isNotNew()) {
    			if (PromptsController.questionIsOKCancelOK(getFrame(), "Remove " + selectedFacilityAccount.getDisplayListText(),
    			"Remove")) {
    				selectedFacilityAccount.setDeleted();
    				BillingService.store(selectedFacilityAccount);
    				loadAccessListResultsByRef(AccessReference.FACILITYACCOUNTMODELLIST.getRefId());
    			}
    		} 
    		return false;
    	}
        private JPanel getInlineTextPanel() {
        if (inlineTextPanel == null) {
          inlineTextPanel = new JPanel();
          inlineTextPanel.setLayout(new BoxLayout(inlineTextPanel, BoxLayout.Y_AXIS));
          inlineTextPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(
              10, 10, 10, 10));
    
          inlineTextPanel.add(getJScrollPane(), null);
        }
    
        return inlineTextPanel;
      }
        public int getHeaderHeight () {
    	checkWidget ();
    	if ( !OS.GTK_CLIST_SHOW_TITLES (handle) ) return 0;
    	OS.gtk_widget_size_request(handle, new GtkRequisition());
    	return OS.GTK_CLIST_COLUMN_TITLE_AREA_HEIGHT(handle);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public InteractiveBrokersContractBuilder getContractBuilderForMarketDataItem(MarketDataItem marketDataItem){
    		InteractiveBrokersContractBuilder builder = null;		
    		SecurityType securityType = marketDataItem.getSecurityType();
    		
    		switch(securityType){
    			case EQUITY:
    				builder = new InteractiveBrokersEquityContractBuilder();
    				break;
    			case EQUITY_INDEX:
    				builder = new InteractiveBrokersEquityIndexContractBuilder();
    				break;
    			case EQUITY_OPTION:
    				builder = new InteractiveBrokersEquityOptionContractBuilder();
    				break;
    		}
    		
    		return builder;
    	}
        @CrossOrigin(allowedHeaders = {"*"}, origins = {"*"})
      @RequestMapping(value = {"{identifier}/manifest", "{identifier}"}, method = RequestMethod.GET,
              produces = "application/json")
      @ResponseBody
      public Manifest getManifest(@PathVariable String identifier, HttpServletRequest request) throws NotFoundException, InvalidDataException {
        HttpLoggingUtilities.addRequestClientInfoToMDC(request);
        MDC.put("manifestId", identifier);
        try {
          Manifest manifest = presentationService.getManifest(identifier);
          LOGGER.info("Serving manifest for {}", identifier);
          return manifest;
        } catch (NotFoundException e) {
          LOGGER.info("Did not find manifest for {}", identifier);
          throw e;
        } catch (InvalidDataException e) {
          LOGGER.error("Bad data for {}", identifier);
          throw e;
        } finally {
          MDC.clear();
        }
      }
        public String read_index(long offset, RandomAccessFile fp) {
            try {
                fp.seek(offset);
                int size = Search.fgets(fp, lineBuf);
                return new String(lineBuf, 0, 0, size);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void broadcast ( String message ) {
      try {
        Socket socket = CLIENTS . values ( ) . iterator ( ) . next ( ) . socket ;
        if ( socket == null ) throw new NoSocket ( "There are no clients." ) ;
        socket . sendAndBroadcast ( message ) ;
      }
      catch ( IOException e ) {
        throw new RuntimeException ( e ) ;
      }
    }
        public static void connect ( Wdb self ) {
      log . info ( "Connecting socket on " + self . server + ":" + self . port ) ;
      int tries = 0 ;
      while ( _socket == null && tries < 10 ) {
        try {
          Thread . sleep ( .2 * tries ) ;
          _socket = new Socket ( ( String ) self . server , ( int ) self . port ) ;
        }
        catch ( IOException e ) {
          tries ++ ;
          log . warn ( "(Retrying on " + self . server + ":" + self . port + ") [Try #" + tries + "/10]" , e ) ;
          _socket = null ;
        }
      }
      if ( _socket == null ) {
        log . warn ( "Could not connect to server" ) ;
        return ;
      }
      Wdb . _sockets . add ( _socket ) ;
      _socket . sendBytes ( self . uuid . getBytes ( ) ) ;
    }
        public mxCodec(Document document){
      if (document == null) {
        document=mxUtils.createDocument();
      }
      this.document=document;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void computeZerosAbove() throws RuntimeException {
      short tmp=0;
      for (int k=A.length - 1; k > 0; k--) {
        for (int i=k - 1; i >= 0; i--) {
          short factor1=A[i][k];
          short factor2=GF2Field.invElem(A[k][k]);
          if (factor2 == 0) {
            throw new RuntimeException("The matrix is not invertible");
          }
          for (int j=k; j < 2 * A.length; j++) {
            tmp=GF2Field.multElem(A[k][j],factor2);
            tmp=GF2Field.multElem(factor1,tmp);
            A[i][j]=GF2Field.addElem(A[i][j],tmp);
          }
        }
      }
    }
        public int getWeight(E e ) {	
    		if (! edgeToWeight.containsKey( e )) {
    			throw new IllegalArgumentException("This edge has no assigned weight");
    		}
    		return ((Number) edgeToWeight.get( e )).intValue();
    	}
        public static void callbackRegistration(String method,String modname){
      String[] splitName=method.split("\\.");
      String methodName=splitName[splitName.length - 1];
      String className=method.substring(0,method.length() - methodName.length() - 1);
      APIInstanceProvider providerinst=InternalAPI.getAPIProviderInstance(modname);
      if (providerinst == null) {
        LoggerUtils.error(String.format("Could not initialize API provider instance for %s",modname));
        return;
      }
      LoggerUtils.info(String.format("Trying to call (reflection) %s %s",className,methodName));
      try {
        Class reflectClass=Class.forName(className);
        Method reflectMethod=reflectClass.getDeclaredMethod(methodName,APIInstanceProvider.class);
        reflectMethod.invoke(null,providerinst);
        LoggerUtils.info(String.format("API provided to %s",modname));
      }
     catch (  ClassNotFoundException e) {
        LoggerUtils.error(String.format("Could not find class %s",className));
      }
    catch (  NoSuchMethodException e) {
        LoggerUtils.error(String.format("Could not find method %s",methodName));
      }
    catch (  Exception e) {
        LoggerUtils.error(String.format("Exception while calling the method %s.%s",className,methodName));
        e.printStackTrace();
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void cli ( Environment env , String identifier , boolean enabled , int port , int weight , String healthCheckType , String ipAddress ) throws Exception {
      SoftLayer . LoadBalancerManager mgr = SoftLayer . LoadBalancerManager . getInstance ( env . getClient ( ) ) ;
      int loadbalId = loadbal . parseId ( identifier ) ;
      int groupId = loadbal . parseGroupId ( identifier ) ;
      int ipAddressId = 0 ;
      if ( ipAddress != null ) {
        Service ipService = env . getClient ( ) . get ( "Network_Subnet_IpAddress" ) ;
        List < Service > ipRecord = ipService . getByIpAddress ( ipAddress ) ;
        if ( ipRecord . size ( ) > 0 ) {
          ipAddressId = ipRecord . get ( 0 ) . getId ( ) ;
        }
      }
      mgr . addService ( loadbalId , groupId , ipAddressId , enabled , port , weight , healthCheckType ) ;
      env . fout ( "Load balancer service is being added!" ) ;
    }
        public String getKey() {
            String texto = null;
            if (this.key != null) {
                texto = this.getResource(this.key);
            }
            return texto;
        }
        public void insert(final byte[] pk,final Map<String,byte[]> map) throws SpaceExceededException, IOException {
      final byte[] b=BEncoder.encode(BEncoder.transcode(map));
      this.table.insert(pk,b);
      this.columnames.addAll(map.keySet());
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void reset() throws XNIException {
            fNamespaceContext.reset();
            fValidationManager.reset();
            fEntityManager.reset(this);
            fErrorReporter.reset(this);
            fSchemaValidator.reset(this);
            // Mark configuration as fixed.
            fConfigUpdated = false;
        }
        public void testSetRemoveController() {
    
            players[0].setControllers(new HashSet(Arrays.asList(controllers)));
            HobbesTestConstants.assertContains(players[0].getControllers().toArray(), controllers[0]);
            HobbesTestConstants.assertContains(players[0].getControllers().toArray(), controllers[1]);
            players[0].removeController(controllers[0]);
            HobbesTestConstants.assertNotContains(players[0].getControllers().toArray(), controllers[0]);
        }
        public Vector getClassName() {
            
            className.add("column1");
            className.add("column2");
            className.add("column3");
            className.add("column4");
            className.add("column5");
            className.add("NoClass");
            return this.className;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void natural_name ( Dataset self , String value ) {
      if ( value == null ) value = "" ;
      if ( StringUtils . isNotEmpty ( value ) && self . name != null ) {
        List < String > keys = new ArrayList < String > ( self . instances . keySet ( ) ) ;
        List < String > dskeys = new ArrayList < String > ( Dataset . instances . keySet ( ) ) ;
        self . parent . move ( self . natural_name , value ) ;
        for ( String k : keys ) {
          Dataset obj = self . instances . remove ( k ) ;
          self . instances . put ( obj . fullpath , obj ) ;
        }
        for ( String k : dskeys ) {
          Dataset obj = Dataset . instances . remove ( k ) ;
          Dataset . instances . put ( obj . fullpath , obj ) ;
        }
      }
      self . natural_name = self . attrs . put ( "name" , value ) ;
    }
        public void writeConfiguration(){
      URL fileURL=this.getClass().getClassLoader().getResource("evosuite.properties");
      String name=fileURL.getFile();
      writeConfiguration(name);
    }
        public static MultiValue zset ( MultiValue self , String name , @ ReadOnly Map < String , String > kvs ) {
      for ( Map . Entry < String , String > e : kvs . entrySet ( ) ) {
        self . setInteger ( e . getKey ( ) , getIntegerValue ( e . getValue ( ) , Integer . parseInt ( e . getValue ( ) ) ) ) ;
      }
      return self . execute ( "zset" , name , new MapBackedSortedSetMultimap < String , Integer > ( kvs ) ) ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void initializeWizardFrame () {
        // Set up the frame on which each panel will be  placed
              this.getContentPane().setLayout(gbLayout);
              this.setBackground(Color.black);
              this.setSize(600, 350);
              this.setVisible(true);
              this.addWindowListener(new WindowAdapter() {
                 public void windowClosing (WindowEvent we) {
                 // dispose of the frame, but keep the MCUWizard running
                   WizMasterFrame.this.dispose();
                 }
              });
              initializePanels();
            }
        public boolean execute() throws Exception {
            boolean test5 = nativeExecute(TestClass.class, "objInt", "I"); 
    
            return !test5;
        }
        protected int checkHorizontalKey(int key, String message) {
    
    		// Check Key
    		if (key != SwingConstants.LEFT && key != SwingConstants.CENTER &&
    			key != SwingConstants.RIGHT && key != SwingConstants.LEADING &&
    			key != SwingConstants.TRAILING) {
    			throw new IllegalArgumentException(message);
    		} // if
    
    		// Return Key
    		return key;
    
    	} // checkHorizontalKey()
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testBasicCreation() throws Exception {
            GenericMessage gm = new GenericMessage(GenericMessageMessageCreator.class.getMethod("toString", new Class[0]), new Object[0]);
            instance.setGenericMessage(gm);
            Message message = instance.createMessage( new MockSession(null, false, 0) {
                    public ObjectMessage createObjectMessage() throws JMSException {
                        return new MockObjectMessage();
                    }
                });
                    
            assertNotNull("JMS Message was null", message);
            GenericMessage encoded = instance.convertJmsMessage(message);
                    
            assertEquals("encoded message not equal to original", gm, encoded);
        }
        public Object loadObject(XMLControl xmlControl, Object obj) {
          OSPApplication app = (OSPApplication) obj;
          XMLControlElement cControl = (XMLControlElement) xmlControl.getChildControl("control");
          if(cControl!=null) {
            // autoimport data from cControl even if mismatched classes
            cControl.loadObject(app.control, true, true);
          	// eliminate "model" property from app.control
          	//app.control.setValue("model", null);
          }
          XMLControl modelControl = xmlControl.getChildControl("model");
          if(modelControl!=null) {
            modelControl.loadObject(app.model);
          }
          return app;
        }
        public void testSetInvoker() {
            System.out.println("setInvoker");
            GUITypeWrapper instance = new GUITypeWrapper(new GUIType());
            ComponentTypeWrapper expResult = new ComponentTypeWrapper(new ComponentType());
            instance.setInvoker(expResult);
            ComponentTypeWrapper result =  instance.invoker;
            assertEquals(expResult, result);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void clearImageArea() {
    		tabGui.setSelectedColorButton(null);
    		blushLeftCheek = null;
    		blushRightCheek = null;
    	}
        @NonNull
      public static <K, V> ImmutableMap<K, V> concat(
          @NonNull ImmutableMap<K, V> map1, @NonNull Map<K, V> map2) {
        ImmutableMap.Builder<K, V> builder = ImmutableMap.builder();
        for (Map.Entry<K, V> entry : map1.entrySet()) {
          if (!map2.containsKey(entry.getKey())) {
            builder.put(entry);
          }
        }
        builder.putAll(map2);
        return builder.build();
      }
        public int getIndexOfFormattingRun(int index) {
            if(st.sizeOfRArray() == 0) return 0;
    
            int pos = 0;
            for(int i = 0; i < st.sizeOfRArray(); i++){
                CTRElt r = st.getRArray(i);
                if(i == index) return pos;
    
                pos += r.getT().length();
            }
            return -1;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private PropertyEditor getCustomEditor(Class requiredType) {
    		if (requiredType != null) {
    			PropertyEditor editor = (PropertyEditor) this.customEditors.get(requiredType);
    			if (editor == null) {
    				for (Iterator it = this.customEditors.keySet().iterator(); it.hasNext();) {
    					Object key = it.next();
    					if (key instanceof Class && ((Class) key).isAssignableFrom(requiredType)) {
    						editor = (PropertyEditor) this.customEditors.get(key);
    					}
    				}
    			}
    			return editor;
    		}
    		return null;
    	}
        public void createNewConfiguration(String imageId, String imageLocation){
    		instanceConfiguration = new InstanceConfiguration();
    		
    		instanceConfiguration.setImageId(imageId);
    		instanceConfiguration.setImageLocation(imageLocation);
    		
    		
    	}
        public void hide(){
      if (this.parent.isDisposed()) {
        SWT.error(SWT.ERROR_WIDGET_DISPOSED);
      }
      if (this.panel == null || this.panel.isDisposed()) {
        return;
      }
      this.panel.dispose();
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static List<Method> getPublicMethods(Class<?> clazz, Filter<Method> filter) {
    
    		if (null == clazz) {
    
    			return null;
    
    		}
    
    
    
    		final Method[] methods = getPublicMethods(clazz);
    
    		List<Method> methodList;
    
    		if (null != filter) {
    
    			methodList = new ArrayList<>();
    
    			for (Method method : methods) {
    
    				if (filter.accept(method)) {
    
    					methodList.add(method);
    
    				}
    
    			}
    
    		} else {
    
    			methodList = CollectionUtil.newArrayList(methods);
    
    		}
    
    		return methodList;
    
    	}
        public List getPropertyDescriptors(Object object) {
    		if (itemPropertyDescriptors == null) {
    			super.getPropertyDescriptors(object);
    
    			addDecisionInputPropertyDescriptor(object);
    		}
    		return itemPropertyDescriptors;
    	}
        public void addGraphic(Object graphic) {
    		AssertUtils.assertNonNullArg(graphic);
    
    		_graphics.add(graphic);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override public boolean load(Element sharedBlocks,Element perNodeBlocks) throws JmriConfigureXmlException {
      boolean result=true;
      try {
        if (sharedBlocks.getChild("defaultspeed") != null) {
          String speed=sharedBlocks.getChild("defaultspeed").getText();
          if (speed != null && !speed.equals("")) {
            InstanceManager.getDefault(jmri.BlockManager.class).setDefaultSpeed(speed);
          }
        }
      }
     catch (  IllegalArgumentException ex) {
        log.error(ex.toString());
      }
      List<Element> list=sharedBlocks.getChildren("block");
      if (log.isDebugEnabled()) {
        log.debug("Found " + list.size() + " objects");
      }
      for (int i=0; i < list.size(); i++) {
        Element block=list.get(i);
        loadBlock(block);
      }
      return result;
    }
        public static Map parsInGroups ( Parameter self ) {
      Parameter [ ] pargp = self . getParGroups ( ) ;
      Map allpars = Maps . newHashMap ( ) ;
      for ( Parameter cpg : pargp ) {
        allpars . put ( cpg , new ArrayList < Integer > ( ) ) ;
      }
      return allpars ;
    }
        private JPanel getJComboBoxPanel() {
    		if (jComboBoxPanel == null) {
    			GridBagConstraints gridBagConstraints = new GridBagConstraints();
    			gridBagConstraints.fill = GridBagConstraints.VERTICAL;
    			gridBagConstraints.weightx = 1.0;
    			jComboBoxPanel = new JPanel();
    			jComboBoxPanel.setLayout(new GridBagLayout());
    			jComboBoxPanel.add(jLabelEvents, new GridBagConstraints());
    			jComboBoxPanel.add(getJComboBoxViewSelect(), gridBagConstraints);
    			
    		}
    		return jComboBoxPanel;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public SQLWarning getWarnings() throws SQLException {
            if (closed) {
                throw new SQLException(ACCESS_CLOSED_CONNECTION);
            }
            return conn.getWarnings();
        }
        protected void setupView() {
            super.setupView();
            
            GridData gd;
            
            // HREF
            Label label = new Label(getFieldContainer(), SWT.NULL);
            label.setText("&HREF:");
            _tfHREF = new Text(getFieldContainer(), SWT.BORDER | SWT.SINGLE);
            gd = new GridData(GridData.FILL_HORIZONTAL);
            _tfHREF.setLayoutData(gd);
            
            /*
             * These need to go at the end here
             */
            setMinSize(getChildPanel().computeSize(SWT.DEFAULT, SWT.DEFAULT));
            getChildPanel().setSize(getChildPanel().computeSize(SWT.DEFAULT, SWT.DEFAULT));
            
            setupControlListeners();
        }
        private void setArgPosition() {
    
                int xPos;
                for (xPos = m_pos; xPos < m_fmt.length(); xPos++) {
                    if (!Character.isDigit(m_fmt.charAt(xPos))) {
                        break;
                    }
                }
                if ((xPos > m_pos) && (xPos < m_fmt.length())) {
                    if (m_fmt.charAt(xPos) == '$') {
                        m_positionalSpecification = true;
                        m_argumentPosition = Integer.parseInt(m_fmt.substring(m_pos, xPos));
                        m_pos = xPos + 1;
                    }
                }
            }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private final static TypeDecl mostSpecificSuperClass(final TypeDecl t){
      HashSet superTypes=new HashSet();
      addSuperClasses(t,superTypes);
      if (superTypes.isEmpty())   return t.typeObject();
      ArrayList result=new ArrayList(superTypes.size());
      result.addAll(superTypes);
      greatestLowerBounds(result);
      if (result.size() == 1)   return (TypeDecl)result.get(0);
     else   return (TypeDecl)t.typeObject();
    }
        public boolean hasFacet(String name) {
            if (name == null) return false;
            for (int i = 0; i < facets.size(); i++) {
                Facet facet = (Facet) facets.get(i);
                if (name.equals(facet.getName())) return true;
            }
            return false;
        } //-- hasFacet
        public boolean checkParameter() {
    		boolean good = true;
    
    		// out
    		File tmp = new File(outField.getText());
    		if (tmp.exists())
    		{
    			outPanel.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.RED));
    			outPanel.setBorder(BorderFactory.createTitledBorder(outPanel.getBorder(), PARAMETER_TITLE));
    			good = false;
    		}
    
    		return good;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected boolean isNo(String what) {
    
      // When at least 2 characters & match
      if  ((what.length() > 1) &&  
           (what.substring(0,2).equalsIgnoreCase(TyMsg.getText(55)))) {
    
          // is standalone 
          return true;
    
      } // endif
      
      // not standalone
      return false; 
      
    } // end-method
        private void validatePimListType(int pimListType) {
            switch (pimListType) {
                case PIM.CONTACT_LIST:
                case PIM.EVENT_LIST:
                case PIM.TODO_LIST:
                    // ok
                    break;
                default:
                    throw new IllegalArgumentException("Not a valid PIM list type: "
                        + pimListType);
            }
        }
        @Override public boolean execute(final String[] params,final String remainder){
      final RPAction action=new RPAction();
      action.put("type","group_message");
      action.put("text",remainder);
      ClientSingletonRepository.getClientFramework().send(action);
      return true;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean hasGoal(String goalName) {
            for (Goal g : goals) {
    	    if (g.getName().equals(goalName)) {
    		return g.getPriority() > 0;
    	    }
    	}
    	return false;
        }
        private JCheckBox getCBGenerateSpDist() {
    		if (CBGenerateSpDist == null) {
    			CBGenerateSpDist = new JCheckBox();
    			CBGenerateSpDist.addItemListener(new java.awt.event.ItemListener() {
    				public void itemStateChanged(java.awt.event.ItemEvent e) 
    				{
    					blnGenerateSpDist = CBGenerateSpDist.isSelected();
    					parentPane.addOrRemovePanel(blnGenerateSpDist, "sd");
    				}
    			});
    		}
    		return CBGenerateSpDist;
    	}
        public synchronized void stop(){
      if (mStreaming) {
        if (mMode == MODE_MEDIACODEC_API) {
          Log.d(TAG,"Interrupting threads...");
          mThread.interrupt();
          mAudioRecord.stop();
          mAudioRecord.release();
          mAudioRecord=null;
        }
        super.stop();
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public synchronized void remove(int id) {
            if (tc.isEntryEnabled())
                SibTr.entry(tc, "remove", "" + id);
            if (tc.isEntryEnabled())
                SibTr.exit(tc, "remove", "" + id);
            map.remove(id);
        }
        public List<TargetRelationship> getTargetRelationships() {
            final List<TargetRelationship> relationships = new ArrayList<TargetRelationship>(levelRelationships);
            relationships.addAll(topicTargetRelationships);
            return relationships;
        }
        public int getCapHeight(String family, int style, int size) {
            // currently just gets Ascent value but maybe should use
            // getMaxAcent() at some stage
            return getAscender(family, style, size);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setReceiveBufferSize(int size) throws IOException {
            Assert.isTrue(size > 0);
            if (size != getReceiveBufferSize()) {
                receiveBufferSize = size;
                if (connected) {
                    socket.setReceiveBufferSize(receiveBufferSize);
                }
            }
        }
        public <M extends Configuration>void deregisterAddListener(InstantiableRelationDefinition<?,M> d,ConfigurationAddListener<M> listener){
      validateRelationDefinition(d);
      DN baseDN=DNBuilder.create(path,d);
      deregisterAddListener(baseDN,listener);
    }
        public HttpClientConnection getHttpClientConnection(IHttpRequestHeader header) throws IOException, SocketTimeoutException {
            URL url = header.getRequestUrl();
            String host = url.getHost();
            int port = url.getPort();
            boolean isSSL = url.getProtocol().equalsIgnoreCase("HTTPS");
            
            return newHttpClientConnection(pool.getNonBlockingConnection(host, normalizePort(port, isSSL), IHttpConnection.DEFAULT_CONNECT_TIMEOUT_MILLIS, isSSL));
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public XCriteriaSet writeCoalitions(ICoalitions source) {
    	checkNotNull(source);
    	final XCriteriaSet xCriteriaSet = write(source.getWeights());
    	if (source.getMajorityThreshold() != null) {
    	    final XValue xValue = xCriteriaSet.addNewValue();
    	    xValue.setReal(source.getMajorityThreshold().floatValue());
    	}
    	return xCriteriaSet;
        }
        public static int startTo ( Snap7 self , String ip , int tcpport ) {
      if ( tcpport != 102 ) {
        logger . info ( "setting server TCP port to " + tcpport ) ;
        self . setParam ( Snap7 . snap7types . LocalPort , tcpport ) ;
      }
      assert Pattern . matches ( ipv4 , ip ) : ip + " is invalid ipv4" ;
      logger . info ( "starting server to " + ip + ":102" ) ;
      return self . library . Srv_Start ( self . pointer , ip ) ;
    }
        protected void addCommonImages(Element parent) {
            String pid = getPortalMediator().getPortal().getId();
            File dir = new File(EventInfoAdminMediator.getImageBaseDir(pid));
    
            if (dir.exists()) {
                String[] list = dir.list();
                Element e;
    
                for (int i = 0; i < list.length; i++) {
                    e = createAndAddChildElement(parent, "CommonImage");
                    e.setAttribute("name",
                        EventInfoAdminMediator.getImageDocRoot(pid) + list[i]);
                    e.setAttribute("displayName",
                        (list[i].length() > 25) ? (list[i].substring(0, 25) +
                        "...") : list[i]);
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static boolean toDouble ( Object self ) {
      if ( self instanceof String ) return ( ( String ) self ) . trim ( ) . equalsIgnoreCase ( "true" ) ;
      if ( self instanceof Number ) return ( ( Number ) self ) . doubleValue ( ) > 0 ;
      return Boolean . parseBoolean ( ( String ) self ) ;
    }
        private JTextField getTxtNomeCliente() {
    		if (log.isDebugEnabled()) {
    			log.debug("getTxtNomeCliente() - start");
    		}
    
    		if (txtNomeCliente == null) {
    			txtNomeCliente = new JTextField();
    			txtNomeCliente.setBounds(new Rectangle(56, 40, 105, 20));
    			txtNomeCliente.setFont(new Font("Dialog", Font.BOLD, 12));
    			txtNomeCliente.setEditable(false);
    			txtNomeCliente.setEnabled(true);
    		}
    
    		if (log.isDebugEnabled()) {
    			log.debug("getTxtNomeCliente() - end - return value=" + txtNomeCliente);
    		}
    		return txtNomeCliente;
    	}
        public Date setEvaluationDate(final Date evaluationDate) {
            final DateProxy proxy = (DateProxy) attrs.get().get(EVALUATION_DATE);
            proxy.assign(evaluationDate);
            return proxy;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public List findByExample(User instance) {
            log.debug("finding User instance by example");
            try {
                List results = HibernateUtil.currentSession()
                        .createCriteria("com.ndss.pet.core.test.common.pet.domain.User")
                        .add(Example.create(instance))
                .list();
                log.debug("find by example successful, result size: " + results.size());
                return results;
            }
            catch (RuntimeException re) {
                log.error("find by example failed", re);
                throw re;
            }
        }
        public boolean equals(Object o) {
    		if (!(o instanceof UInt8)) {
    			return false;
    		}
    		return (((UInt8) o).value.equals(this.value));
    	}
        public void setIssue(int newIssue) {
    		issue = newIssue;
    	  
          
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public final void readChar() throws IOException {
      currInt=reader.read();
      ch=(char)currInt;
      if (ch == '\n') {
        line++;
      }
    }
        public void finishedNestedScope(ScopingAppenderEvent<ScopeStartEvent> ev) {
    		ScopeStartEvent ole = ev.getOwnedLoggingEvent();
    		if (!ole.getOwner().equals(getOwner())) {
    			return;
    		}
    		_innermostScope = ole.getParent();
    		_depth = _innermostScope.getDepth();
    		SessionView.instance().update(this);
    	}
        public static AlgoliaEngineWrapper register ( AlgoliaEngineWrapper model ) {
      final AlgoliasearchActivator activator = AlgoliaEngineActivator . getInstance ( ) ;
      final AlgoliaEngineWrapper wrapper = activator . getAlgoliaEngineWrapper ( ) ;
      if ( wrapper == null ) {
        throw new IllegalArgumentException ( "Wrapped class must subclass AlgoliaEngineWrapper." ) ;
      }
      activator . register ( model , wrapper ) ;
      return wrapper ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ChangelogWsResponse changelog(ChangelogRequest request) {
        return call(
          new GetRequest(path("changelog"))
            .setParam("issue", request.getIssue()),
          ChangelogWsResponse.parser());
      }
        protected void addFacesListener(FacesListener listener) {
    
            if (listener == null) {
                throw new NullPointerException();
            }
    
            if (listeners == null) {
                listeners = new AttachedObjectListHolder<FacesListener>();
            }
    
            listeners.add(listener);
    
        }
        protected void addBackgroundColorPropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add
    			(createItemPropertyDescriptor
    				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
    				 getResourceLocator(),
    				 getString("_UI_DiagramElement_backgroundColor_feature"),
    				 getString("_UI_PropertyDescriptor_description", "_UI_DiagramElement_backgroundColor_feature", "_UI_DiagramElement_type"),
    				 Di2Package.Literals.DIAGRAM_ELEMENT__BACKGROUND_COLOR,
    				 true,
    				 false,
    				 false,
    				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
    				 null,
    				 null));
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testSaveData() {
            try {
                FileInputStream si = new FileInputStream(TEST_PATIENT_DEFAULT_PATH);
                model.loadData(si);
                File file = new File(TEST_PATIENT_DEFAULT_PATH);
                file.delete();
                assertFalse(file.exists());
                file = null;
                
                FileOutputStream so = new FileOutputStream(TEST_PATIENT_DEFAULT_PATH);
                model.saveData(so);
                file = new File(TEST_PATIENT_DEFAULT_PATH);
                assertTrue(file.exists());
            } catch (GelloModelException e) {
                System.out.println(e.getMessage());
                assertFalse(true);
            } catch (FileNotFoundException e) {
                System.out.println(e.getMessage());
                assertFalse(true);
            }
        };
        public Object extractValue() {
    		for (int i = 0; i < buttons.size(); i++) {
    			JRadioButton jRadioButton = (JRadioButton) buttons.get(i);
    			if (jRadioButton.isSelected()) {
    				return ids.get(i);
    			}
    		}
    		return null;
    	}
        private JTextField getClientReconnectTimeout() {
    		if (clientReconnectTimeout == null) {
    			clientReconnectTimeout = new JTextField();
    		}
    		return clientReconnectTimeout;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void removeGUID(byte[] guid) {
            if(_guids.size() == 0) {
                return;
            } else {
                synchronized(this) {
                    if(_guids.size() > 0) {
                        Set guids = new TreeSet(new GUID.GUIDByteComparator());
                        guids.addAll(_guids);
                        guids.remove(guid);
                        _guids = guids;
                    }
                }
            }
        }
        public boolean contains(Object object) {
            Node<T> current = head;
            while (current.next != null) {
                current = current.next;
                if (current.value.equals(object))
                    return true;
            }
            return false;
        }
        public void doMission() {
            Unit unit = getUnit();
            while(isValid() && unit.getMovesLeft() > 0){
            	// Unit is between Europe and America, nothing to do
            	if (unit.isAtSea()){
                        unit.setMovesLeft(0);
                        return;
            	}
                switch(state){
                    case HUNTING:
                        hunt4Target();
                        break;
                    case TRANSPORTING:
                        gotoNearestPort();
                        break;
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public HashMap fetchIDName() throws Exception{
    		openDB();
    		
    		HashMap idNameMap = new HashMap();
    		String qtext = "SELECT pid, indexDir FROM personindex";
    		ResultSet rs = stmt.executeQuery(qtext); //edges table is not complete
    		while (rs.next()) {
    			String pid = rs.getString("pid");
    			String indexDir = rs.getString("indexDir");
    			idNameMap.put(indexDir.toLowerCase(), pid);
    		}
    		
    		rs.close();		
    		closeDB();
    		
    		return idNameMap;
    	}
        public void createPartControl(Composite parent) {
    		viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
    		viewer.setContentProvider(new ViewContentProvider());
    		viewer.setLabelProvider(new ViewLabelProvider());
    		viewer.setSorter(new NameSorter());
    		viewer.setInput(getViewSite());
    
    		// Create the help context id for the viewer's control
    		PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(), "CladosPlugin.viewer");
    		makeActions();
    		hookContextMenu();
    		hookDoubleClickAction();
    		contributeToActionBars();
    	}
        public boolean hasAttribute(String attribute_name)
       {  for (int i=0; i<av.size(); i++)
          {  if (((AttributeField)av.elementAt(i)).getAttributeName().equals(attribute_name)) return true;
          }
          return false;
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void putAll(Map map) {
        for (Iterator i = map.keySet().iterator(); i.hasNext();) {
          Object key = i.next();
          this.put(key, map.get(key));
        }
      }
        @SuppressWarnings({"UnusedDeclaration"}) private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
      s.defaultReadObject();
      if (params == null) {
        throw new NullPointerException();
      }
      if (this.source == null) {
        throw new NullPointerException();
      }
    }
        public void testgetPropertyTypeEmptyProperty() throws Exception {
    		loadAddons();
    		Class result = addonManager.getPropertyType(Sphere.class, "");
    		assertNull(result);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static Object getItem ( Map < ? , ? > self , String key ) {
      List < String > keys = Arrays . asList ( self . keySet ( ) ) ;
      if ( ! key . contains ( "." ) ) {
        printMessage ( "ERROR: '" + key + "' not found." ) ;
        return null ;
      }
      try {
        Object x = InvokerHelper . getProperty ( self , 1 , keys . indexOf ( key ) ) ;
        return x ;
      }
      catch ( Exception e ) {
        printMessage ( "ERROR: '" + self . getValue ( 1 , keys . indexOf ( key ) ) + "' cannot be evaluated." ) ;
        return null ;
      }
    }
        public void setCGIParams(Map<String, String[]> cgi_params ){
    		/*
    		 * Make a Map copy because it could be altered 
    		 */
    		if( cgi_params != null ) {
    			for( Entry<String, String[]> e: cgi_params.entrySet()) {
    				String v;
    				if( e.getValue().length == 0 ) {
    					v = "";
    				}
    				else  {
    					v = e.getValue()[0];
    				}
    				cgiParams.put(e.getKey().toLowerCase(),v);
    			}
    		}
    	}
        public void show() {
    	setup();
    	internalFrame.pack();
    	internalFrame.setMinimumSize(internalFrame.getSize());
    	internalFrame.addComponentListener(new ComponentAdapter() {
    	    @Override
    	    public void componentResized(ComponentEvent e) {
    		JFrame tmp = (JFrame) e.getSource();
    		if (tmp.getWidth() < internalFrame.getMinimumSize().getWidth()
    			|| tmp.getHeight() < internalFrame.getMinimumSize()
    				.getHeight()) {
    		    tmp.setSize(
    			    (int) internalFrame.getMinimumSize().getWidth(),
    			    (int) internalFrame.getMinimumSize().getHeight());
    		}
    	    }
    	});
    	internalFrame.setVisible(true);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void layoutComponents() {
    		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
    		panel.add(addPanel);
    		panel.add(Box.createHorizontalStrut(5));
    		panel.add(buttonsPanel);
    	}
        public void switchToEnglish() {
            resource = new MyResource_EN();
            updateTexts();
            updateStatusBar();
        }
        public static Point transformPoint(AffineTransform af,Point pt){
      Point2D src=new Point2D.Float(pt.x,pt.y);
      Point2D dest=af.transform(src,null);
      Point point=new Point((int)Math.floor(dest.getX()),(int)Math.floor(dest.getY()));
      return point;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Process open(String args[]) {
        try {
          return Runtime.getRuntime().exec(args);
        } catch (Exception e) {
          e.printStackTrace();
          throw new RuntimeException("Could not open " + join(args, ' '));
        }
      }
        private void addSubmission(ForkJoinTask<?> t) {
            final ReentrantLock lock = this.submissionLock;
            lock.lock();
            try {
                ForkJoinTask<?>[] q; int s, m;
                if ((q = submissionQueue) != null) {    // ignore if queue removed
                    long u = (((s = queueTop) & (m = q.length-1)) << ASHIFT)+ABASE;
                    UNSAFE.putOrderedObject(q, u, t);
                    queueTop = s + 1;
                    if (s - queueBase == m)
                        growSubmissionQueue();
                }
            } finally {
                lock.unlock();
            }
            signalWork();
        }
        public String toString() {
    		final StringBuilder output = new StringBuilder();
    		//phrase 
    		output.append("\"");
    		output.append(super.toString());
    		output.append("\"");
    		//with proximity constraint if not default	
    		if (proximityDistance > 1) 
    		{
    			output.append("~");
    			output.append(proximityDistance);
    		}
    		return output.toString();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public final void setMaxPriority(int pri) {
            int ngroupsSnapshot;
            ThreadGroup[] groupsSnapshot;
            synchronized (this) {
                checkAccess();
                // Android-changed: Clamp to MIN_PRIORITY, MAX_PRIORITY.
                // if (pri < Thread.MIN_PRIORITY || pri > Thread.MAX_PRIORITY) {
                //     return;
                // }
                if (pri < Thread.MIN_PRIORITY) {
                    pri = Thread.MIN_PRIORITY;
                }
                if (pri > Thread.MAX_PRIORITY) {
                    pri = Thread.MAX_PRIORITY;
                }
    
                maxPriority = (parent != null) ? Math.min(pri, parent.maxPriority) : pri;
                ngroupsSnapshot = ngroups;
                if (groups != null) {
                    groupsSnapshot = Arrays.copyOf(groups, ngroupsSnapshot);
                } else {
                    groupsSnapshot = null;
                }
            }
            for (int i = 0 ; i < ngroupsSnapshot ; i++) {
                groupsSnapshot[i].setMaxPriority(pri);
            }
        }
        public boolean processAccountProfile(DiameterMessage diameterAnswerMessage, Properties asynInterfaceParameters){
    	boolean status = true;
    	String value = "";
    	AttributeValuePair attributeValuePair;
    	attributeValuePair = diameterAnswerMessage.getAttributeValuePair(Integer.toString(APOLLO_ACCOUNT_PROFILE));
    	if (attributeValuePair != null){
    	  value = attributeValuePair.getValueAsString();
    	  asynInterfaceParameters.put(RT_AP_USSD_PARAM, value);
    	} else status = false;
    	msgLog(" : ===>> (USSD) ACOUNT PROFILE, VALUE = " + asynInterfaceParameters.getProperty(RT_AP_USSD_PARAM));
    	return status;
      }
        public boolean equals( Object o ) {
    
        boolean retVal = false;
        if ( o instanceof OarsetView ) {
          retVal = this.getId() == ((OarsetView)o).getId();
        }
    
        return retVal;
      } // equals(Object)
    }
}

 }class Test{ 
class Test {
    public class Example {
    void skipRemainingSiblings(){
      if (!stack.isEmpty()) {
        stack.peek().skip();
      }
    }
        @Nonnull
      public static EChange setExpirationSeconds (final int nExpirationSeconds)
      {
        return s_aRWLock.writeLocked ( () -> {
          if (s_nExpirationSeconds == nExpirationSeconds)
            return EChange.UNCHANGED;
          s_nExpirationSeconds = nExpirationSeconds;
          LOGGER.info ("ResponseHelper expirationSeconds=" + nExpirationSeconds);
          return EChange.CHANGED;
        });
      }
        public void removeFolder(FolderTree folderTree, Folder folder) throws RepositoryException {
    
            for (Folder subfolder : new ArrayList<Folder>(folder.getFolders())) {
                removeFolder(folderTree, subfolder);
            }
    
            for (ContentFile file : new ArrayList<ContentFile>(folder.getFiles())) {
                removeFile(file);
            }
    
            folderDao.remove(folder.getPath());
            if (folderTree.getSelectedFolder().equals(folder)) {
                folderTree.setSelectedFolder(folder.getParent());
            }
    
            log.info("Deleting folder {0}", folder.getPath());
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String toString() {
            StringBuffer rc = new StringBuffer("Person: ");
            rc.append(personid);
            rc.append(", ");
            rc.append(lastname);
            rc.append(", " + firstname);
            rc.append(", born " + formatter.format(birthdate));
            rc.append(", phone " + phoneNumbers);
            return rc.toString();
        }
        public Element createHeaderAssignElementForProcessInputRedirect(Container4BPEL process) {
    		Element assign = this.document.createElement("assign");
    		
    		for (Task task : BPELUtil.getDistinctServiceList(process.getTasks())) {
    			/* Copy token */
    			Copy copy = prepareCopyForHeaderMetaData(task.getId(), "token");
    			Element copyElement = createCopyElement(copy);
    			assign.appendChild(copyElement);
    			
    			/* Copy reporting service URL */
    			copy = prepareCopyForHeaderMetaData(task.getId(), "reportingService");
    			copyElement = createCopyElement(copy);
    			assign.appendChild(copyElement);
    		}
    		
    		return assign;
    	}
        public void addContext(Context context) {
        if (context.getGedcom()!=getGedcom())
          throw new IllegalArgumentException();
        addProperties(context.getProperties());
        addEntities(context.getEntities());
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setDayProperties(int newCurrent, int newLast) {
            if(newCurrent > newLast || newCurrent < 0 || newLast < 0 ||
    	   (newCurrent == current && newLast == last))
    	    return;
    
    	current = newCurrent;
    	last = newLast;
    	fireStateChanged();
        }
        @ VisibleForTesting static void deserializeForImport ( Block self , JsonReader reader ) throws IOException {
      super . deserializeForImport ( self , reader ) ;
      self . transactions = new ArrayList < Transaction > ( ) ;
      int transactionLength = reader . readVarInt ( ) ;
      for ( int i = 0 ;
      i != transactionLength ;
      ++ i ) {
        Transaction tx = Transaction . deserializeFrom ( reader ) ;
        self . transactions . add ( tx ) ;
      }
      if ( self . transactions . size ( ) < 1 ) {
        throw new RuntimeException ( "Invalid format " + self . index + " " ) ;
      }
    }
        @DoesServiceRequest
        public boolean createIfNotExists(TableRequestOptions options, OperationContext opContext) throws StorageException {
            options = TableRequestOptions.populateAndApplyDefaults(options, this.tableServiceClient);
    
            boolean exists = this.exists(true, options, opContext);
            if (exists) {
                return false;
            }
            else {
                try {
                    this.create(options, opContext);
                    return true;
                }
                catch (StorageException e) {
                    if (e.getHttpStatusCode() == HttpURLConnection.HTTP_CONFLICT
                            && StorageErrorCodeStrings.TABLE_ALREADY_EXISTS.equals(e.getErrorCode())) {
                        return false;
                    }
                    else {
                        throw e;
                    }
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void zoomChanged(int newValue, int oldValue) {
    	Iterator iter = getHost().getChildren().iterator();
    	while (iter.hasNext()) {
    		EditPart child = (EditPart) iter.next();
    		Object modelConstraint = getChildConstraint(child);
    		Rectangle figureConstraint = (Rectangle) modelToFigureConstraint(modelConstraint);
    		setConstraintToFigure(child, figureConstraint);
    	}
    	if (gridController != null)
    		gridFigure.repaint();	// Also repaint the entire grid	
    }
        private static Map < String , List < ExamplesPojo >> toPojoMap ( ExamplesPojo self ) {
      Map < String , List < ExamplesPojo >> map = new HashMap < > ( ) ;
      if ( StringUtils . isNotBlank ( self . getExamples ( ) ) && self . getExamples ( ) . size ( ) > 0 ) {
        map . put ( self . getExamples ( ) . get ( 0 ) . toPojoString ( ) , new ArrayList < > ( self . getExamples ( ) ) ) ;
      }
      return map ;
    }
        public String getRootFolder() {
    
            String folder = "/";
            if (getSettings().getUserSettings().getRestrictExplorerView()) {
                folder = getSettings().getUserSettings().getStartFolder();
            }
            try {
                getCms().readFolder(folder, CmsResourceFilter.IGNORE_EXPIRATION);
                return folder;
            } catch (CmsException e) {
                // should usually never happen
                if (LOG.isInfoEnabled()) {
                    LOG.info(e);
                }
                return "/";
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getMinorPart() {
            int cdp = getCurrencyUnit().getDecimalPlaces();
            return iAmount.setScale(cdp, RoundingMode.DOWN)
                        .remainder(BigDecimal.ONE)
                        .movePointRight(cdp).intValueExact();
        }
        public void setA(C4 a) {
          this.a = (C4) a;
          if (a == null) {
             a_aId = null;
          }
       }
        public static nnabla_pb2 . Function generateBroadcastTo ( String nodeName , float x , float y , String outName , int axis , String baseName , int funcCounter ) {
      nnabla_pb2 . Function bt = new nnabla_pb2 . Function ( ) ;
      bt . type = "BroadcastTo" ;
      setFunctionName ( bt , nodeName , baseName , funcCounter ) ;
      bt . input . add ( x ) ;
      bt . output . add ( y ) ;
      nnabla_pb2 . BroadcastToParam btp = bt . broadcast_to_param ;
      btp . axis = axis ;
      return bt ;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getAnnouncement(String sessionId, int index) throws Exception {
    		if(!loggedUsers.containsKey(sessionId))
    			throw new InvalidSessionException();
    		
    		if(index < 0 || index >= getNumberOfAnnouncements(sessionId))
    			throw new InvalidIndexException();
    		
    		return loggedUsers.get(sessionId).getAnnouncement(index);
    	}
        private void handleApproach(final MobApproach chosen) {
    		switch (chosen) {
    		case TALK:
    			TalkEvent talk = 
    				(TalkEvent) Diceroller.getRandomObject(
    						approaches.get(chosen));
    			childEvent = talk;
    			Flow.addEventToBeginning(childEvent);
    			talk.fire();
    			break;
    		case EVADE:
    			EvadeEvent evade = 
    				(EvadeEvent) Diceroller.getRandomObject(
    						approaches.get(chosen));
    			childEvent = evade;
    			evade.fire();
    			break;
    		case FIGHT:
    			AttackEvent attack = 
    				(AttackEvent) Diceroller.getRandomObject(
    						approaches.get(chosen));
    			childEvent = attack;
    			BPController.showCombat(mobs, attack, attack.isDuel());
    			break;
    		default: break;
    		}
    	}
        protected void mouseReleased(int mButton) {
            // Return events for this widget
            if (listener != null && hasMouseOver())
                listener.mouseReleased(mButton);
    
            // Cycle the child widget list and send the mouseReleased event
            for (int i = 0; i < widgetList.size(); i++) {
                Widget widget = (Widget) widgetList.elementAt(i);
                widget.mouseReleased(mButton);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void preloadItems() {
    
    		// check if there are any items present, load some if not
    		if(dao.findAll(JsffullcrudItem.class).isEmpty()){
    
    			// use the dao to preload some data here
    			dao.save( new JsffullcrudItem("Preload Title", 
    					"Preload Owner", "Preload Site", Boolean.TRUE, new Date()) );
    
    			log.info("Preloaded " + dao.countAll(JsffullcrudItem.class) + " items");
    		}
    	}
        public boolean selectByPrimary(TileID id) throws SQLException {
            PreparedStatement pstmt = connection.prepareStatement("SELECT id FROM " + table + " WHERE id=?");
            pstmt.setInt(1, id.getValue());
            ResultSet ret = pstmt.executeQuery();
            boolean result = ret.next();
            pstmt.close();
            return result;
        }
        private WCMGraph1DBean getGraphF() {
    		if (graphF == null) {
    			graphF = new WCMGraph1DBean();
    			if (presentation) {
    				graphF.setLineWidth(3.0f);
    			}
    			graphF.setFunction(getWCMExpressionInputBean());
    		}
    		return graphF;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void i(Object... msg){
      if (LuaViewConfig.isDebug()) {
        Log.i(DEFAULT_PREFIX,getMsg(msg));
      }
    }
        private void createNuSMVfileWithProps(Set<String> props) throws Exception {
    		as.mv.ctlList.clear();
    		as.addCtlProperties(props);
    		as.createNuSMVfile();
    	}
        public void testProcessNullActionEvent() {
            try {
                ActionController controller = new ActionController();
    
                controller.processEvent(null);
                fail("can't process null action event");
            } catch (IllegalArgumentException e) {
                ok(); // pass
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static boolean verifyPayload ( String signedPayload , String clientSecret ) throws Exception {
      String encodedJson = signedPayload , encodedHMAC = null ;
      String dcJson = Base64 . decode ( encodedJson ) ;
      String signature = Base64 . decode ( encodedHMAC ) ;
      String expectedSig = new String ( clientSecret . getBytes ( ) , "UTF-8" ) ;
      boolean authorised = Base64 . equals ( signature , expectedSig . getBytes ( ) ) ;
      return StringUtils . isEmpty ( dcJson ) ? false : authorised ;
    }
        public void actionPerformed(ActionEvent evt) {
    		String cmd = evt.getActionCommand();
    		String src = evt.getSource().getClass().toString();
    		if( Settings.debug ){
    			System.out.println( "AppControl <-- " + cmd + " ( " + src + " )" );
    		}
    		if( cmd.equalsIgnoreCase("load") ){
    			load();
    			
    		}
    		if( cmd.equalsIgnoreCase("save") ){
    			save();
    			
    		}
    		if( cmd.equalsIgnoreCase("test") ){
    			try {
    				test();
    			} catch (BadSampleBytesException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			}
    			
    		}
    		if( cmd.equalsIgnoreCase("generate") ){
    			generate();
    			
    		}
    	}
        private static void onReadComplete ( ConnectionId self , String data , Box box ) {
      Map < String , Object > msg = MapBuilder . of ( "conn_id" , id ( self ) , "address" , self . address , "data" , data , "data" , data , "data" , data ) ;
      int groupId = factory ( self ) . getApp ( ) . getGroupRouter ( box ) ;
      try {
        factory ( self ) . getApp ( ) . getParentOutputMap ( ) . get ( groupId ) . putOutgoing ( msg ) ;
      }
      catch ( Exception e ) {
        logger . error ( "exc occur. msg: " + msg , e ) ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void initComponents(AttachmentController c) {
    		menuItem = new JMenuItem("Attach File..", MailImageLoader
    				.getSmallIcon("mail-attachment.png"));
    		menuItem.setActionCommand("ADD");
    		menuItem.addActionListener(c.getActionListener());
    		add(menuItem);
    		addSeparator();
    		menuItem = new JMenuItem("Remove Selected Attachments", ImageLoader
    				.getSmallIcon(IconKeys.EDIT_DELETE));
    		menuItem.setActionCommand("REMOVE");
    		menuItem.addActionListener(c.getActionListener());
    		add(menuItem);
    	}
        public static < T > List < List < T >> mapBatchParallel ( List < T > inputList , int batchSize , ItemMapper < T > itemMapper , BatchMapper < T > batchMapper , boolean flatten , int parallelism , @ Nullable String ... batchStorageDir ) {
      if ( itemMapper == null && batchMapper == null ) {
        throw new IllegalArgumentException ( "You should specify either batchMapper or itemMapper." ) ;
      }
      if ( batchMapper == null ) {
        batchMapper = defaultBatchMapper ;
      }
      List < List < T >> batches = splitIntoBatches ( inputList , batchSize , batchStorageDir ) ;
      List < List < T >> allBatchResults = Parallel . getInstance ( parallelism , batchMapper ) . map ( new Parallel . MapBatch < T , List < T >> ( ) {
        @ Override public List < T > map ( List < T > batch ) {
          return batchMapper . map ( batch . get ( "data" ) , itemMapper ) ;
        }
      }
      ) ;
      if ( flatten ) {
        List < List < T >> finalResult = new ArrayList < List < T >> ( ) ;
        for ( List < T > batchResult : allBatchResults ) {
          finalResult . addAll ( batchResult ) ;
        }
      }
      else {
        finalResult = allBatchResults ;
      }
      return finalResult ;
    }
        public void setBankSpecifics(BankAccountInfo bankSpecifics) {
        this.creditCardSpecifics = null;
        this.investSpecifics = null;
        this.bankSpecifics = bankSpecifics;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ISupplier getSupplier(SupplierID sid, SupplierKey supplierKey) {
            Vector<ISupplier> v = _allSuppliers.get(sid.getIndex());
            for (int i = 0; i < v.size(); i++) {
                if (v.get(i).hasKeyHole(supplierKey)) {
                    return (ISupplier) v.get(i);
                }
            }
            if (sid.hasDummy()) {
                return sid.getDummy();
            } else {
                if(supplierKey != null)
                    __log.error("Could not find Supplier for " + sid.toString() + " with key " + supplierKey.toString());
                else
                    __log.error("Could not find Supplier for " + sid.toString() + " with null key");
                  
                throw new SupplierNotFoundEx(sid, supplierKey, v.size());
            }
    
        }
        public Object clone() {
        KL m = null; 
        m = (KL) super.clone();
        
        // clone the fields
        // for now clone a metric learner via serialization; TODO:  implement proper cloning in MetricLearners
        System.out.println("New alpha=" + m_alpha);
        try { 
          SerializedObject so = new SerializedObject(m_metricLearner);
          m.m_metricLearner = (MetricLearner) so.getObject();
        } catch (Exception e) {
          System.err.println("Problems cloning m_metricLearner while cloning KL");
        }
        return m;
      }
        public void moveToEnd(Instruction inst){
      Iterator<GCIRMapElement> iter=list.iterator();
      while (iter.hasNext()) {
        GCIRMapElement newPtr=iter.next();
        if (newPtr.getInstruction() == inst) {
          iter.remove();
          list.add(newPtr);
          return;
        }
      }
      throw new OptimizingCompilerException("GCIRMap.moveToEnd(" + inst + ") did not delete instruction from GC Map ");
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void navCellStart() {
            print("  ");
            tdBgcolorStyle("#EEEEFF", "NavBarCell1");
            print("    ");
        }
        public StreamInfoManager(TwitchApi api,StreamInfoListener listener){
      this.listener=listener;
      this.api=api;
      pendingRequests=new HashMap<>();
      invalidStreamInfo=new StreamInfo("invalid",listener);
      invalidStreamInfo.setRequested();
    }
        @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.244 -0500",hash_original_method="7F9E047B51DBA75DC18A757B80E882F7",hash_generated_method="DB1114BC7A734B93414409E7AC5A0CD5") public static String toOctalString(long v){
      String str=new String();
      str.addTaint((int)v);
      return str;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public CsrfToken loadToken(HttpServletRequest request) {
    		HttpSession session = request.getSession(false);
    		if (session == null) {
    			return null;
    		}
    		return (CsrfToken) session.getAttribute(this.sessionAttributeName);
    	}
        public Movie(String id,String name,String description){
      this.id=id;
      this.name=name;
      this.description=description;
    }
        public void setFiscalYear(int fiscalYear) {
    
    		/*
    		 * XXX COM4J generates a short for fiscalYear, and crashes without
    		 * throwing an exception. Change it to 'int' and it magically works (UBC
    		 * v3.8.2, COM4J v20080107).
    		 */
    		this.ubcAdministration.fiscalYear(fiscalYear);
    
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static Map < String , String > mapUserDetails ( User self , Map < String , String > response ) {
      Map < String , String > dest = new HashMap < > ( ) ;
      for ( Map . Entry < String , String > sourceEntry : CLAIMS_TO_DETAILS_KEY_MAP . entrySet ( ) ) {
        String destKey = sourceEntry . getKey ( ) ;
        String destKey = destKey . toLowerCase ( ) ;
        String value = response . get ( sourceEntry . getValue ( ) ) ;
        if ( value != null ) {
          dest . put ( destKey , value ) ;
        }
      }
      return dest ;
    }
        @SuppressWarnings("unchecked")
        public <T> T getObjectByUuid(Class<T> clazz, UUID uuid, String fetchGroup) {
            pm.getFetchPlan().addGroup(fetchGroup);
            return getObjectByUuid(clazz, uuid);
        }
        public static void register(Class<? extends ResourceResolverSpi> className,boolean start){
      JavaUtils.checkRegisterPermission();
      try {
        ResourceResolverSpi resourceResolverSpi=className.newInstance();
        register(resourceResolverSpi,start);
      }
     catch (  IllegalAccessException e) {
        log.log(java.util.logging.Level.WARNING,"Error loading resolver " + className + " disabling it");
      }
    catch (  InstantiationException e) {
        log.log(java.util.logging.Level.WARNING,"Error loading resolver " + className + " disabling it");
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void markCompletelyClean(JComponent aComponent) {
    	synchronized(this) {
    		dirtyComponents.remove(aComponent);
    	}
        }
        public static boolean deleteNamespace ( Namespace self , String name , boolean ignore_errors ) {
      if ( self . hasNamespace ( name ) ) {
        System . clearProperty ( "java.naming.Context.prefix" ) ;
        return true ;
      }
      else if ( ignore_errors ) {
        return true ;
      }
      else {
        throw new IllegalStateException ( "namespace '" + name + "' does not exist" ) ;
      }
    }
        public void importRtfDocument(InputStream readerIn, RtfDocument rtfDoc) throws IOException {
    		if(readerIn == null || rtfDoc == null) return;
    		this.init(TYPE_IMPORT_FULL, rtfDoc, readerIn, this.document, null);
    		this.setCurrentDestination(RtfDestinationMgr.DESTINATION_NULL);
    		startDate = new Date();
    		startTime = System.currentTimeMillis();
    		this.groupLevel = 0;
    		try {
    			this.tokenise();
    		} catch (RuntimeException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    		catch (Exception e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    		endTime = System.currentTimeMillis();
    		endDate = new Date();
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void handleConnectError(Throwable ex) {
            connectThrowable = ex;
            loginFailed = true;
            try {
                client.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
    
            System.out.println(ex.getMessage());
        }
        public File writeForm(File fileout) throws FormPrintException {
            if(!m_processed)
                throw new IllegalStateException("The form not been processed yet");
            try {
                if(fileout == null) {
                    String extn = ".txt";
                    if(FormPrintFactory.ENGINE_TYPE_ITEXT.equals(m_engineType) || 
                       FormPrintFactory.ENGINE_TYPE_PDFLIB.equals(m_engineType) )
                        extn = ".pdf";
                    fileout = File.createTempFile("form_", extn);
                }
                OutputStream bos = new FileOutputStream(fileout);
                bos.write(m_output);
                bos.close();
            } catch (IOException e) {
                log.error("Error Writing out PDF", e);
                return null;
            }
            return fileout;
        }
        public static AuditDto transformToDto(Audit audit) {
            if (audit == null) {
                throw new WebApplicationException("Null entity object cannot be converted to Dto object.", Status.INTERNAL_SERVER_ERROR);
            }
    
            AuditDto auditDto = new AuditDto();
    
            try {
            	    auditDto.setId(audit.getId());
            	    auditDto.setHostName(audit.getHostName());
            	    auditDto.setMessage(audit.getMessage());
            	    auditDto.setCreatedDate(audit.getCreatedDate());
                auditDto.setEntityId(audit.getEntityId());
            } catch (Exception ex) {
                throw new WebApplicationException("DTO transformation failed.", Status.INTERNAL_SERVER_ERROR);
            }
            return auditDto;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean isRendered() {
            if (!UserRoleUtils.isVisibleOnUserRole(this))
                return false;
            //return super.isRendered();
            if (_rendered != null) return _rendered.booleanValue();
            ValueBinding vb = getValueBinding("rendered");
            Boolean v = vb != null ? (Boolean)vb.getValue(getFacesContext()) : null;
            return v != null ? v.booleanValue() : DEFAULT_RENDERED;
        }
        public int getLabelSize(int frequency) {
    		// Lineal interpolation
    		//int multiplier = (MAX_FONT_SIZE-MIN_FONT_SIZE)/(maxFrequency-minFrequency);  
    		//int fontSize = MIN_FONT_SIZE + ((maxFrequency-(maxFrequency-(frequency-minFrequency)))*multiplier);
    		
    		// Logarithmic interpolation
    		double weight = (Math.log(frequency) - Math.log(minFrequency)) / (Math.log(maxFrequency) - Math.log(minFrequency));
    		int fontSize = MIN_FONT_SIZE + (int)Math.round((MAX_FONT_SIZE - MIN_FONT_SIZE) * weight);  
    		
    		return fontSize;
    	}
        private void fillUpPartitions() {
    		Set<Event> rest = new TreeSet<Event>(table.getUnpartitionedEvents());
    		if (!rest.isEmpty()) {
    			Partition p = new Partition(rest);
    
    			String name = showNameDialog(Messages.getString("em",
    					"PartitionPanel.DefaultPartitionName")
    					+ ""
    					+ (observations.size() + 1));
    			if (name != null) {
    				p.setName(name);
    				observations.add(p);
    				((PartitionListModel) partitionList.getModel())
    						.setElements(observations);
    
    				bRemove.setEnabled(true);
    			} else {
    				p.remove();
    			}
    
    			table.clearSelection();
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void writeStream(InputStream source,int totalLength) throws IOException {
      if (source == null)   return;
      int length=_writeBuffer.length;
      if (length <= _writeLength) {
        int tmplen=_writeLength;
        _writeLength=0;
        _source.write(_writeBuffer,0,tmplen,false);
        _position+=tmplen;
        _isFlushRequired=true;
      }
      while (totalLength > 0) {
        int sublen=Math.min(totalLength,length - _writeLength);
        sublen=source.read(_writeBuffer,_writeLength,sublen);
        if (sublen < 0)     break;
        _writeLength+=sublen;
        totalLength-=sublen;
        if (length <= _writeLength) {
          int tmplen=_writeLength;
          _writeLength=0;
          _source.write(_writeBuffer,0,tmplen,false);
          _position+=tmplen;
          _isFlushRequired=true;
        }
      }
      if (_isFlushOnNewline || _implicitFlush) {
        flush();
      }
    }
        public void addExceptionConfig(ExceptionConfig config) {
            throwIfConfigured();
    
            String key = config.getType();
    
            if (exceptions.containsKey(key)) {
                log.warn("Overriding ExceptionConfig of type " + key);
            }
    
            exceptions.put(key, config);
        }
        protected void fireDataReceived(byte[] data, int offset, int length) {
    		Object[] listeners = listenersList.getListenerList();
    		
    		for (int i = listeners.length - 2; i >= 0; i -= 2)
    			if (listeners[i] == DataListener.class)
    				((DataListener) listeners[i + 1]).dataReceived(
    						new DataEvent(this, data, offset, length));
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static PlotDataSolverFactory instance(){
      if (null == singleton) {
        createSingleton();
      }
      return singleton;
    }
        public void actionPerformed( ActionEvent e ) {
    			String keywords = textInputUrlTextField.getText().replaceAll( " ", "+" );
    			String queryUrl = (String) newsFeed.textInputElements.get( "link" ) + '?'
    				 + (String) newsFeed.textInputElements.get( "name" ) + '='
    				 + keywords;
    			try {
    				BrowserLauncher.openURL( queryUrl );
    			}
    			catch ( Exception ex ) {
    				ex.printStackTrace();
    			}
    		}
        public Object exec(List arguments) {
            StringBuilder  aResults = new StringBuilder( "Arguments are:<br />" );
            Iterator    iList = arguments.iterator();
    
            while( iList.hasNext() ) {
                aResults.append( (String)iList.next() );
                aResults.append( "<br />" );
            }
    
            return new SimpleScalar( aResults.toString() );
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public ByteArrayList grep(TIntProcedure condition){
      ByteArrayList list=new ByteArrayList();
      for (int i=0; i < _pos; i++) {
        if (condition.execute(_data[i])) {
          list.add(_data[i]);
        }
      }
      return list;
    }
        DataResource navigate(String resourcePath, boolean returnNullIfNotExists) {
    
        ResourcePathNode<Void> path = ResourcePathNode.create(resourcePath);
        ClasspathFolder parent = getParent();
        if (parent == null) {
          // in case of root...
          parent = this;
        }
        DataResource result = parent.navigate(path, false);
        if ((result == null) && !returnNullIfNotExists) {
          String parentPath = "";
          if (!isRoot()) {
            parentPath = parent.getPath();
          }
          ResourcePathNode<Void> targetPath = ResourcePathNode.create(parentPath).navigateTo(path);
          String classpath = targetPath.toString();
          if (targetPath.isAbsolute()) {
            classpath = classpath.substring(1);
          }
          return new ClasspathResource(classpath);
        }
        return result;
      }
        public static String toHex(ByteBuffer data){
      StringBuilder result=new StringBuilder();
      int counter=0;
      int b;
      while (data.hasRemaining()) {
        if (counter % 16 == 0) {
          result.append(String.format("%04X: ",counter));
        }
        b=data.get() & 0xff;
        result.append(String.format("%02X ",b));
        counter++;
        if (counter % 16 == 0) {
          result.append("  ");
          toText(data,result,16);
          result.append("\n");
        }
      }
      int rest=counter % 16;
      if (rest > 0) {
        for (int i=0; i < 17 - rest; i++) {
          result.append("   ");
        }
        toText(data,result,rest);
      }
      return result.toString();
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Set getSubProperties() throws KAONException {
            synchronized (getLock()) {
                if (m_subProperties==null)
                    loadThisObject(OIModel.LOAD_SUB_PROPERTIES);
                return m_subProperties;
            }
        }
        public static < T , R > T cast ( CastFn < T , R > fn ) {
      final T t = fn . apply ( ) ;
      final R call = fn . apply ( t ) ;
      Objects . requireNonNull ( call ) ;
      return t ;
    }
        @Override public void changeEvent(final IChangeRecord record){
      if (changeSet == null) {
        changeSet=new HashMap<ISPO,IChangeRecord>();
        ndx=getHistoryIndex(tripleStore);
        if (minReleaseAge > 0) {
          pruneHistory();
        }
      }
      final ISPO spo=record.getStatement();
      changeSet.put(spo,record);
      if (changeSet.size() > threshold) {
        flush();
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean render(InternalContextAdapter context,Writer writer,Node node) throws IOException, MethodInvocationException {
      try {
        if (nodeTree != null) {
          VMContext vmc=new VMContext(context,rsvc);
          for (int i=0; i < argumentNamesArray.length; i++) {
            vmc.addVMProxyArg(args[i]);
          }
          nodeTree.render(vmc,writer);
        }
     else {
          rsvc.error("VM error : " + macroName + ". Null AST");
        }
      }
     catch (  Exception e) {
        if (e instanceof MethodInvocationException) {
          throw (MethodInvocationException)e;
        }
        rsvc.error("VelocimacroProxy.render() : exception VM = #" + macroName + "() : "+ StringUtils.stackTrace(e));
      }
      return true;
    }
        public void setCircle(float cx, float cy, float px, float py) {
        float dx = px - cx;
        float dy = py - cy;
        radius = (float) Math.sqrt(dx * dx + dy * dy);
        c1.setLocation(cx, cy);
        c2.setLocation(px, py);
        p1.setLocation(cx - radius, cy - radius);
        p2.setLocation(cx + radius, cy + radius);
        calculateBounds();
      }
        protected void resetFont(GC gc) {
            if (m_TMPfont!=null) {
                m_TMPfont.dispose();
                m_TMPfont = null;
            }
                
            gc.setFont(m_GCfont);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void addInput ( Input self , Input input_ ) {
      if ( input_ == null ) {
        throw new NullPointerException ( "`input_` must not be null" ) ;
      }
      self . inputs . add ( input_ ) ;
    }
        public void onSurfaceChanged(GL10 gl, int width, int height) {
    		gl.glViewport(0, 0, width, height);
    
    		/*
    		 * set up projection matrix (frustum-definition)
    		 */
    		float ratio = (float) width / height;
    		gl.glMatrixMode(GL10.GL_PROJECTION);
    		gl.glLoadIdentity();
    		gl.glFrustumf(-ratio, ratio, -1, 1, l.getZNear(), l.getZFar());
    
    	}
        protected void addStartNodePropertyDescriptor(Object object) {
    		itemPropertyDescriptors.add
    			(createItemPropertyDescriptor
    				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
    				 getResourceLocator(),
    				 getString("_UI_Arc_startNode_feature"),
    				 getString("_UI_PropertyDescriptor_description", "_UI_Arc_startNode_feature", "_UI_Arc_type"),
    				 ModelsPackage.Literals.ARC__START_NODE,
    				 true,
    				 false,
    				 true,
    				 null,
    				 null,
    				 null));
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static ResourceIndex risearch ( ResourceIndex self ) {
      if ( self . risearch == null ) {
        self . risearch = new ResourceIndex ( self . api . baseUrl , self . api . username , self . api . password ) ;
      }
      return self . risearch ;
    }
        public void setLocalEngineID(byte[] engineID) {
        if ((engineID == null) ||
            (engineID.length < MINLEN_ENGINE_ID) ||
            (engineID.length > MAXLEN_ENGINE_ID)) {
          throw new IllegalArgumentException("Illegal (local) engine ID");
        }
        this.localEngineID = engineID;
      }
        public String list(Collection coll, String methodToUse) {
    		Object[] array = new Object[coll.size()];
    		coll.toArray(array);
    		return list(array, methodToUse);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void usePlenaryProficiencyView ( Activity self ) {
      self . findViewById ( R . id . object_views ) . setProficiency ( PLENARY ) ;
      for ( ProviderSession session : getProviderSessions ( ) ) {
        try {
          session . usePlenaryProficiencyView ( ) ;
        }
        catch ( RemoteException e ) {
          e . printStackTrace ( ) ;
        }
      }
    }
        public static Point2D normalTo(Point2D P){
    		Point2D N = new Point2D.Double();
    		N.setLocation(P.getY(),-P.getX());
    		return N;
    	}
        public void testVersion_03_contextSC() throws Exception {
    		IContextRoot root = createContext("ctx");
    		root.setConfiguration(ORG_EVENTB_CORE_FWD, null);
    		saveRodinFileOf(root);
    		
    		runBuilder();
    		
    		ISCContextRoot scRoot = root.getSCContextRoot();
    		
    		assertEquals("attribute missing in SC context", ORG_EVENTB_CORE_FWD, scRoot.getConfiguration());
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void notifyChanged(Notification notification) {
    		updateChildren(notification);
    
    		switch (notification.getFeatureID(DictLiteralExp.class)) {
    			case ImperativeoclPackage.DICT_LITERAL_EXP__PART:
    				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
    				return;
    		}
    		super.notifyChanged(notification);
    	}
        private List<Column> filterKeyColumn(CqlRow row) {
        if ( suppressKeyInColumns && row.isSetColumns() && row.columns.size() > 0) {
          Iterator<Column> columnsIterator = row.getColumnsIterator();
          Column column = columnsIterator.next();
          if ( column.name.duplicate().equals(KEY_BB) ) {
            columnsIterator.remove();  
          }      
        }
        return row.getColumns();
      }
        public void removeChannel(int n){
    	if(!((n>=0)&&(n<getChannelNum())))
    	    return;
    	sounds.remove(n);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String toURLEncodedQueryString() throws FSMsgException {
      StringBuffer urlEncodedAuthnReq=new StringBuffer(300);
      if ((authnContextClassRefList != null) && (!authnContextClassRefList.isEmpty())) {
        if ((authnContextStatementRefList != null) && (!authnContextStatementRefList.isEmpty())) {
          throw new FSMsgException("ExclusiveEntries",null);
        }
        StringBuffer strEncodedString=new StringBuffer(100);
        Iterator j=authnContextClassRefList.iterator();
        strEncodedString.append((String)j.next());
        while (j.hasNext()) {
          strEncodedString.append(" ").append((String)j.next());
        }
        urlEncodedAuthnReq.append("AuthnContextClassRef=").append(URLEncDec.encode(strEncodedString.toString())).append(IFSConstants.AMPERSAND);
      }
      if ((authnContextStatementRefList != null) && (!authnContextStatementRefList.isEmpty())) {
        StringBuffer strEncodedString=new StringBuffer(100);
        Iterator j=authnContextStatementRefList.iterator();
        strEncodedString.append((String)j.next());
        while (j.hasNext()) {
          strEncodedString.append(" ").append((String)j.next());
        }
        urlEncodedAuthnReq.append("AuthnContextClassRef=").append(URLEncDec.encode(strEncodedString.toString())).append(IFSConstants.AMPERSAND);
      }
      if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {
        if (authnContextComparison != null) {
          urlEncodedAuthnReq.append("AuthnContextComparison=").append(URLEncDec.encode(authnContextComparison)).append(IFSConstants.AMPERSAND);
        }
      }
      return urlEncodedAuthnReq.toString();
    }
        public int getPosition() {
            if (_parent == null) {
                return -1;
            }
            return _parent.getNodeIndex(this);
        }
        public EClass getIfcDocumentSelect() {
    
    		if (ifcDocumentSelectEClass == null) {
    
    			ifcDocumentSelectEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc2x3tc1Package.eNS_URI)
    
    					.getEClassifiers().get(952);
    
    		}
    
    		return ifcDocumentSelectEClass;
    
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static boolean acquire ( LockInfo self , Boolean waitflag ) {
      if ( waitflag == null || waitflag ) {
        self . lockedStatus = true ;
        return true ;
      }
      else {
        if ( ! self . lockedStatus ) {
          self . lockedStatus = true ;
          return true ;
        }
        else {
          return false ;
        }
      }
    }
        public static User requireAuth ( Request request , boolean exceptions ) throws NotAuthorizedException {
      if ( request == null || request . user == null ) {
        if ( exceptions ) {
          throw new NotAuthorizedException ( ) ;
        }
        return null ;
      }
      return request . user ;
    }
        private JMenu getRenderedLayersMenu() {
    		if (renderedLayerMenu == null) {
    			renderedLayerMenu = new JMenu();
    			renderedLayerMenu.setText("Rendered Layers");
    
    			for (int i = 0; i < getNumLayers(); i++) {
    				renderedLayerMenu.add(getRenderedLayersMenuItems(i));
    			}
    		}
    		return renderedLayerMenu;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void actionDelete() {
            if (!(_currentTable.getRowCount() == 0)) {
                if (_mode) {
                    _tableStructurePanel.getTableModel().deleteRow(_currentTable
                                                                      .getSelectedRow());
                } else {
                    _tableDataPanel.getTableModel().deleteRow(_currentTable
                                                                 .getSelectedRow());
                }
    
                if (!(_currentRow.intValue() == 0)) {
                    _currentRow = new Long(_currentRow.intValue() - 1);
                    _currentTable.setColumnSelectionInterval(0,
                                                            _currentTable
                                                                .getColumnCount()
                                                            - 1);
                    _currentTable.setRowSelectionInterval(_currentRow.intValue(),
                                                         _currentRow.intValue());
                    this.setRow(_currentRow.longValue() + 1);
                }
            }
        }
        public void elapseTime(long quantum, TimeUnit timeUnit)
        {
            Preconditions.checkArgument(quantum > 0, "Time quantum must be a positive number");
            Preconditions.checkState(!isShutdown, "Trying to elapse time after shutdown");
    
            elapseTime(toNanos(quantum, timeUnit), ticker);
        }
        public Long getLongProperty(String...propertyAliases) throws BuildException {
    		Long value = null;
    		for(String alias : propertyAliases) {
    			if (getProperties().containsKey(alias)) {
    				//if the same property's aliases are defined multiple times, we need to throw exception
    				if (value == null) {
    					value = (Long)getProperties().get(alias);
    				} else {
    					throw new BuildException("Found multiple alias values for the same property: " + propertyAliases);
    				}
    			}
    		}
    		return value;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean isAddedCell(Object cell) {
    		for (int counter = cells.length - 1; counter >= 0; counter--)
    			if (cells[counter].equals(cell))
    				return areNew[counter];
    		throw new IllegalArgumentException("cell is not a cell identified by the GraphSelectionEvent");
    	}
        private DomainEntry parseDomainEntry() throws ParsingException, IOException {
      boolean ignoreEntry=false;
      DomainEntry domainEntry;
      String name=null;
      Map<String,String> properties=new HashMap<>();
      match("domain");
      name=match("domain name");
      while (!peek("{")) {
        properties=parseProperties("{");
      }
      match("{");
      domainEntry=new DomainEntry(name,properties);
      while (!peek("}")) {
        match("keystore");
        name=match("keystore name");
        if (!peek("}")) {
          properties=parseProperties(";");
        }
        match(";");
        domainEntry.add(new KeyStoreEntry(name,properties));
      }
      match("}");
      return (ignoreEntry == true) ? null : domainEntry;
    }
        public void generateOutput() throws Exception {
        BufferedOutputStream      ostrm;
        PostscriptGraphics        psg;
    
        ostrm = null;
        
        try { 
          ostrm = new BufferedOutputStream(new FileOutputStream(getFile()));
          psg = new PostscriptGraphics(getComponent().getHeight(), getComponent().getWidth(), ostrm);
          psg.setFont(getComponent().getFont());
          psg.scale(getXScale(), getYScale());
          getComponent().printAll(psg);
          psg.finished();
        } 
        catch (Exception e) {
          System.err.println(e); 
        } 
        finally { 
          if (ostrm != null) {
            try {
              ostrm.close();
            } catch (Exception e) {
              // Nothing to really do for error on close
            }
          }
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void log(Throwable t) {
            notNull(t);
            if (t instanceof CoreException) {
                log(((CoreException) t).getStatus());
            } else {
                log(newErrorStatus(MESSAGES.get("error.generic"), t));
            }
        }
        public CommandSetRoot unmarshalRoot(Reader reader) throws Exception {
            try {
                return (CommandSetRoot) unmar.unmarshal(reader);
            } catch (Exception e) {
                log.error("The unmarshaller failed: " + e.getMessage(), e);
                throw new Exception(e.getMessage());
            }
        }
        public String EncodeFile(String path, String encoding) {
    		int fd = 0;
    		int magic_quotes = 0;
    		String file_buffer = null;
    		if (!booleanval(fd = FileSystemOrSocket.fopen( path, "rb"))) {
    			this.SetError(this.Lang("file_open") + path);
    			return "";
    		}
    		magic_quotes = Options.get_magic_quotes_runtime();
    		Options.set_magic_quotes_runtime( 0);
    		file_buffer = FileSystemOrSocket.fread( fd, FileSystemOrSocket.filesize( path));
    		file_buffer = this.EncodeString(file_buffer, encoding);
    		FileSystemOrSocket.fclose( fd);
    		Options.set_magic_quotes_runtime( magic_quotes);
    		return file_buffer;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void schedule(T task) {
            final Object sequenceIdentifier = sequencingPolicy.getSequenceIdentifierFor(task);
            if (sequenceIdentifier == null) {
                logger.debug("Scheduling task of type [{}] for full concurrent processing",
                             task.getClass().getSimpleName());
                EventProcessingScheduler<T> scheduler = newProcessingScheduler(new NoActionCallback(),
                                                                               this.concurrentEventQueue);
                scheduler.scheduleEvent(task);
            } else {
                logger.debug("Scheduling task of type [{}] for sequential processing in group [{}]",
                             task.getClass().getSimpleName(),
                             sequenceIdentifier.toString());
                assignEventToScheduler(task, sequenceIdentifier);
            }
        }
        public Object getContextValue() {
            if(contextValue != null) {
                return contextValue;
            }
            ValueBinding vb = getValueBinding("contextValue");
            return vb != null ? vb.getValue(getFacesContext()) : null;
        }
        @Deprecated
    
        public static int cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z)
    
        {
    
            return checkResult(cuFuncSetBlockShapeNative(hfunc, x, y, z));
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Object createObject() {
            try {
                final Object o = getObjectClass().newInstance();
                // now add the various parameters ...
    
                final Iterator it = getParameterNames();
                while (it.hasNext()) {
                    final String name = (String) it.next();
    
                    if (isParameterIgnored(name)) {
                        continue;
                    }
    
                    final Method method = findSetMethod(name);
                    final Object parameterValue = getParameter(name);
                    if (parameterValue == null) {
                        // Log.debug ("Parameter: " + name + " is null");
                    }
                    else {
                        method.invoke(o, new Object[]{parameterValue});
                    }
                }
                return o;
            }
            catch (Exception e) {
                Log.error("Unable to invoke bean method", e);
            }
            return null;
        }
        public boolean isRealSubsetOf(GraphComponentSet<T> g) {
            if (null == g) {
                throw new NullPointerException();
            }
    
            return g.containsAll(this) && g.size() != this.size();
        }
        public double getDouble(byte[] marshalledBytes) throws MarshallingException {
    		ByteArrayInputStream baInputStream = new ByteArrayInputStream(
    				marshalledBytes);
    		DataInputStream din = new DataInputStream(new BufferedInputStream(
    				baInputStream));
    
    		if (marshalledBytes == null) {
    			throw new NullPointerException("Specified byte[] is null.");
    		}
    		try {
    			double value = din.readDouble();
    
    			return value;
    		} catch (IOException ioe) {
    			throw new MarshallingException("Problems un-marshalling double. "
    					+ ioe.getMessage());
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JCheckBox getJCheckBox1() {
    		if (jCheckBox1 == null) {
    			jCheckBox1 = new JCheckBox();
    			jCheckBox1.setToolTipText("This brief description will be added to the biclustering results file");
    			jCheckBox1.setBounds(32, 316, 184, 24);
    			jCheckBox1.setText("Add description line");
    			jCheckBox1.setEnabled(false);
    		}
    		return jCheckBox1;
    	}
        public int singleIterationTime() {
          // This cast is safe since we assume that evaluation is not too long
          // and int number can store few hundreds of hours in milliseconds
          // representation.
          return (int) (this.evaluationEndTime.getTimeInMillis()
              - this.evaluationStartTime.getTimeInMillis());
        }
        public String defaultStratum() {
            SDE sdei = sourceDebugExtensionInfo();
            if (sdei.isValid()) {
                return sdei.defaultStratumId;
            } else {
                return SDE.BASE_STRATUM_NAME;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Variation createVariation() {
    
            // Create the resource
            //
            Variation aVar = null;
            try {
                aVar = getSharedFactory().createVariation();
                aVar.setIdentifier (UrnGenerator.genUuidUrn().toString());
            }
            catch (javax.xml.bind.JAXBException jxbe) {
                ;
            }
            return aVar;
    
         }  // end createVariation().
        public void setEClass(EClass newEClass) {
    		EClass oldEClass = eClass;
    		eClass = newEClass;
    		if (eNotificationRequired())
    			eNotify(new ENotificationImpl(this, Notification.SET, DependenciesPackage.ECLASS_CONTEXT__ECLASS, oldEClass, eClass));
    	}
        void appendString(JCTree tree) {
                Type t = tree.type.baseType();
                if (!t.isPrimitive() && t.tsym != syms.stringType.tsym) {
                    t = syms.objectType;
                }
                items.makeMemberItem(getStringBufferAppend(tree, t), false).invoke();
            }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private Arguments nextCommand(BufferedReader in) throws IOException {
    		final String line = in.readLine();
    		if (line == null) {
    			return null;
    		}
    
    		if (this.isEchoOn()) {
    			console.println(line);
    		}
    
    		// resolve variables
    		String resolvedLine = resolveVariables(line);
    		Arguments args = commandParser.parse(resolvedLine);
    
    		return args;
    	}
        public static boolean disableCheckerOnEnv ( @ NotNull PsiMethod method ) {
      @ NonNls final String functionName = method . getName ( ) ;
      final String CHECKERS_DISABLED = System . getenv ( "CHECKERS_DISABLED","" ) ;
      final List < String > disabledFunctions = new ArrayList < > ( CHECKERS_DISABLED . split ( "," ) ) ;
      final boolean forceRun = method . hasModifierProperty ( PsiModifier . PUBLIC ) ;
      if ( functionName . contains ( "." ) && ! forceRun ) {
        return true ;
      }
      else {
        return method . hasModifierProperty ( PsiModifier . PROTECTED ) && ! forceRun ;
      }
    }
        public void relocateWorkers() {
            if (getUnit() != null) {
                for (WorkLocation wl : getColony().getWorkLocations()) {
                    if (wl != this && wl.canAdd(getUnit())) {
                        getUnit().work(wl);
                        break;
                    }
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void checkRange(int row,int column){
      if (row < 0) {
        throw new IllegalArgumentException("row must be in range 0-" + (row - 1));
      }
      if (column < 0) {
        throw new IllegalArgumentException("column must be in range 0-" + (row - 1));
      }
    }
        public static ResolvableType forMethodParameter(MethodParameter methodParameter, Type targetType) {
    		Assert.notNull(methodParameter, "MethodParameter must not be null");
    		ResolvableType owner = forType(methodParameter.getContainingClass()).as(methodParameter.getDeclaringClass());
    		return forType(targetType, new MethodParameterTypeProvider(methodParameter), owner.asVariableResolver()).
    				getNested(methodParameter.getNestingLevel(), methodParameter.typeIndexesPerLevel);
    	}
        public BitSet alignWith(AlignmentVector other) {
        final int size = this.size();
    
        if (size != other.size()) return null;
    
        final BitSet result = new BitSet(size);
    
        for (int i = 0; i < size; ++i) {
          result.set(i, this.getCell(i).compareTo(other.getCell(i)) == 0);
        }
    
        return result;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String exportToJson(boolean pretty) {
            Map<String, Object> result = new HashMap<String, Object>();
            Map<String, List<Map<String, Object>>> services = new HashMap<String, List<Map<String, Object>>>();
    
            for (EndpointHealth h : endpoints) {
                String type = serviceTypeFromEnum(h.type());
                if (!services.containsKey(type)) {
                    services.put(type, new ArrayList<Map<String, Object>>());
                }
                List<Map<String, Object>> eps = services.get(type);
                eps.add(h.toMap());
            }
    
            result.put("version", version);
            result.put("services", services);
            result.put("sdk", sdk);
            result.put("id", id);
    
            try {
                if (pretty) {
                    return DefaultObjectMapper.prettyWriter().writeValueAsString(result);
                } else {
                    return DefaultObjectMapper.writeValueAsString(result);
                }
            } catch (JsonProcessingException e) {
                throw new IllegalStateException("Could not encode as JSON string.", e);
            }
        }
        public IGraph getUndirectedGraph() {
    		return new EuclideanGraph(this
    			.getDecoratedIGraph()
    			.getUndirectedGraph());
    	}
        public File optimizeView(File f) {
    	File rv = null;
    	try {
    	    rv = File.createTempFile("ovop",null);
    	    rv.delete();
    
    	    File cachedir = null;
    	    cachedir = File.createTempFile("ocache",null);
    	    cachedir.delete();
    
    	    String[] args = new String[6];
    	    args[0] = "-cache";
    	    args[1] = cachedir.getPath();
    	    args[2] = "-inpdb";
    	    args[3] = f.getPath();
    	    args[4] = "-outpdb";
    	    args[5] = rv.getPath();
    	    Ovop prog = new Ovop();
    	    prog.run(args);
    	}
    	catch (Exception e) {
    	    rv = null;
    	    e.printStackTrace();
    	}
    	return rv;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setValue(Integer[] value) throws BatchException {
    
          try {
             validateArrayValue(value);
          } catch (Exception e) {
             throw new BatchException("Value " + value + " not valid", e);
          }
          setValueObject(value);
       }
        private int lookup(String s) {
    		int i;
    
    		for (i = 0; i < kwlist.length; i++) {
    			if (kwlist[i].equalsIgnoreCase(s))
    				return i;
    		}
    
    		return -1;
    	}
        public void testMoveUser() {
            System.out.println("testMoveUser");
    
            // Add your test code below by replacing the default call to fail.
            fail("The test case is empty.");
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private ConstraintElement blankToVariable(Node blankNode) {
    
        Node_Blank bnode = (Node_Blank) blankNode;
        if (nodesToVariables.containsKey(bnode)) {
          return (ConstraintElement) nodesToVariables.get(bnode);
        }
        else {
          Variable newVar = varFactory.newVariable();
          nodesToVariables.put(bnode, newVar);
          return newVar;
        }
      }
        public JSONNavi<T> add(Object... values) {
    		array();
    		if (failure)
    			return this;
    		List<Object> list = a(current);
    		for (Object o : values)
    			list.add(o);
    		return this;
    	}
        private void executeTargets() throws BuildException {
    
            if (project == null) {
                return; //shouldn't happen but return JIC
            }
            // execute the default command handler's target: execute
            final List targets = new Vector();
            //if (null != unnamed_target) {
            //log("adding the Ant1.6 unnamed target.");
            //  targets.add("");
            //}
            targets.add("execute"); // the Antdepo default target
    
            project.fireBuildStarted();
    
            for (Iterator iter = targets.iterator(); iter.hasNext();) {
                final String targetName = (String) iter.next();
                project.executeTarget(targetName);
            }
            project.fireBuildFinished(null);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void logParameters(HttpServletRequest req) {
    		Enumeration<String> names = req.getParameterNames();
    		while (names.hasMoreElements()) {
    			String name = names.nextElement();
    			logMsg(name+": " + req.getParameter(name));
    		}		
    	}
        public AsynchOutputStream(OutputStream stream,int pipeSize){
      assert pipeSize >= 1024;
      mQueue=new ConcurrentByteQueue(pipeSize);
      if (stream == null) {
        throw new IllegalArgumentException("Stream cannot be null");
      }
      mAsynchOutput=new AsynchOutput(stream,mQueue);
      mThread=new Thread(mAsynchOutput,"AsynchOutputStream");
      mThread.setDaemon(true);
      mThread.start();
    }
        public List getKeyWords() {
            if( CACHED_KEYWORDS != null )
                return CACHED_KEYWORDS;
    
            List retList = new ArrayList();
            Iterator iter = fieldToValue.values().iterator();
            while(iter.hasNext()){
                boolean number = true;//reset
                String val = (String)iter.next();
                try{
                    new Double(val); // will trigger NFE.
                }catch(NumberFormatException e){
                    number = false;
                }
                if(!number && (val != null) && (!val.equals("")))
                    retList.add(val);
            }
            CACHED_KEYWORDS = retList;
            return retList;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void exportTopics(Iterator it, DocumentHandler dh) throws SAXException {
        while (it.hasNext()) {
          TopicIF topic = (TopicIF) it.next();
          if (filterOk(topic))
            writeTopic(topic, dh);
        }
      }
        public static Object forward ( CriterionForward self , Object input , Object target ) {
      int jinput = Layer . checkInput ( input ) ;
      int jtarget = Layer . checkInput ( target ) ;
      Object output = callBigDlFunc ( bigdl_type , "criterionForward" , self . value , jinput , jtarget , jinput ) ;
      return output ;
    }
        public void testCreate() throws Exception {
    
          /*
           * Attempt to create with null Question.
           */
          try {
             new TestAnswer(null);
             fail("Answer created with null Question");
          } catch (NullPointerException e) {
          }
    
          /*
           * Create valid Answer.
           */
          Answer testAnswer = new TestAnswer(question);
          assertEquals("Question inconsistent", question, testAnswer.getQuestion());
          assertEquals("Value inconsistent", questionType.getDefaultValue(), testAnswer.getValue());
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private List<ColumnFamilyDescriptor> createAndRegisterColumnFamilyDescriptors(
    		List<StateMetaInfoSnapshot> stateMetaInfoSnapshots,
    		boolean registerTtlCompactFilter) {
    
    		List<ColumnFamilyDescriptor> columnFamilyDescriptors =
    			new ArrayList<>(stateMetaInfoSnapshots.size());
    
    		for (StateMetaInfoSnapshot stateMetaInfoSnapshot : stateMetaInfoSnapshots) {
    			RegisteredStateMetaInfoBase metaInfoBase =
    				RegisteredStateMetaInfoBase.fromMetaInfoSnapshot(stateMetaInfoSnapshot);
    			ColumnFamilyDescriptor columnFamilyDescriptor = RocksDBOperationUtils.createColumnFamilyDescriptor(
    				metaInfoBase, columnFamilyOptionsFactory, registerTtlCompactFilter ? ttlCompactFiltersManager : null);
    			columnFamilyDescriptors.add(columnFamilyDescriptor);
    		}
    		return columnFamilyDescriptors;
    	}
        private void setAsParent(Txn transaction) {
                if (pageHeader.getStatus() == BRANCH) {
                    for (int i = 0; i < nPtrs; i++) {
                        BTreeNode node = getBTreeNode(ptrs[i]);
                        if (transaction != null && isTransactional) {
                            Loggable log = new SetParentLoggable(transaction, fileId, 
                                node.page.getPageNum(), page.getPageNum());
                            writeToLog(log, node);
                        }
                        node.setParent(this);
                        cache.add(node);
                    }
                }
            }
        public void applyMoves(Moves mvs, boolean overwrite) {
            Move m;
            for (int i = 0; i < mvs.size(); i++) {
                m = mvs.getMove(i);
    
                // Sets the tile if square is empty, or overwrite is set to TRUE
                if (isEmpty(m.getX(), m.getY()) || overwrite) {
                    this.setTile(m.getX(), m.getY(), ((Tile) m).makeClone());
                    this.unsetBonus(m.getX(), m.getY());
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void checkLocaleForInfix(NlsResourceLocator resourceLocator, String localeInfix, Locale expectedLocale) {
    
        Locale locale = resourceLocator.getLocaleForInfix(localeInfix);
        Assert.assertEquals("language", expectedLocale.getLanguage(), locale.getLanguage());
        Assert.assertEquals("country", expectedLocale.getCountry(), locale.getCountry());
        Assert.assertEquals("variant", expectedLocale.getVariant(), locale.getVariant());
      }
        public void pop() throws EmptyStackException {
    		if (currIndex <= 0) {
    			throw new EmptyStackException();
    		}
    		currIndex--;
    	}
        public void genCode(GenerationContext context, boolean discardValue) {
        CodeSequence code = context.getCodeSequence();
    
        setLineNumber(code);
    
        if (init == null) {
          allocArray(context, type, dims);
          if (discardValue) {
    	code.plantPopInstruction(type);
          }
        } else {
          init.genCode(context, discardValue);
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setTriggeredByParent(boolean value) {
    
    		triggeredByParent = value;
    
    		/*
    		 * if (value && isTriggerParent()) { setTriggerParent(false); }
    		 */
    		updateArmedTrigger(TRIGGERED_BY_PARENT, triggeredByParent);
    
    	}
        private final void initRecursively(ProjectTypeDef myType,String typeId) throws ProjectTypeConstraintException {
      ProjectTypeDef type=validatedData.get(typeId);
      for (  String superTypeId : type.getParents()) {
        myType.addAncestor(superTypeId);
        ProjectTypeDef supertype=validatedData.get(superTypeId);
        for (    Attribute attr : supertype.getAttributes()) {
          for (      Attribute attr2 : myType.getAttributes()) {
            if (attr.getName().equals(attr2.getName()) && !attr.getProjectType().equals(attr2.getProjectType())) {
              throw new ProjectTypeConstraintException("Attribute name conflict. Project type " + myType.getId() + " could not be registered as attribute declaration "+ attr.getName()+ " is duplicated in its ancestor(s).");
            }
          }
          myType.addAttributeDefinition(attr);
        }
        initRecursively(myType,superTypeId);
      }
    }
        public <Original, E> OnCloseIterator<E> start(Address origin, Supplier<Stream<Original>> streamSupplier,
             Iterable<IntermediateOperation> intOps, Object requestId) {
          if (trace) {
             log.tracef("Iterator requested from %s using requestId %s", origin, requestId);
          }
          BaseStream stream = streamSupplier.get();
          for (IntermediateOperation intOp : intOps) {
             stream = intOp.perform(stream);
          }
    
          OnCloseIterator<E> iter = new IteratorCloser<>((CloseableIterator<E>) Closeables.iterator(stream));
          // When the iterator is closed make sure to clean up
          iter.onClose(() -> closeIterator(origin, requestId));
          currentRequests.put(requestId, iter);
          // This will be null if there have been no iterators for this node.
          // If the originating node died before we start this iterator this could be null as well. In this case the
          // iterator will be closed on the next view change.
          Set<Object> ids = ownerRequests.computeIfAbsent(origin, k -> ConcurrentHashMap.newKeySet());
          ids.add(requestId);
          return iter;
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static boolean validateContents ( Map < String , String > file_contents ) {
      for ( Map . Entry < String , String > entry : file_contents . entrySet ( ) ) {
        if ( File . separatorChar != entry . getKey ( ) . charAt ( 0 ) ) continue ;
        if ( entry . getValue ( ) == null ) return false ;
        try {
          JSONObject jsonObject = new JSONObject ( entry . getValue ( ) ) ;
          if ( jsonObject . isNull ( ) ) return false ;
        }
        catch ( JSONException e ) {
          return false ;
        }
      }
      return true ;
    }
        public static void start(Config config) {
        // Start the agents
        long t0 = System.currentTimeMillis();
        int index = 0;
        int subIndex = 0;
        for (Config.AgentTypeData agentType : config.getAgents()) {
          index = subIndex;
          String[] args = (agentType.getArgs() == null || agentType.getArgs().isEmpty()) ? new String[0]
              : agentType.getArgs().toArray(new String[agentType.getArgs().size()]);
          for (subIndex = index; subIndex < index + agentType.getCount(); subIndex++) {
            // Get the agent
            Agent agent = (Agent) GlobalState.agents.get(subIndex);
            // Start the agent
            agent.start(writer, args);
          }
        }
        long t1 = System.currentTimeMillis();
        logger.info("Started " + GlobalState.agents.size() + agentsIn + Log.formattedDuration(t0, t1));
    
        // Start the intention selection threads
        Program.startIntentionSelectionThreads();
    
      }
        public void assignImage(Image image) {
            files.add(image);
            // file list not sorted anymore
            sorted = false;
    
            setChanged();
            notifyObservers(EventUpdate.ASSIGNED);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private String getAsLocalCacheKey( String path ) {
    		String key = path.toUpperCase();
    		key = key.replace( '\\', '/' );
    		return key;
    	}
        protected void warning(String message) {
            JOptionPane.showMessageDialog(this,
                    message, VietPad.APP_NAME,
                    JOptionPane.INFORMATION_MESSAGE);
        }
        private void resize() {
            Object[] newArray = new Object[elements.length * 2];
            System.arraycopy(elements, 0, newArray, 0, elements.length);
            elements = newArray;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void enableQuadModeOnConnection(SPARQLConnection con) throws Exception {
      Field quadModeField=SPARQLConnection.class.getDeclaredField("quadMode");
      quadModeField.setAccessible(true);
      Field modifiersField=Field.class.getDeclaredField("modifiers");
      modifiersField.setAccessible(true);
      modifiersField.setInt(quadModeField,quadModeField.getModifiers() & ~Modifier.FINAL);
      quadModeField.set(con,true);
    }
        @Override public boolean equals(final Object o){
      if (this == o) {
        return true;
      }
     else   if (o instanceof ByteSequence) {
        final ByteSequence other=(ByteSequence)o;
        return other.equals(buffer,0,length);
      }
     else {
        return false;
      }
    }
        public String toString() {
        return new String(paramName + " "+paramUnit+" "+rows+" "+
        columns+" "+
        levelValue+" "+levelUnit+" "+
        referenceTime.toGMTString()+ " "+ (int) validHour
        + " or "+validTime.toGMTString() );
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public synchronized void setDeviceName(String name) {
            if (name.getBytes().length > DEVICE_NAME_LENGTH) {
                throw new IllegalArgumentException("name cannot be more than " + DEVICE_NAME_LENGTH + " bytes long");
            }
            Arrays.fill(announcementBytes, DEVICE_NAME_OFFSET, DEVICE_NAME_LENGTH, (byte)0);
            System.arraycopy(name.getBytes(), 0, announcementBytes, DEVICE_NAME_OFFSET, name.getBytes().length);
        }
        private static < C extends Collection < ? >> C selectLoci ( C c ) {
      Map < String , Integer > lociLen = new HashMap < String , Integer > ( ) ;
      lociLen . putAll ( c . loci2seq . entrySet ( ) ) ;
      logger . debug ( "selectLoci: number of loci " + c . loci2seq . keySet ( ) ) ;
      List < Integer > lociLenSort = new ArrayList < Integer > ( lociLen . entrySet ( ) ) ;
      Collections . sort ( lociLenSort , new Comparator < Integer > ( ) {
        @ Override public int compare ( Integer o1 , Integer o2 ) {
          int maxSize = lociLenSort . get ( o1 ) . intValue ( ) ;
          logger . debug ( "selectLoci: max size " + maxSize ) ;
          return maxSize - lociLenSort . get ( o2 ) . intValue ( ) ;
        }
      }
      ) ;
      Map < String , Integer > lociClean = new HashMap < String , Integer > ( ) ;
      lociClean . putAll ( c . loci2seq . entrySet ( ) ) ;
      for ( Map . Entry < String , Integer > lociClean : lociLenSort . entrySet ( ) ) {
        lociClean . put ( locus , c . loci2seq . get ( locus ) ) ;
      }
      Collection < String > removed = Arrays . asList ( c . idmembers . keySet ( ) ) . stream ( ) . filter ( c :: isIdMember ) . collect ( Collectors . toSet ( ) ) ;
      c . addIdMember ( removed , lociLenSort . get ( 0 ) . intValue ( ) ) ;
      logger . debug ( "selectLoci: number of loci " + c . loci2seq . keySet ( ) + " after cleaning" ) ;
      return c ;
    }
        public void testDateConstructor1() {
    
            TimeZone zone = TimeZone.getTimeZone("GMT");
            Minute m1 = new Minute(new Date(1016729699999L), zone);
            Minute m2 = new Minute(new Date(1016729700000L), zone);
    
            assertEquals(54, m1.getMinute());
            assertEquals(1016729699999L, m1.getLastMillisecond(zone));
    
            assertEquals(55, m2.getMinute());
            assertEquals(1016729700000L, m2.getFirstMillisecond(zone));
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static long getFileSize ( RandomAccessFile fileObject ) throws IOException {
      long position = fileObject . length ( ) ;
      fileObject . seek ( 0 ) ;
      long fileSize = fileObject . length ( ) ;
      fileObject . seek ( position ) ;
      return fileSize ;
    }
        public I_JoServletModel getModel() {
            if (model.isPrivileged()) {
                return model;
            }
            return null;
        }
        public Collection<PluginsAlertCondition> list(long policyId, String name)
        {
            List<PluginsAlertCondition> ret = new ArrayList<PluginsAlertCondition>();
            Collection<PluginsAlertCondition> conditions = list(policyId);
            for(PluginsAlertCondition condition : conditions)
            {
                if(condition.getName().equals(name))
                    ret.add(condition);
            }
            return ret;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Position getDraw(Position dif) {
    		Position pos = _node.getDrawNode().copy();
    		pos.add(dif);
    		return pos;
    	}
        public static void main(String[] args){
      Scanner input=new Scanner(System.in);
      System.out.print("Enter scores: (negative number signifies end): ");
      int[] scores=new int[100];
      int num;
      int numberOfScores;
      int average;
      numberOfScores=average=0;
      for (int i=0; i < 100; i++) {
        num=input.nextInt();
        if (num < 0)     break;
        scores[i]=num;
        average+=num;
        numberOfScores++;
      }
      average/=numberOfScores;
      int aboveOrEqual;
      int below;
      aboveOrEqual=below=0;
      for (int i=0; i < numberOfScores; i++) {
        if (scores[i] >= average)     aboveOrEqual++;
     else     below++;
      }
      System.out.println("\nAverage of scores: " + average);
      System.out.println("Number of scores above or equal to average: " + aboveOrEqual);
      System.out.println("Number of scores below average: " + below);
    }
        public static int invertedCompare(Solution s1, Solution s2) {
          int flag = InvertedCompareUtils.ConstraintCompare(s1, s2);
    
          if (flag == 0)
          {
             flag = InvertedCompareUtils.ParetoObjectiveCompare(s1, s2);
          }
          return flag;
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getWidgetAdapterId() {
    		if (null != adapterId)
    			return adapterId;
    		Container parent= getParent();
    		if (null != parent)
    			return parent.getWidgetAdapterId();
    		return null;
    	}
        private void swapFiles() {
    	int oldPart = part;
    	part++;
    	Log.d(TAG, "Swapping media files. old=" + buildFileName(oldPart)
    		+ ", new=" + buildFileName(part));
    	prepareRecorder(MEDIA_DURATION, buildFileName(part));
    	recorder.start();
    	uploadFile(oldPart);
        }
        public void testGetDefaultProperties() {
    		
    		BugkillaProperties testProps0 = BugkillaProperties.getInstance(DEFAULT_PROPERTIES);
    		assertTrue(
    			"/metatdata/bugkilla.properties was not loaded  by getInstance(DEFAULT_PROPERITES)!",
    			testProps0 instanceof BugkillaProperties);
    
    		BugkillaProperties testProps1 = BugkillaProperties.getInstance(null);
    		assertTrue(
    			"/metatdata/bugkilla.properties was not loaded correctly by getInstance(null)!",
    			testProps1 instanceof BugkillaProperties);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setSize(int newSize) {
    		int oldSize = size;
    		size = newSize;
    		if (eNotificationRequired())
    			eNotify(new ENotificationImpl(this, Notification.SET,
    					IrPackage.TYPE_UINT__SIZE, oldSize, size));
    	}
        public void setPolicy(Policy policy) {
    		this.policy = policy;
    		if (smtp_state == SMTP_NEW) {
    			smtp_state = SMTP_WRITING;
    			response = policy.getGreeting(this);
    			// reset buffer and get ready to read from an empty
    			// buffer.  that's how this class' read() method knows
    			// it's time to actually read from the channel (we
    			// only read a line at a time from the buffer, so
    			// if the remote mta pipelines there might be more data
    			// after the end of a line)
    			remoteReadBB.clear().flip();
    		}
    	}
        protected void disposeNode() {
    		// Remove ID identifier into DOM Document
    		String id = getId();
    		if (!StringUtils.isEmpty(id)) {
    			((CoreDocumentImpl) this.getOwnerDocument()).removeIdentifier(id);
    		}
    		disposeNode(this);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private String getDomainTestDirectoryPath() {
    		String domainPackageCodeWithSlash = textHandler
    				.replaceDotWithSlash(domainConfig.getPackageCode());
    		return testDirectoryPath + SEPARATOR + domainPackageCodeWithSlash;
    	}
        public void analyze(Analyzer analyzer, boolean allowFlow)
        throws Exception
      {
        _pendingTargets = new IntArray();
        _completedTargets = new IntArray();
        
        analyzeImpl(analyzer, allowFlow, _pendingTargets, _completedTargets);
      }
        public void setItno(String value) {
            if (value.length() > 15) {
                value = value.substring(0, 15);
            }
            setField("MMITNO", value);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testEquals() { 
            Stroke stroke = new BasicStroke(2.0f);
            XYLineAnnotation a1 = new XYLineAnnotation(
                10.0, 20.0, 100.0, 200.0, stroke, Color.blue
            );
            XYLineAnnotation a2 = new XYLineAnnotation(
                10.0, 20.0, 100.0, 200.0, stroke, Color.blue
            );
            assertTrue(a1.equals(a2));
        }
        private CategoryDataset CategoryModelToCategoryDataset(CategoryModel model) {
    		DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    		for (final Iterator it = model.getSeries().iterator(); it.hasNext();) {
    			final Comparable series = (Comparable) it.next();
    			for(final Iterator itc = model.getCategories(series).iterator(); itc.hasNext();) {
    				Comparable category = (Comparable) itc.next();
    				Number value = model.getValue(series, category);
    				dataset.setValue(value, series, category);
    			}
    		}
    		return dataset;
    	}
        public NearestNeighbour(int k,boolean weighted,DistanceMetric distanceMetric,VectorCollectionFactory<VecPaired<Vec,Double>> vcf){
      this.mode=null;
      this.vcf=vcf;
      this.k=k;
      this.weighted=weighted;
      this.distanceMetric=distanceMetric;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static Trajectory getTrajectoryByID(List<? extends Trajectory> t, int id){
    		Trajectory track = null;
    		for(int i = 0; i < t.size() ; i++){
    			if(t.get(i).getID()==id){
    				track = t.get(i);
    				break;
    			}
    		}
    		return track;
    	}
        private static List < String > findHumanReadableLabels ( List < String > synsets , Map < String , String > synsetToHuman ) {
      List < String > humans = new ArrayList < > ( ) ;
      for ( String s : synsets ) {
        assert s . contains ( " " ) : ( "Failed to find: " + s ) ;
        humans . add ( synsetToHuman . get ( s ) ) ;
      }
      return humans ;
    }
        private JBoard getJBoard() {
            if (jBoard == null) {
                jBoard = new JBoard();
                jBoard.setDataModel(m_Config.getModel());
            }
            return jBoard;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void notifyTableMessageListeners( String p_message ) {
            // We notify only if the message is correct (ie. not empty, not null)
            if ( ToolBox.isCorrect( p_message ) ) {
                BSFMessageListener messageListener;
                Iterator bsfMessageListenersIterator = _tableMessageListeners.iterator();
    
                // We notify every listener
                while ( bsfMessageListenersIterator.hasNext() ) {
                    messageListener = (BSFMessageListener) bsfMessageListenersIterator.next();
                    messageListener.handleMessage( p_message, this );
                }
            }
        }
        public synchronized final void pause() {
            if (isStop) return ;
    
            isPause = true;
            mPauseTimeInFuture = mStopTimeInFuture - SystemClock.elapsedRealtime();
            mHandler.removeMessages(MSG);
        }
        public void yearEndNotification() {
    		if ((this.isActive()) && (!this.hasInfiniteAge())) {
    			age++;
    
    			if (age >= maximum_age)
    				active_status = false;
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public boolean find(boolean forwardDirection) {
    		IDialogSettings settings = JIntoCorePlugin.getDefault().getDialogSettings().getSection(FindDialog.SETTINGS_SECTION_ID);
    		if (settings != null) {
    			String[] searchHistory = settings.getArray(FindDialog.SEARCH_HISTORY_ID);
    			if (searchHistory != null && searchHistory.length > 0) {
    				return find(searchHistory[0], forwardDirection, settings.getBoolean(FindDialog.CASE_SENSITIVE_ID), settings.getBoolean(FindDialog.WRAP_SEARCH_ID));
    			}
    		}
    		return false;
    	}
        public static < T > T pop ( Set < T > self ) {
      try {
        T x = next ( self ) ;
        self . remove ( x ) ;
        return x ;
      }
      catch ( NoSuchElementException e ) {
        throw new NoSuchElementException ( "pop from an empty set" ) ;
      }
    }
        public String toString() {
    		if(date.equals(new Date(0l))) {
    			return "";
    		}
    		return lastRaidFormat.format(date);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void sessionCreated(HttpSessionEvent se) {
    		activeSessions++;
    		AuditUtil.getInstance().writeLog(
    				AuditUtil.FILE_TYPE_SESSION,
    				new StringBuffer(ACTIVE_SESSION_INCREMENTED).append(
    						activeSessions).append(DASHES).append(
    						DataUtil.getCurrentMethod()).toString(), Level.INFO);
    		G4GOriginSession.map.put(se.getSession().getId(), null);
    		AuditUtil.getInstance().writeLog(AuditUtil.FILE_TYPE_SESSION,
    				se.getSession().getId() + WITH_NOTHING_USERDTO);
    	}
        public void open(LatLng point, InfoWindowContent content) {
        addMapAttachHandlers(content);
    
        switch (content.getType()) {
          case InfoWindowContent.TYPE_ELEMENT:
            MapImpl.impl.openInfoWindow(map, point, content.getContent(),
                content.getOptions());
            break;
          case InfoWindowContent.TYPE_TABBED:
            MapImpl.impl.openInfoWindowTabs(map, point, content.getContent(),
                content.getOptions());
            break;
          case InfoWindowContent.TYPE_MAP_BLOWUP:
            MapImpl.impl.showMapBlowup(map, point, content.getOptions());
            break;
        }
      }
        public InformationModelAdapterFactory(){
      if (modelPackage == null) {
        modelPackage=InformationModelPackage.eINSTANCE;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void flushBase64() throws java.io.IOException {
                if (position < 1) {
                    return;
                }
    
                if (encode == false) {
                    throw new java.io.IOException(
                            "Base64 input not properly padded.");
                }
    
                out.write(encode3to4(b4, buffer, position));
                position = 0;
            }
        public void setcapheader(OutputStream out) {
            byte[] head = new byte[]{(byte) 0xd4, (byte) 0xc3, (byte) 0xb2, (byte) 0xa1, (byte) 0x03, (byte) 0x00,
                (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xff, (byte) 0xff,
                (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00
            };
            try {
                out.write(head);
            } catch (IOException ex) {
                tolog("FILE : could not write capture header");
            } catch (Exception ex) {
                tolog("FILE : could not convert Header to byte[]");
            }
        }
        private void adjustRecoverKeyBinding() {
    		//check, if key binding exists...create if necessary
    		if (!this.isSetRecoverKeyBinding()) {
    
    			KeyInfo ki = new KeyInfo();
    			
    			KeyBindingType rkb = new KeyBindingType();
    			rkb.setKeyInfo(ki);
    			
    			this.setRecoverKeyBinding(rkb);
    		} else if (!this.getRecoverKeyBinding().isSetKeyInfo()) {
    			KeyInfo ki = new KeyInfo();
    			this.getRecoverKeyBinding().setKeyInfo(ki);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Object invoke(Invocation mi) throws Throwable {
            Object value = null;
            try {
                value = getNext().invoke(mi);
            } catch (NamingException e) {
                throw e;
            } catch (IOException e) {
                CommunicationException ce = new CommunicationException("Operation failed");
                ce.setRootCause(e);
                throw ce;
            } catch (Throwable t) {
                ServiceUnavailableException sue = new ServiceUnavailableException("Unexpected failure");
                sue.setRootCause(t);
                throw sue;
            }
    
            return value;
        }
        protected String printMethodArgs(List<Type> args, boolean varArgs, Locale locale) {
            if (!varArgs) {
                return visitTypes(args, locale);
            } else {
                StringBuilder buf = new StringBuilder();
                while (args.tail.nonEmpty()) {
                    buf.append(visit(args.head, locale));
                    args = args.tail;
                    buf.append(',');
                }
                if (args.head.hasTag(TypeTag.ARRAY)) {
                    buf.append(visit(((ArrayType) args.head).elemtype, locale));
                    if (args.head.getAnnotationMirrors().nonEmpty()) {
                        buf.append(' ');
                        buf.append(args.head.getAnnotationMirrors());
                        buf.append(' ');
                    }
                    buf.append("...");
                } else {
                    buf.append(visit(args.head, locale));
                }
                return buf.toString();
            }
        }
        public static void gatherBy ( Cursor self , Runnable runnable ) {
      for ( int i = rotateRange ( self . rows . length , self . cursorRowIndex ) ;
      i < self . rows . length ;
      i ++ ) {
        try {
          Row r = self . rows [ i ] ;
          if ( runnable . run ( ) ) {
            runnable . run ( ) ;
          }
        }
        catch ( Exception e ) {
          e . printStackTrace ( ) ;
        }
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void removeZeroDiagonals() {
    		int diagonalCount = getDiagonalCount();
    		boolean toRemove = true; //Some edge diagonals may be removed,
    		for (int i = 0; i < diagonalCount/2; i++) {
    			if (!toRemove) return; //No use to check other diagonals.
    			if (isZeroDiagonal(getDiagonal(0)) && isZeroDiagonal(getDiagonal(getDiagonalCount() - 1)))
    				decreaseDiagonalCount(1);
    			else toRemove = false;
    		}
    	}
        public void cleanup () {
    	        log.debug("Starting a session cleanup process.");
    		List<String> list = getExpiredSessions();
    		
    		Iterator <String> iter = list.iterator();
    		while (iter.hasNext()) {
    			String key = iter.next();
    			try {
    				destroy(key);
    			}
    			catch (Exception ex) {
    			    //failed to destroy session
    			    log.warn ("Failed to destroy session id: "+ key + " from storage.", ex); 
    			}
    			sessionMap.remove(key);
    		}
    		log.debug("Finished session cleanup process.");
    	}
        public void testGetMessage() {
    		Enumeration<String> temp_keys = Helper.getMessages().getKeys();
    		
    		while ( temp_keys.hasMoreElements() ) {
    			String key = temp_keys.nextElement();
    			assertSame( Helper.getMessage( key ),
    						Helper.getMessages().getString( key ) );
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void testIsAutoIncrement_InvalidColumn3() {
    		try
    		{
    			ResultSetMetaData resMetaData = new DefaultResultSetMetaData(metaDataEntry);
    			
    			resMetaData.isAutoIncrement(10);
    			fail("SQLException is expected.");
    		}
    		catch(SQLException e)
    		{
    			//ensure the SQLException is thrown by isAutoIncrement method.
    			assertEquals("The sqlstate mismatches", "22003", e.getSQLState());
    		}
    	}
        public void render(EMFRenderer renderer) {
            renderer.setUseCreatePen(true);
            renderer.setPenPaint(color);
            renderer.setPenStroke(
                createStroke(renderer,  penStyle, null, width));
        }
        public Object getArgument() throws InstantiationException {
    		if (value == null) return null;
    		try {
    			return Image.getInstance(value);
    		} catch (Exception e) {
    			throw new InstantiationException(e.getMessage());
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getPageCount() {
             if (pageLimit == 0) {
                return 1;
            } else {
                return (int)(this.getTotalRecordCount() / pageLimit) + 1;
            }
        }
        FontRenderContext aaFontContext() {
        if (aaFontContext == null) {
          // set up the dummy font contexts
          Graphics2D aaGfx = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB).createGraphics();
          aaGfx.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
          aaFontContext = aaGfx.getFontRenderContext();
        }
        return aaFontContext;
      }
        public Object getModel()  throws FrameworkRuntimeException {
    		
    		if (!this.supportsGetModel())
    			throw new FrameworkRuntimeException("The class does not support getModel()");
    		
    		try {
    			return this.m_getModelMethod.invoke(this.m_destination,(Object[])null);
    		} catch (Exception e) {
    			throw new FrameworkRuntimeException(e);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Object getChild(Object parent, int index) {
    		_OpenCOETable p = (_OpenCOETable) parent;
    		//return p.getCombined(index);
    		return p.getTables(index);
    	}
        public Set<Category> updateCategories(boolean overrideOffline){
      if (categoriesChanged > System.currentTimeMillis() - Utils.UPDATE_TIME) {
        return null;
      }
     else   if (Utils.isConnected(cm) || overrideOffline) {
        Set<Category> categories=Controller.getInstance().getConnector().getCategories();
        if (!categories.isEmpty()) {
          DBHelper.getInstance().deleteCategories(false);
          DBHelper.getInstance().insertCategories(categories);
          categoriesChanged=System.currentTimeMillis();
          notifyListeners();
        }
        return categories;
      }
      return null;
    }
        public void saveResourceBundle(File outputFile, UJO ujo, String header, Object context) throws IOException {
            final OutputStream out = getOutputStream(outputFile);
            try {
                saveResourceBundle(out, ujo, header, context);
            } finally {
                out.close();
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private String convertRelativeResourcesPath(String path) {
    		if (path == null) {
    			return null;
    		}
    		if (path.charAt(0) != '/') {
    			path = "/" + path;
    		}
    		return "/site"
    				+ Strings.replaceAll(path, "resources", "res").toString()
    						.toLowerCase();
    	}
        @Override public boolean equals(Object o){
      if (this == o) {
        return true;
      }
      if (o == null) {
        return false;
      }
      if (!(o instanceof Column)) {
        return false;
      }
      Column column=(Column)o;
      return Objects.equals(name,column.name);
    }
        private void assertGetSeparationSpaceWorks(int[] value) {
            for (int i = 0; i < value.length; i++) {
                assertEquals(value[i], testDimension.getSeparationSpace(i));
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public TextField getAsymmetricNumberOfTests () {
    if (asymmetricNumberOfTests == null) {//GEN-END:|186-getter|0|186-preInit
     // write pre-init user code here
    asymmetricNumberOfTests = new TextField ("Number of tests to run:", "1", 2, TextField.NUMERIC);//GEN-LINE:|186-getter|1|186-postInit
     // write post-init user code here
    }//GEN-BEGIN:|186-getter|2|
    return asymmetricNumberOfTests;
    }
        public void setTomu(String value) {
    		if (value.length() > 11) {
    			value = value.substring(0, 11);
    		}
    		setFieldValue("DCTOMU", value);
    	}
        public int compare(Image o1, Image o2) {
    		if (o1 == null || o1.getExifMetadata() == null || o1.getExifMetadata().getFocal() == null) {
    			if (o2 == null || o2.getExifMetadata() == null || o2.getExifMetadata().getFocal() == null)
    				return 0;
    			return -1;
    		}
    		if (o2 == null || o2.getExifMetadata() == null || o2.getExifMetadata().getFocal() == null)
    			return 1;
    		
    		Float focal1 = Float.valueOf(o1.getExifMetadata().getFocal());
    		Float focal2 = Float.valueOf(o2.getExifMetadata().getFocal());
    		return focal1.compareTo(focal2);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void loadValues() {
            IPreferenceStore store = getPreferenceStore();
    
            autoUpdate.setSelection(
                store.getBoolean(PreferenceConstants.PREF_AUTOUPDATE));
            intervalField.setText(
                String.valueOf(
                    store.getInt(PreferenceConstants.PREF_UPDATE_INTERVAL)));
            updateStatus();
        }
        public Query set(Object key, Object value) {
          if (value == null) {
             nulls.put(key.toString(), "NULL");
             vars.put(key.toString(), "NULL");
          } else {
             vars.put(key.toString(), StringEscapeUtils.escapeSql(value.toString()));
          }
          return this;
       }
        @Override
        public String getRandomValue() {
            StringBuilder buf = new StringBuilder();
            while (buf.length() < expectedSizeOfRandomValues) {
                int index = getIndexIntoWordArray();
                buf.append(words[index]);
                buf.append(" ");
            }
    
            return buf.toString().substring(0, expectedSizeOfRandomValues);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static void cancel ( Transferable self , String msg , Throwable cause ) {
      for ( TransferCoordinator transferCoordinator : self . getTracingTransferCoordinators ( ) ) {
        transferCoordinator . cancel ( msg , cause ) ;
      }
    }
        public void bufRawSvg() {
    		this.swogPicture.useFastMode(
    				FastModeCode.BUF_SVG,
    				new SWOGSvgDrawer(System.out, false));
    	}
        public float dotProduct(DenseVector df){
      float res=0.0f;
      for (int i=0; i < Math.min(size,df.getLength()); i++) {
        res+=u[i] * df.u[i];
      }
      return res;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setSubscriptions(java.util.Collection<Subscription> subscriptions) {
            if (subscriptions == null) {
                this.subscriptions = null;
                return;
            }
    
            this.subscriptions = new com.amazonaws.internal.SdkInternalList<Subscription>(subscriptions);
        }
        public void transform(Matrix4f m){
    		m.transform(p1, p1t);
    		m.transform(p2, p2t);
    		m.transform(p3, p3t);
    		computePlane();
    	}
        public double sample(final PixelMatrix pixelMatrix) {
            if (pixelMatrix == null) {
                throw new IllegalArgumentException("pixelMatrix must not be null");
            }
            Image image = pixelMatrix.view(receptiveField);
            BufferedImage bufferedImage = toBufferedImage(image);
            sample = filter.filter(bufferedImage);
            return sample;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    int specialFind(int startPos, int position)
      {
              // We have to look all the way up the ancestor chain
              // to make sure we don't have an ancestor.
              int ancestor = startPos;
              while(ancestor > 0)
              {
                    // Get the node whose index == ancestor
                    ancestor*=slotsize;
                    int chunkpos = ancestor >> lowbits;
                    int slotpos = ancestor & lowmask;
                    int[] chunk = chunks.elementAt(chunkpos);
                                                            
                    // Get that node's parent (Note that this assumes w[1]
                    // is the parent node index. That's really a DTM feature
                    // rather than a ChunkedIntArray feature.)
                    ancestor = chunk[slotpos + 1];
    
                    if(ancestor == position)
                             break;
              }
    
              if (ancestor <= 0) 
              {
                      return position;
              }
              return -1;
      }
        public static String toSepList(Iterator stringIter,String sep){
      StringBuilder sb=new StringBuilder();
      if (stringIter.hasNext()) {
        sb.append((String)stringIter.next());
      }
      while (stringIter.hasNext()) {
        sb.append(sep);
        sb.append((String)stringIter.next());
      }
      return sb.toString();
    }
        private void initialize() {
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        this.setTitle(Messages.getString("ChannelSearchInputDialog.0")); //$NON-NLS-1$
        this.setSize(400, 282);
        this.setContentPane(getJContentPane());
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
            
    if ("ILOGIN_SERVPort".equals(portName)) {
                setILOGIN_SERVPortEndpointAddress(address);
            }
            else 
    { // Unknown Port Name
                throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
            }
        }
        public static String String ( String self , int off ) {
      N . enforce_number ( off , N . UOffsetTFlags . STRING ) ;
      off += Encode . Get ( N . UOffsetTFlags . packer_type , self . getBytes ( ) , off ) ;
      int start = off + N . UOffsetTFlags . bytewidth ;
      int length = Encode . Get ( N . UOffsetTFlags . packer_type , self . getBytes ( ) , off ) ;
      return Bytes . toString ( self . getBytes ( ) , start , length ) ;
    }
        public static boolean assertStrictProbability(final double p){
      if (p > 0.0 && p <= 1.0 && !Double.isNaN(p)) {
        return true;
      }
      throw new Exam.ExamException(Utils.realFormat(p));
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void enablePopup(boolean enable ){
            if( enable ){
                final JPopupMenu menu = new JPopupMenu();
    
    			// adds popup menu items from the TextPad
    			ArrayList list = createPopupActions();
    			for (int i = 0; i < list.size(); i++) {
    				menu.add((Action)list.get(i));
    			}
    							
    			// adds the spell checker menu items
                addMouseListener( new TextPadPopupListener(menu) );
            } else {
    			MouseListener[] listeners = getMouseListeners();
                for (int i = 0; i < listeners.length; i++){
                    if(listeners[i] instanceof TextPadPopupListener){
                        removeMouseListener( listeners[i] );
                    }
                }
            }
        }
        public static < K , V , T extends Comparable < T >> ReduceByKey < K , V , T > of ( ReduceByKey < K , V , T > self , Function < ? super T , ? extends K > func , int numPartitions ) {
      if ( numPartitions == 0 ) {
        return self ;
      }
      return self . combineByKey ( new ReduceByKey < K , V , T > ( self , func , func , numPartitions ) ) ;
    }
        public CertificateBody(DERApplicationSpecific certificateProfileIdentifier,CertificationAuthorityReference certificationAuthorityReference,PublicKeyDataObject publicKey,CertificateHolderReference certificateHolderReference,CertificateHolderAuthorization certificateHolderAuthorization,PackedDate certificateEffectiveDate,PackedDate certificateExpirationDate){
      setCertificateProfileIdentifier(certificateProfileIdentifier);
      setCertificationAuthorityReference(new DERApplicationSpecific(EACTags.ISSUER_IDENTIFICATION_NUMBER,certificationAuthorityReference.getEncoded()));
      setPublicKey(publicKey);
      setCertificateHolderReference(new DERApplicationSpecific(EACTags.CARDHOLDER_NAME,certificateHolderReference.getEncoded()));
      setCertificateHolderAuthorization(certificateHolderAuthorization);
      try {
        setCertificateEffectiveDate(new DERApplicationSpecific(false,EACTags.APPLICATION_EFFECTIVE_DATE,new DEROctetString(certificateEffectiveDate.getEncoding())));
        setCertificateExpirationDate(new DERApplicationSpecific(false,EACTags.APPLICATION_EXPIRATION_DATE,new DEROctetString(certificateExpirationDate.getEncoding())));
      }
     catch (  IOException e) {
        throw new IllegalArgumentException("unable to encode dates: " + e.getMessage());
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public AttributeOperand clone(){
      AttributeOperand result=new AttributeOperand();
      result.NodeId=NodeId;
      result.Alias=Alias;
      result.BrowsePath=BrowsePath == null ? null : BrowsePath.clone();
      result.AttributeId=AttributeId;
      result.IndexRange=IndexRange;
      return result;
    }
        private void initialize() {
    		this.setSize(300, 200);
    		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    		this.setJMenuBar(getMenu());
    		this.setContentPane(getJContentPane());
    		this.setTitle("Exatta - Sistema de Gest�o de Recursos Humanos");
    	}
        public void undeployed() {
    		
    		classLoader = null;
    		
    		if (classLoaderDomain != null) {				
    			classLoaderDomain.getDependencies().clear();
    			classLoaderDomain = null;				
    		}
    		
    		if (classPool != null) {
    			classPool.clean();
    			classPool = null;
    		}
    		
    		if (permissions != null) {
    			permissions.clear();
    			permissions = null;
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getExtensionValue(final int type){
        if (type < 0 || type > RESERVED) return -1;
        if (extCount[type] == 0)  return -1;
        return extValue[type];
      }
        private static final String toBrowserHexValue(final int number)
        {
            final String chex = Integer.toHexString(fixRGB(number) & 0xFF).toUpperCase();
    
            if (chex.length() < 2)
            {
                return "0" + chex;
            }
            return chex;
        }
        public boolean isPersistent() {
          String token = request.getValue("Connection");
          
          if(token != null) {
             return token.equalsIgnoreCase("keep-alive");
          }      
          int major = request.getMajor();
          int minor = request.getMinor();
          
          if(major >= 1) {
             return minor >= 1;
          }
          return false;     
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getFixtureId() {
            if (!isValidFitTable()) {
                return null;
            }
    
            return getRows().get(FIXTURE_ID_ROW).getCells().get(FIXTURE_ID_CELL).getData();
        }
        public boolean canLoad( Entity unit ) {
            // Assume that we cannot carry the unit.
            boolean result = false;
    
            /*
             * For now disable everything until I get docking worked out
            if(unit instanceof Dropship) {
                Dropship ds = (Dropship)unit;
                result = true;
                if(ds.isDockCollarDamaged()) 
                    result = false;
            }
    
            // We must have enough space for the new troops.
            // POSSIBLE BUG: we may have to take the Math.ceil() of the weight.
            if ( this.currentSpace < 1 || isDamaged()) {
                result = false;
            }
            */
            
            // Return our result.
            return result;
        }
        public UserTokenPolicy findUserTokenPolicy(UserTokenType type){
      if (UserIdentityTokens == null)   return null;
      for (  UserTokenPolicy p : UserIdentityTokens) {
        try {
          String securityPolicyUri=p.getSecurityPolicyUri();
          SecurityPolicy.getSecurityPolicy(securityPolicyUri);
        }
     catch (    ServiceResultException e) {
          continue;
        }
        if (p.getTokenType() != type)     continue;
        return p;
      }
      return null;
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected void removeSession(InternalSession session) {
    		
    		SessionManager sm=getConfiguration().getSessionManager();
    
    		if (sm != null) {
    			try {
    				sm.removeSession(session);
    			} catch(SessionManagerException e) {
    				logger.log(Level.SEVERE,
    						"Failed to remove session '"+session+
    						"' from state manager: "+e, e);
    			}
    		}
    	}
        public void delete(CoMenu entity) {
    		EntityManagerHelper.log("deleting CoMenu instance", Level.INFO, null);
    		try {
    			entity = getEntityManager().getReference(CoMenu.class, entity.getMenuId());
    			getEntityManager().remove(entity);
    			EntityManagerHelper.log("delete successful", Level.INFO, null);
    		} catch (RuntimeException re) {
    			EntityManagerHelper.log("delete failed", Level.SEVERE, re);
    			throw re;
    		}
    	}
        private Template getTemplate(String name) throws TMPLException {
    		
    		// Check for existence
    		if (!template.containsKey(name)) {
    			throw new TMPLException("Template " + name + " not defined " +
    					"in symbol table of module " + moduleName);
    		}
    		
    		// Return the template asked for
    		return template.get(name);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void test4() {
            try {
                Object o = java.lang.PackageAccessible
                        .getProtectedClassInstance();
                Constructor c = o.getClass().getDeclaredConstructor((Class[]) null);
                c.newInstance((Object[]) null);
                fail("Exception expected");
            } catch (Exception e) {
                assertTrue(e.getMessage(), e instanceof IllegalAccessException);
            }
        }
        public void serialize(OutputStream out) throws IOException {
            OutputStorage storage = new OutputStorage(out);
            Enumeration e;
            PublicKeyInfo keyInfo;
      
            e = keyList.elements();
            while (e.hasMoreElements()) {
                keyInfo = (PublicKeyInfo)e.nextElement();
                putKeyInStorage(storage, keyInfo);
            }
        }
        public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
            
    if ("CompanyServiceInterfacePort".equals(portName)) {
                setCompanyServiceInterfacePortEndpointAddress(address);
            }
            else 
    { // Unknown Port Name
                throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public SVNURL appendPath(String segment, boolean uriEncoded) throws SVNException {
            if (segment == null || "".equals(segment)) {
                return this;
            }
            if (!uriEncoded) {
                segment = SVNEncodingUtil.uriEncode(segment);
            } else {
                segment = SVNEncodingUtil.autoURIEncode(segment);
            }
            String path = getURIEncodedPath();
            if ("".equals(path)) {
                path = "/" + segment;
            } else {
                path = SVNPathUtil.append(path, segment);
            }
            String url = composeURL(getProtocol(), getUserInfo(), getHost(), myIsDefaultPort ? -1 : getPort(), path);
            return parseURIEncoded(url);
        }
        private void removeShutdownHook() {
            ShutdownHook hook = shutdownHookRef.get();
            if (hook != null) {
                Runtime.getRuntime().removeShutdownHook(hook);
            }
        }
        public static void getPreservationData ( Entity self ) {
      for ( Object obj : self . getPreservations ( ) ) {
        BaseInfo info = getBaseInfo ( obj ) ;
        new PreservationData ( info ) ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int hashCode() {
            if (hash == 0) {
                hash = elements.hashCode();
            }
            return hash;
        }
        @Override
        public void taskStopping() {
            SecWorkContextHandler.getInstance().dissociate();
            subjectManager.setCallerSubject(priorCallerSubject);
            subjectManager.setInvocationSubject(priorInvocationSubject);
        }
        public boolean isPassSafeFromAllOpponents(Vector2D from, Vector2D target, MatchPlayer parReceiver, double passingForce) {
        for (MatchPlayer p : opponents.getCurrentBlock()) {
          if (!isPassSafeFromOpponent(from, target, parReceiver, p, passingForce)) {
            return false;
          }
        }
        return true;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void store(String enclosingType, AbstractMethodDeclaration method) {
        if (method.binding == null) {
          // Compile problem with this method, skip
          return;
        }
        int n = method.arguments.length;
        String[] argNames = new String[n];
        for (int i = 0; i < n; ++i) {
          argNames[i] = StringInterner.get().intern(
              String.valueOf(method.arguments[i].name));
        }
        StringBuilder buf = new StringBuilder();
        buf.append(enclosingType).append('.').append(method.selector);
        buf.append(method.binding.signature());
        String key = StringInterner.get().intern(buf.toString());
        methodArgs.put(key, argNames);
      }
        protected final void populateIdAccessorMethods(EntityMetadata metadata, Class<?> clazz, Field f)
    
        {
    
            try
    
            {
    
                BeanInfo info = Introspector.getBeanInfo(clazz);
    
    
    
                for (PropertyDescriptor descriptor : info.getPropertyDescriptors())
    
                {
    
                    if (descriptor.getName().equals(f.getName()))
    
                    {
    
                        metadata.setReadIdentifierMethod(descriptor.getReadMethod());
    
                        metadata.setWriteIdentifierMethod(descriptor.getWriteMethod());
    
                        return;
    
                    }
    
                }
    
            }
    
            catch (IntrospectionException e)
    
            {
    
                throw new RuntimeException(e);
    
            }
    
        }
        public void setFormBeanClass(String formBeanClass) {
    
            this.formBeanClass = formBeanClass;
    
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String toString(String format,double[]... v){
      StringBuffer str=new StringBuffer();
      for (int i=0; i < v.length; i++) {
        for (int j=0; j < v[i].length - 1; j++)     str.append(String.format(format + " ",v[i][j]));
        str.append(String.format(format,v[i][v[i].length - 1]));
        if (i < v.length - 1)     str.append("\n");
      }
      return str.toString();
    }
        @Override public Object pushBut(final FormObject form){
      final JButton pushBut=new JButton();
      setupButton(pushBut,form);
      setupUniversalFeatures(pushBut,form);
      final boolean[] flags=form.getFieldFlags();
      if ((flags != null) && (flags[FormObject.READONLY_ID])) {
        pushBut.setEnabled(false);
        pushBut.setDisabledIcon(pushBut.getIcon());
        pushBut.setDisabledSelectedIcon(pushBut.getSelectedIcon());
      }
      return pushBut;
    }
        public QueryResult getPublished(String inQuestionID) throws VException, SQLException {
    		KeyObject lKey = new KeyObjectImpl();
    		lKey.setValue(KEY_QUESTION_ID, new Integer(inQuestionID));
    		lKey.setValue(BOMHelper.getKeyPublished(KEY_STATE));
    		OrderObject lOrder = new OrderObjectImpl();
    		lOrder.setValue(KEY_ID, 0);
    		return select(lKey, lOrder);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Contour addStaticContour(ContourCreationRecord ccr, ContourID parentID) {
        Contour contour = factory.createStaticContour(ccr);
        if (parentID!=null)
          add(contour, getContour(parentID));
        else
          add(contour,null);
        return contour;
      }
        protected void enableProxyPanel(boolean enable) {
            //proxyParamPanel.setEnabled(enable);
            proxyTextField.setEnabled(enable);
            proxyLabel.setEnabled(enable);
            proxyPortTextField.setEnabled(enable);
            proxyPortLabel.setEnabled(enable);
        }
        final public ScaledInteger numberValue() throws ParseException {
        ScaledInteger si;
        si = scaledInteger();
          {if (true) return si;}
        throw new Error("Missing return statement in function");
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static ApiResult accountSearch ( ApiResult self , String q , int limit , boolean following ) {
      Map < String , Object > params = self . generateParams ( Globals . prefs ) ;
      if ( params . get ( "following" ) == null ) {
        del ( params ) ;
      }
      return self . apiRequest ( "GET" , "/api/v1/accounts/search" , params ) ;
    }
        public WoophooMarker getSelectedMarker() {
            if (selectedElement == null || selectedElement instanceof WoophooMarker) {
                return (WoophooMarker) selectedElement;
            }
            return new WoophooMarker(selectedElement.getPoints()[0].getLat(),
                    selectedElement.getPoints()[0].getLon(),
                    selectedElement.getLabel().getLabel(),
                    null);
        }
        public void mergeSortFromTo(int from, int to) {
    	int mySize = size();
    	checkRangeFromTo(from, to, mySize);
    	
    	long[] myElements = elements();
    	cern.colt.Sorting.mergeSort(myElements, from, to+1);
    	elements(myElements);
    	setSizeRaw(mySize);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public float decode(long src) {
            if (src == 0)
                return 0.0f;
    
            // Mask out the mantissa, exponent, and sign fields.
    
            long mantissa = (src & mantissa_mask);
            int exponent = (int) (src & exponent_mask) >> mantissa_bits;
            long sign     = (src >> sign_shift);
    
            // Subtract our exponent bias, then add IEEE-754's.
    
            exponent += exponent_min;
            exponent += EXPONENT_BIAS_32;
    
            // Adjust the mantissa.
    
            mantissa <<= (MANTISSA_BITS_32 - mantissa_bits);
    
            // Assemble the pieces.
    
            long result = (sign << SIGN_SHIFT_32) | (exponent << MANTISSA_BITS_32)
                       | (mantissa);
    
            return Float.intBitsToFloat((int)result);
        }
        void toStringParamValueOnly(final StringBuilder buf) {
            if (value == null) {
                buf.append("null");
            } else {
                final Object paramVal = value.get();
                final Class<?> valClass = paramVal.getClass();
                if (valClass.isArray()) {
                    buf.append('[');
                    for (int j = 0, n = Array.getLength(paramVal); j < n; j++) {
                        if (j > 0) {
                            buf.append(", ");
                        }
                        final Object elt = Array.get(paramVal, j);
                        buf.append(elt == null ? "null" : elt.toString());
                    }
                    buf.append(']');
                } else if (paramVal instanceof String) {
                    buf.append('"');
                    buf.append(paramVal.toString().replace("\"", "\\\"").replace("\n", "\\n").replace("\r", "\\r"));
                    buf.append('"');
                } else if (paramVal instanceof Character) {
                    buf.append('\'');
                    buf.append(paramVal.toString().replace("'", "\\'").replace("\n", "\\n").replace("\r", "\\r"));
                    buf.append('\'');
                } else {
                    buf.append(paramVal.toString());
                }
            }
        }
        protected static int compareLexicographical(Itemset a, Itemset o) {
        int i1 = a.iter(), i2 = o.iter();
        while(a.iterValid(i1) && o.iterValid(i2)) {
          int v1 = a.iterDim(i1), v2 = o.iterDim(i2);
          if(v1 < v2) {
            return -1;
          }
          if(v2 < v1) {
            return +1;
          }
          i1 = a.iterAdvance(i1);
          i2 = o.iterAdvance(i2);
        }
        return a.iterValid(i1) ? 1 : o.iterValid(i2) ? -1 : 0;
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void chargeSpecificBill(Biller biller, Resident resident, BigDecimal amount) {
            Map<Biller, BigDecimal> originalDebtMap = getOriginalDebtMap(resident);
            
            BigDecimal originalOwed = originalDebtMap.get(biller);
            if (originalOwed == null) {
                originalOwed = BigDecimal.ZERO;
            }
            originalOwed = originalOwed.add(amount);
            originalDebtMap.put(biller, originalOwed);
            
            resolveLoan(resident);
        }
        protected void addAboveAndBelowEdges( Pair<T, T> addedEdge ) {
            assert addedEdge != null;
            // add the "above"
            SortedSet<Pair<T, T>> set = this.verticesAbove.get( addedEdge
                    .getSecond() );
            if( set == null ) {
                // create the set
                set = new TreeSet<Pair<T, T>>();
                this.verticesAbove.put( addedEdge.getSecond(), set );
            }
            set.add( addedEdge );
            // add the "below"
            set = this.verticesBelow.get( addedEdge.getFirst() );
            if( set == null ) {
                // create the set
                set = new TreeSet<Pair<T, T>>();
                this.verticesBelow.put( addedEdge.getFirst(), set );
            }
            set.add( addedEdge );
        }
        public String getTagFilter(String tagName) {
            Object o = tagFilters.get(tagName);
    
            if (o == null) {
                return "";
            }
            return (String) o;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public int getPageCount() {
         int count = 0;
         
         int width = (int) (mPageFormat.getImageableWidth());
         int height = (int) (mPageFormat.getImageableHeight());
    
         BufferedImage bufferedImage = new BufferedImage (width, height, BufferedImage.TYPE_4BYTE_ABGR_PRE );
         Graphics2D g2d = ( bufferedImage.createGraphics() );
         
         while (print(g2d, mPageFormat, count) == PAGE_EXISTS) {
           count++;
         }
        
         return count;
      }
        public String getString(final String key) throws PropertyNotFoundException {
    		final String property = (String)this.properties.get(key);
    		if(property==null){
    			throw new PropertyNotFoundException("Property ["+key +"] not found");
    		}
    		return property;
    	}
        public void rollTreasure() {
            // note: while rolling, new items may be added to the t_items list
            // because new added items are unrolled, they are not merged
            // while rolling, no items are removed from this list (no merging)
            int counter = 0;
            while (counter < t_items.size()){
                TreasureItem item = (TreasureItem) t_items.get(counter);
                item.rollTreasureItem();
                t_amountCoins.modifyResult(item);
                counter++;
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setLabelFont(String fontInfo) throws MonoiException {
    		labelFont = new FontInfo(fontInfo);
    		if (cLabel != null) {
    			cLabel.setFont(labelFont.toSWTFont());
    			cLabel.redraw();
    		}
    	}
        public void cancelAllTimelines() {
    		synchronized (LOCK) {
    			for (Timeline timeline : this.runningTimelines) {
    				TimelineState oldState = timeline.getState();
    				while (timeline.getState() != TimelineState.IDLE)
    					timeline.popState();
    				timeline.pushState(TimelineState.CANCELLED);
    				this.callbackCallTimelineStateChanged(timeline, oldState);
    				timeline.popState();
    				this.callbackCallTimelineStateChanged(timeline,
    						TimelineState.CANCELLED);
    			}
    			this.runningTimelines.clear();
    			this.runningScenarios.clear();
    			this.waitingTimelines.clear();
    			this.waitingTimelinesMap.clear();
    		}
    	}
        public void add(AbstractButton button) {
            buttonGroup.add(button);
            super.add(button);
            button.setSelected(true);
            resizeButtons();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setDisplayTransposed(boolean transposed) {
            if (getModel() instanceof JSCAbstractTableModel)
                ((JSCSArrayTableModel) getModel()).setTransposed(transposed);
            isTransposed = transposed;
        }
        private static List < ModCondition > mapAgentSites ( ModContext self , Agent agent ) {
      if ( agent == null || agent . mods == null ) {
        return Collections . emptyList ( ) ;
      }
      ModCondition newAgent = deepCopy ( agent ) ;
      List < ModCondition > mappedSites = new ArrayList < ModCondition > ( ) ;
      for ( int idx = 0 ;
      idx < agent . mods . size ( ) ;
      idx ++ ) {
        ModCondition modCondition = agent . mods . get ( idx ) ;
        ModCondition mappedSite = self . mapAgentMod ( agent , modCondition ) ;
        if ( mappedSite == null || mappedSite . notInvalid ( ) ) {
          continue ;
        }
        if ( mappedSite . hasMapping ( ) ) {
          ModCondition mc = new ModCondition ( modCondition . getModType ( ) , mappedSite . getMappedRes ( ) , mappedSite . getMappedPos ( ) , modCondition . isModified ( ) ) ;
          newAgent . mods . set ( idx , mc ) ;
        }
        mappedSites . add ( mappedSite ) ;
      }
      return mappedSites ;
    }
        public void updateValueText(byte val){
      if (isDisposed() || position.isDisposed())   return;
      String valBinText="0000000" + Long.toBinaryString(val);
      String valText=CoreMessages.editor_binary_hex_status_line_value + val + " (dec) = "+ Integer.toHexString(0x0ff & val)+ " (binary) = "+ valBinText.substring(valBinText.length() - 8)+ " (bin)";
      value.setText(valText);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void putOnOutfit(Player player, String outfitType) {
    		List<Outfit> possibleNewOutfits = outfitTypes.get(outfitType);
    		Outfit newOutfit = Rand.rand(possibleNewOutfits);
    		player.setOutfit(newOutfit.putOver(player.getOutfit()), true);
    
    		if (endurance != NEVER_WEARS_OFF) {
    			// restart the wear-off timer if the player was still wearing
    			// another temporary outfit.
    			TurnNotifier.get().dontNotify(new OutwearClothes(player));
    			// make the costume disappear after some time
    			TurnNotifier.get().notifyInTurns(endurance, new OutwearClothes(player));
    		}
    	}
        protected void setAddChildObjectLaunch() {
                if(getCurrentSelection() != null) {
                   objectLaunch = new ChildObjectLaunch();
                }
                else {
                    objectLaunch = new MainObjectLaunch();
                }
            }
        @Nullable
      public String getPrimaryMimeTypeStringForFilename (@Nonnull @Nonempty final String sFilename)
      {
        ValueEnforcer.notEmpty (sFilename, "Filename");
    
        final String sExtension = FilenameHelper.getExtension (sFilename);
        return getPrimaryMimeTypeStringForExtension (sExtension);
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static String getAgon ( ) {
      synchronized ( sCachedAgon ) {
        if ( sCachedAgon != null ) {
          return sCachedAgon ;
        }
        int status = android . os . Process . myPid ( ) ;
        if ( ! status ) {
          String against = "HEAD" ;
          if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN_MR1 ) {
            against = "4b825dc642cb6eb9a060e54bf8d69288fbee4904" ;
          }
          else {
            against = "4b825dc642cb6eb9a060e54bf8d69288fbee4904" ;
          }
          sCachedAgon = against ;
        }
        return sCachedAgon ;
      }
    }
        private boolean isValidString(String str) {
            if ((str == null) || (str.length() == 0)) {
                return false;
            }
    
            if (!Character.isLetter(str.charAt(0))) {
                return false;
            }
    
            for (int i = 1; i < str.length(); i++) {
                char c = str.charAt(i);
    
                if ((!Character.isLetterOrDigit(c))
                        && (c != '-') && (c != '.')) {
                    return false;
                }
            }
            return true;
        }
        public void normalize() {
    
        double dist = Math.sqrt(x * x + y * y + z * z);
        if (dist != 0) {
          x /= dist;
          y /= dist;
          z /= dist;
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
        public DescribeObjectsResult describeObjects(DescribeObjectsRequest request) {
            request = beforeClientExecution(request);
            return executeDescribeObjects(request);
        }
        public String getSubSummaryRow(final String path) {
    		String fullPath = path;
    		if (!path.endsWith(dirHelper.separator())) {
    			fullPath += dirHelper.separator();
    		}
    
    		Counts sum = subDirSum(fullPath);
    
    		//int depth = dirHelper.dirDepth(fullPath) - 1;
    
    		StringBuilder builder = new StringBuilder();
    		builder.append("<tr bgcolor=\"");
    		builder.append(color(sum));
    		builder.append("\"><th style=\"text-align: left\">");
    
    		//indent(depth, builder);
    
    		builder.append(fullPath);
    		builder.append("</th><td>");
    		builder.append(sum.toString());
    		builder.append("</td></tr>");
    
    		return builder.toString();
    	}
        public boolean replaceCard(Card oldCard, Card replacementCard) {
    		int location = findCard(oldCard);
    		if (location < 0)
    			return false;
    		hand.set(location, replacementCard);
    		return true;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void reset() {
    		SharedPreferences settings = PreferenceManager
    				.getDefaultSharedPreferences(mContext);
    		SharedPreferences.Editor editor = settings.edit();
    		editor.putInt("CalibSlow", CALIB_DEFAULT);
    
    		editor.putInt("CalibFast", CALIB_DEFAULT);
    		editor.commit();
    		mCaliberationValue = CALIB_DEFAULT;
    	}
        public static void enumerateChunks ( String phrase , Sponynlp nlp ) {
      if ( ( phrase . length ( ) > 1 ) && ( phrase . charAt ( 0 ) == ' ' ) ) {
        boolean found = false ;
        String text = " " + phrase ;
        Sponydoc doc = nlp . parse ( text . trim ( ) , Parse . parse ( text ) ) ;
        for ( Nun np : doc . nounChunks ) {
          if ( np . text != text ) {
            found = true ;
            yield ( np . text , findChunk ( phrase , np . text . toCharArray ( ) ) ) ;
          }
        }
        if ( ! found && Arrays . asList ( phrase . split ( " " ) ) . contains ( "v" ) ) yield ( text , phrase ) ;
      }
    }
        public EOCustomObject createSavedObject(String anEntityName) {
            EOEntity entity = EOUtilities.entityNamed(this, anEntityName);
            EOEnterpriseObject object = entity.classDescriptionForInstances().createInstanceWithEditingContext(this, null);
            if (!(object instanceof EOCustomObject))
                throw new IllegalArgumentException("The entity is not an EOCustomObject and can't be used with createSavedObject().");
            return insertSavedObject((EOCustomObject)object);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void changeColorTo(Color color) {
    		redbutton.setBackground(color);
    		yellowbutton.setBackground(color);
    		greenbutton.setBackground(color);
    		bluebutton.setBackground(color);
    	}
        public void testPaintEmptyTree() throws Exception {
        Tree tmpTree = new Tree(null);
    
        tmpTree.paintMe();
        String tmpString = tmpTree.paintMeAsString();
        assertTrue("Tree should contain 'Tree is empty'", tmpString.contains("Tree is empty"));
      }
        @Override
        public PurchaseProvisionedCapacityResult purchaseProvisionedCapacity(PurchaseProvisionedCapacityRequest request) {
            request = beforeClientExecution(request);
            return executePurchaseProvisionedCapacity(request);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public Container getContainer() {
            if( container==null ) {
                // Lazy - maybe it was added later
                findContainer();
            }
            return (container);
    
        }
        public Object put(Object key, Object value) {
    		String name = key.toString();
    		Object ret = getProperty(name);
    		setProperty(name, value, TYPE_UNDEFINED);
    		return ret;
    	}
        protected void validateWarnings() {
    		for (Polygon polygon : getPolygons()) {
    			addWarnings(polygon.getValidationWarnings(), false);
    		}
    		for (Point point : getPoints()) {
    			addWarnings(point.getValidationWarnings(), false);
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public GpxWaypointRecord createNewWaypointAfterSelection(Position pos) {
    		//create a waypoint
    		GpxWaypointRecord res = new GpxWaypointRecord(getNextName(), pos);
    		insertAfterWaypoint(res, getActiveWaypoint());
    		return res;
    	}
        public Device copy() {
    	if (isCopiable())
    		return DeviceUtilities.defaultCopy(this);
    	else
    		return null;
    }
        private static void addEvents ( final Class < ? extends AbstractEvent > clazz ) {
      final Method makeEvent = clazz . getDeclaredMethod ( "createDefaultEvent" ) ;
      makeEvent . setAccessible ( true ) ;
      for ( Method method : clazz . getDeclaredMethods ( ) ) {
        if ( ! method . isAccessible ( ) ) {
          method . setAccessible ( true ) ;
          method . invoke ( null ) ;
        }
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private static boolean canResolveDownloadItem(Context context,long downloadId){
      assert !ThreadUtils.runningOnUiThread();
      Intent intent=getLaunchIntentFromDownloadId(context,downloadId);
      return (intent == null) ? false : ExternalNavigationDelegateImpl.resolveIntent(context,intent,true);
    }
        protected StringBuffer describeRelationships(Stack heritage) {
            StringBuffer msg = new StringBuffer();
            for (int i = 0; i < heritage.size(); i++) {
                ComponentBean node = (ComponentBean) heritage.get(i);
                if (i > 0) {
                    msg.insert(0, "/");
                }
                msg.insert(0, node.getJsfid());
            }
            return msg;
        }
        public void setEndDate( ProjectDate newEndDate ) {
            if(newEndDate!=null && null==startDate) throw new IllegalStateException("setEndDate(1): startDate not set. How can you know the end date?");
            endDate = newEndDate;
            if(null==endDate) {
                // mark status to be recalculated before next access
                status = STATUS_UNDEFINED;
            }
            this.fireEndDateChanged();
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private String toHexString(byte[] block, int ofs, int len) {
            StringBuffer buf = new StringBuffer();
            if (len < 1) len = block.length;
            for (int i = ofs; i < ofs+len; i++) {
                buf.append(hexaNibble[(block[i]>>>4)&15]);
                buf.append(hexaNibble[ block[i]     &15]);
            }     
            return buf.toString();
        }
        protected void release(final DirContext context) {
    
    		; // NO-OP since we are not pooling anything
    
    	}
        public int getPrecision(int column) throws SQLException{
    		try {
    		column=getValidColumn(column);
    	    Integer precision=(Integer)characteristics[column][6];
    		return precision==null?0:precision.intValue();
    		}catch(Exception e) {
    			DaffodilDBExceptionHandler.handle("Error Found In is getPrecision" , "" , e,connection.getLocale());
    			return Integer.MIN_VALUE;
    		}
    
    
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getWebInterfaceId() {
    		if (_webInterface != null) {
    			return _webInterface.getId();
    		}
    		return _webOptions.getWebInterfaceId();
    	}
        private void moveToNextLine(final boolean valueContinuation) {
            mContent.append(CodeGenUtil.CRLF);
            mLinesCount++;
            mEndColumn = mStartColumn + INDENT_SLOPE;
            if (valueContinuation) {
                mContent.append(fillString(' ', SEQ_NUM_AREA_LEN));
                mContent.append('-');
                mContent.append(fillString(' ', mEndColumn - SEQ_NUM_AREA_LEN - 1));
            } else {
                mContent.append(fillString(' ', mEndColumn));
            }
            needSpaceSeparator = false;
        }
        public int getFieldExprIndex(final String _expr)
        {
            int ret = -1;
            if (getAllFieldExpr().containsKey(_expr)) {
                final Integer ident = getAllFieldExpr().get(_expr);
                ret = ident.intValue();
            }
            return ret;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void appendReport(String reportFilePath, String msg) {
    		if (reportFilePath == null)
    			System.out.print(msg + "\n\n");
    		else {
    
    			try {
    				// Write validation report:
    				FileWriter writer = new FileWriter(reportFilePath, true);
    				writer.write(msg);
    				writer.write("\n\n");
    				writer.close();
    			} catch (Exception e) {
    				prtln("Error writing transform report file: " + e);
    			}
    		}
    	}
        public double compute_spatial_locality(long cachesize) {
            double usedBytes=0, fetchedBytes=0;
            for(int i=0; i<64; i++)
                    if (rdis[i] != null) {
                            usedBytes += rdis[i].getUsedBytes(cachesize);
                            fetchedBytes += rdis[i].getFetchedBytes(cachesize);
                    }
            return usedBytes/fetchedBytes;
        }
        private int getBottomIndex(int bottom, int limit) {
    	    if (bottom<0) {
    		return 0;
    	    }
    	    int result = bottom/elementHeight+1;
    	    return result > limit ? limit : result;
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public RrdGraphDef getEmptyGraphDef() {
            RrdGraphDef retValue = getGraphDesc().getEmptyGraphDef();
            retValue.setTitle(getGraphTitle());
            return retValue;
        }
        public double getLength2() {
    		// get the body anchor point in world space
    		Vector2 ba = this.body2.getWorldPoint(this.localAnchor2);
    		return this.pulleyAnchor2.distance(ba);
    	}
        protected void fireEventOccurred(EventType e) {
    
    		if (listeners.size() > 0) {
    			// new ondex event
    			ONDEXEvent oe = new ONDEXEvent(this, e);
    			// notify all listeners
    
    			for (ONDEXListener listener : listeners) {
    				listener.eventOccurred(oe);
    			}
    		}
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void addObservations(int var1[],int var2[],int cond[]){
      int rows=var1.length;
      observations+=rows;
      for (int r=0; r < rows; r++) {
        firstSecondCondCount[var1[r]][var2[r]][cond[r]]++;
        firstCondCount[var1[r]][cond[r]]++;
        secondCondCount[var2[r]][cond[r]]++;
        condCount[cond[r]]++;
      }
    }
        private void buildRedirectElement(Element extensionElement, Redirect redirect) {
    		Element operationElement = new Element(ElementConst.OPERATIONINST);
    		operationElement.setText(redirect.getValue());
    		Element actionElement = new Element(ElementConst.ACTION);
    		actionElement.setAttribute(ElementConst.ATTRIBUTE_OPERATION_REDIRECT,Boolean.TRUE.toString());
    		actionElement.setAttribute(ElementConst.ATTRIBUTE_STEP_NUMBER, redirect.getStepLabel().trim());
    		operationElement.addContent(actionElement);
    		extensionElement.addContent(operationElement);
    	}
        public void start() throws SchedulerException {
      try {
        getRemoteScheduler().start();
      }
     catch (  RemoteException re) {
        throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public static int isSubdirectoryOf(File pathFile,List directories){
      String path=pathFile.toString();
      for (int j=0, size=directories.size(); j < size; j++) {
        File dirFile=FileUtil.getCanonicalFile((File)directories.get(j));
        String dir=dirFile.toString();
        if (!pathFile.getParent().equals(dirFile.getParent()) && (path.length() > dir.length() && path.startsWith(dir) || dir.length() > path.length() && dir.startsWith(path))) {
          return j;
        }
      }
      return -1;
    }
        public final static int murmurHash3(int x){
      x^=x >>> 16;
      x*=0x85ebca6b;
      x^=x >>> 13;
      x*=0xc2b2ae35;
      x^=x >>> 16;
      return x;
    }
        public void clear() {
            init();
            setAddrPattern("");
            setArguments(new Object[0]);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private String createMailToLink(String to, String bcc, String cc,
                String subject, String body) {
            Validate.notNull(to, "You must define a to-address");
            final StringBuilder urlBuilder = new StringBuilder("mailto:");
            addEncodedValue(urlBuilder, "to", to);
            if (bcc != null || cc != null || subject != null || body != null) {
                urlBuilder.append('?');
            }
            addEncodedValue(urlBuilder, "bcc", bcc);
            addEncodedValue(urlBuilder, "cc", cc);
            addEncodedValue(urlBuilder, "subject", subject);
            if (body != null) {
                addEncodedValue(urlBuilder, "body", body.replace("$NL$", "\r\n"));
            }
    
            return urlBuilder.toString();
        }
        public SharedGroup getSharedGroup() {
    
    	if (isLiveOrCompiled())
    	    if (!this.getCapability(ALLOW_SHARED_GROUP_READ))
    		throw new CapabilityNotSetException(J3dI18N.getString("Link1"));
    	return ((LinkRetained)this.retained).getSharedGroup();
        }
        public void readGroup(AttributeSet attrs){
      TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.SherlockMenuGroup);
      groupId=a.getResourceId(R.styleable.SherlockMenuGroup_android_id,defaultGroupId);
      groupCategory=a.getInt(R.styleable.SherlockMenuGroup_android_menuCategory,defaultItemCategory);
      groupOrder=a.getInt(R.styleable.SherlockMenuGroup_android_orderInCategory,defaultItemOrder);
      groupCheckable=a.getInt(R.styleable.SherlockMenuGroup_android_checkableBehavior,defaultItemCheckable);
      groupVisible=a.getBoolean(R.styleable.SherlockMenuGroup_android_visible,defaultItemVisible);
      groupEnabled=a.getBoolean(R.styleable.SherlockMenuGroup_android_enabled,defaultItemEnabled);
      a.recycle();
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public V getVertex(int i) {
    		if (i >= vertices.size())
    			return null;
    		else
    			return vertices.get(i);
    	}
        public Tile getAdjacentTile(Direction direction) {
             int x = getX() + ((getY() & 1) != 0 ?
                                   direction.getOddDX() : direction.getEvenDX());
             int y = getY() + ((getY() & 1) != 0 ?
                                   direction.getOddDY() : direction.getEvenDY());
             return getMap().getTile(x, y);
         }
        public void updateFont() {
    		title.setFont(gui.getMainFont().deriveFont(Font.BOLD));
    		sourcePane.setFont(gui.getSourceCodeFont());
    		editButton.setFont(gui.getMainFont());
    		parseButton.setFont(gui.getMainFont());
    		rereadButton.setFont(gui.getMainFont());
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getDominantEmotion() {
    		// =-- Initialize variables
    		String dominantemotion = "";
    		double max = 0;
    		double valueholder;
    
    		// =-- Iterate emotions
    		Set<Entry<String, Double>> emotionalvalues = this.emotions.entrySet();
    		for (Entry<String, Double> currentvalue : emotionalvalues) {
    			valueholder = currentvalue.getValue().doubleValue();
    			if (valueholder > max) {
    				// =-- Update dominant emotion
    				max = valueholder;
    				dominantemotion = currentvalue.getKey();
    			}
    		}
    		return dominantemotion;
    	}
        public static VerificationCheckInstance create ( VerificationCheckInstance self , String code , Values to ) {
      Values data = Values . of ( new Values ( "Code" , code ) , new Values ( "To" , to ) , null ) ;
      String payload = self . _version . create ( "POST" , self . _uri , data , null ) ;
      return new VerificationCheckInstance ( self . _version , payload , ServiceSid . of ( self . _solution . getServiceSid ( ) ) , null ) ;
    }
        public static java.sql.Timestamp toTimestamp(String date,String time){
      java.util.Date newDate=toDate(date,time);
      if (newDate != null) {
        return new java.sql.Timestamp(newDate.getTime());
      }
     else {
        return null;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setCellRenderer(ListCellRenderer newValue) {
    		if (newValue == null)
    			throw new IllegalArgumentException("The list cell renderer must be non null");
    			
    		ListCellRenderer oldValue = cellRenderer;
    		cellRenderer = newValue;
    		firePropertyChange(CELL_RENDERER_CHANGED_PROPERTY, oldValue, newValue);
    	}
        @Override
        public CmsException createException(CmsMessageContainer container, Throwable cause) {
    
            return new CmsDbIoException(container, cause);
        }
        public void destroy() {
    		
    		//super.destroy();
    		
    		System.out.println("destroy agent...");
    		
    		this.listenerIsRunning = false;
    		this.listener = null;
    		
    		// unregister agent
    		UnregisterMessage um = new UnregisterMessage(info.getID());	
    		ReplyMessage rm = send(um);
    
    
    		if(rm.getReply() != ReplyMessage.OK) 
    			System.out.println("not able to unregister: " + rm.getReply());
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    protected PdfArray copyArray(PdfArray in) throws IOException, BadPdfFormatException {
            PdfArray out = new PdfArray();
            
            for (Iterator i = in.listIterator(); i.hasNext();) {
                PdfObject value = (PdfObject)i.next();
                out.add(copyObject(value));
            }
            return out;
        }
        private void createSizeThemeTextField() {
    		GridData gridData7 = new GridData();
    		gridData7.widthHint = 50;
    		sizeThemeTextField = new ThemeTextField(textAboveComposite, SWT.NONE);
    		sizeThemeTextField.setEmbeddedInBindableGroup(false);
    		sizeThemeTextField.setBindingSubPath("fontSize");
    		sizeThemeTextField.setIntValued(true);
    		sizeThemeTextField.setLayoutData(gridData7);
    	}
        private void _init() throws Exception {
    	this.calendarFechaIni.setSelectedDate(this.getSessionReenviosInconsistenciaBean().getActualDate());
    	this.calendarFechaFin.setSelectedDate(this.getSessionReenviosInconsistenciaBean().getActualDate());
    	ConstantesGenerales.getInstance();	
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void init() {
    		if (jbnOnt != null) {
    			for (int i = 0; i < jbnOnt.length; i++) {
    				btnGrpOnt.add(jbnOnt[i]);
    			}
    		}
    		if (jbnPort != null) {
    			for (int i = 0; i < jbnPort.length; i++) {
    				btnGrpOnt.add(jbnPort[i]);
    			}
    		}
    	}
        public int read() throws IOException {
    		int i = 0;
    		if(peeked>=0) {
    			i = peeked;
    			peeked = -1;
    		}
    		else if(in!=null) i = in.read();
    		else if(fin!=null) i = fin.read();
    
    		if(i==-1) throw new EOFException();
    		else if(in!=null) offset++;
    		return i;
    	}
        private static void createAndRegisterWorkflows(Backend<?> backend) throws DirectoryException {
      for (  DN curBaseDN : backend.getBaseDNs()) {
        createWorkflow(curBaseDN,backend);
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void draw3DRect (int x, int y, int width, int height, boolean raised) {
            emitThis ("%draw3DRect");
            Color c = getColor ();
            Color brighter = c.brighter ();
            Color darker = c.darker ();
    
            setColor (raised ? brighter : darker);
            drawLine (x, y, x, y + height);
            drawLine (x + 1, y, x + width - 1, y);
            setColor (raised ? darker : brighter);
            drawLine (x + 1, y + height, x + width, y + height);
            drawLine (x + width, y, x + width, y + height);
            setColor (c);
        }
        public TablesApiRequest(String tableName,String granularity,String format,@NotNull String perPage,@NotNull String page,UriInfo uriInfo,BardConfigResources bardConfigResources) throws BadApiRequestException {
      super(format,perPage,page,uriInfo);
      this.tables=generateTables(tableName,bardConfigResources.getLogicalTableDictionary());
      if (tableName != null && granularity != null) {
        this.granularity=generateGranularity(granularity,bardConfigResources.getGranularityParser());
        this.table=generateTable(tableName,this.granularity,bardConfigResources.getLogicalTableDictionary());
      }
     else {
        this.table=null;
        this.granularity=null;
      }
      LOG.debug("Api request: Tables: {},\nGranularity: {},\nFormat: {}\nPagination: {}",this.tables,this.granularity,this.format,this.paginationParameters);
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private String checkLooseEndsTableNameConflict(String clearname, int attempt)
        {
            Enumeration e = getVariables();
            while (e.hasMoreElements()) {
                BaseType bt = (BaseType) e.nextElement();
                String btName = bt.getEncodedName();
    
                //LogStream.out.println("bt: '"+btName+"'  dataset: '"+name+"'");
    
                if (btName.equals(clearname)) {
                    clearname = repairLooseEndsTableConflict(clearname, attempt++);
                    clearname = checkLooseEndsTableNameConflict(clearname, attempt);
                }
            }
    
            AttributeTable at = getAttributeTable();
            e = at.getNames();
            while (e.hasMoreElements()) {
                String aName = (String) e.nextElement();
                if (aName.equals(clearname)) {
                    clearname = repairLooseEndsTableConflict(clearname, attempt++);
                    clearname = checkLooseEndsTableNameConflict(clearname, attempt);
                }
            }
            return (clearname);
        }
        public void testAddOfficeAdministratorInstance() {
    		// Add two different administrators verifying details
    		this.replayMockObjects();
    		OfficeAdministrator admin = this.node.addOfficeAdministrator("ADMIN",
    				new ClassAdministratorSource());
    		assertNotNull("Must have administrator", admin);
    		assertEquals("Incorrect administrator name", "ADMIN",
    				admin.getOfficeAdministratorName());
    		assertNotSame("Should obtain another administrator", admin,
    				this.node.addOfficeAdministrator("ANOTHER",
    						new ClassAdministratorSource()));
    		this.verifyMockObjects();
    	}
        protected Insets getVisualMargin(Component c, Insets insets) {
            Insets i = super.getVisualMargin(c, insets);
            if (UIManager.getBoolean("ComboBox.harmonizePreferredHeight")) {
                if (! ((JComboBox) c).isEditable()) {
                    i.top += 1;
                    i.bottom += 1;
                }
            }
            return i;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private Dimension getItemDimension(HListGroup hGroup){
       	
       	Dimension iconDim = hGroup.getIconSize();
       	Dimension labelDim = hGroup.getLabelSize();
       	
       	int itemWidth = elementInsets.left + elementInsets.right + iconDim.width + labelDim.width;
       	int itemHeight = elementInsets.top + elementInsets.bottom;
    
    		if(hGroup.getIconSize().height > hGroup.getLabelSize().height ){
    			
    			itemHeight += hGroup.getIconSize().height;
    			
    		}
    		else{
    			
    			itemHeight += hGroup.getLabelSize().height;
    			
    		}
    		
    		return new Dimension(itemWidth, itemHeight);
       }
        public void setScrollLines(String lines) {
        try {
          scrollLines.set(Integer.parseInt(lines));
        } catch (NumberFormatException e) {
          out.println("Error: lines must be a valid integer");
        }
      }
        public void testAllFailureFalse() {
        _support = new DispatcherSupport(DispatcherSupport.ALL_FAILURE, 2, _mainDispatcher);
        _support.success(null);
        assertNotNull(_mainResult);
        assertEquals(new Boolean(false), _mainResult);
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public String getArg(int pintNumber) {
            String getArg = "";
            
        	if (getArgs() != null) {
        		Tuple objTuple = ((Tuple)getArgs().get(pintNumber));
        		if (objTuple != null) {
        			getArg = objTuple.getValue();
        		}
        	}
        	
            return getArg;
        }
        public static double lookupExtrapolation ( double x , double [ ] xs , double [ ] ys ) {
      int length = xs . length ;
      if ( x < xs [ 0 ] ) {
        double dx = xs [ 1 ] - xs [ 0 ] ;
        double dy = ys [ 1 ] - ys [ 0 ] ;
        double k = dy / dx ;
        return ys [ 0 ] + ( x - xs [ 0 ] ) * k ;
      }
      if ( x > xs [ length - 1 ] ) {
        double dx = xs [ length - 1 ] - xs [ length - 2 ] ;
        double dy = ys [ length - 1 ] - ys [ length - 2 ] ;
        double k = dy / dx ;
        return ys [ length - 1 ] + ( x - xs [ length - 1 ] ) * k ;
      }
      return FastMath . interp ( x , xs , ys ) ;
    }
        public ElementSet Parameter() {
    
    		return org.openarchitectureware.core.meta.util.MMUtil
    				.filterByView(parameterSet);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void setRequest(GetQuote param){
                                
                                           if (param != null){
                                              //update the setting tracker
                                              localRequestTracker = true;
                                           } else {
                                              localRequestTracker = true;
                                                  
                                           }
                                       
                                                this.localRequest=param;
                                        
    
                                   }
        @Override
        public void connectionClosed() {
            lock.lock();
            try {
                connectionOpen = false;
                if (state != null)
                    state.disconnectFromChannel();
            } finally {
                lock.unlock();
            }
        }
        public void reset( String input, String delimiters ) {
    		this.inputText = input;
    		this.delimiters = delimiters;
    		this.inputChars = input.toCharArray();
    		updateTokenStartPosition(input, this.inputChars, this.delimiters);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JPasswordField getJPasswordFieldUserPassword() {
    		if (jPasswordFieldUserPassword == null) {
    			jPasswordFieldUserPassword = new JPasswordField();
    			jPasswordFieldUserPassword.addFocusListener(new java.awt.event.FocusAdapter() {
    				public void focusLost(java.awt.event.FocusEvent e) {
    					try {
    						passwdHash = NinanRmiUserContext.hashPassword(new String(getJPasswordFieldUserPassword().getPassword()));
    					} catch (NinanRMIException e1) {
    						// TODO Auto-generated catch block
    						e1.printStackTrace();
    					}
    				}
    			});
    		}
    		return jPasswordFieldUserPassword;
    	}
        public static Set<ClassTemplateSpec> allReferencedTypes(ClassTemplateSpec spec) {
        return findAllReferencedTypes(
            directReferencedTypes(spec),
            Collections.<ClassTemplateSpec>emptySet(),
            Collections.<ClassTemplateSpec>emptySet());
      }
        private String convertElemToText(final Element elem) {
            final String output = elem.getText();
            if (output.trim().length() != 0) {
                return output;
            }
    
            // If the return string is blank, then there can be two possibilities
            // 1) The return value was actually an xml string in which case
            // the element should have children nor should it not belong to
            // xa namespace
            // or
            // 2) The return value is actually an xml string
            if (elem.getNamespace().equals(XAwareConstants.xaNamespace) || elem.getChildren().size() == 0) {
                return output;
            }
    
            // Otherwise convert XML to a string and return it.
            return xmlout.outputString(elem);
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void run() {
    		BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
    		try {
    			String line;
    			while ((line = reader.readLine()) != null) {
    				if (prefix != null) {
    					System.out.printf("[%s] %s%n", prefix, line);
    				}
    				if (list != null) {
    					list.add(line);
    				}
    			}
    		} catch (IOException e) {
    			e.printStackTrace();
    		} finally {
    			try {
    				stream.close();
    			} catch (IOException e) {
    				e.printStackTrace();
    			}
    		}
    	}
        protected void updateStatus(boolean live) {
    		if (live) {
    			keepPipeLive();
    			pipeAlive = true;
    		} else if (isPipeLive()) {
    			pipeDestroy();
    			pipeAlive = false;
    		}
    	}
        public static void idleAllWorkers ( Scheduler self ) throws InterruptedException {
      self . setMode ( IDLE ) ;
      while ( 1 ) {
        Map < String , Integer > numPending = Maps . newHashMap ( ) ;
        for ( String workSpecName : self . registry . pull ( NICE_LEVELS ) . keySet ( ) ) {
          numPending . put ( workSpecName , self . numPending ( workSpecName ) ) ;
        }
        if ( Iterables . isEmpty ( numPending . values ( ) ) ) {
          break ;
        }
        logger . warn ( "waiting for pending workUnits: " + numPending ) ;
        Thread . sleep ( 1000 ) ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private JButton getEjecutarBoton() {
            if (ejecutarBoton == null) {
                ejecutarBoton = new JButton();
                ejecutarBoton.setBounds(new Rectangle(221, 556, 157, 25));
                ejecutarBoton.setIcon(new ImageIcon(getClass().getResource(
                        "/gui2/FormRunHS.png")));
                ejecutarBoton.setText("Ejecutar");
                ejecutarBoton.addActionListener(new ActionListener() {
    
                    public void actionPerformed(ActionEvent e) {
                        InformacionBean informacion = recopilarDatos();
                        if (informacion != null) {
                            ProgresoJFrame progreso = new ProgresoJFrame();
                            ResultadosJFrame result = new ResultadosJFrame();
                            // seleccionFuncion = new SeleccionFuncion(informacion);
                            Controlador controlador = new Controlador(informacion,
                                    result, progreso);
                            controlador.start();
    
                        }
                    }
                });
            }
            return ejecutarBoton;
        }
        public static boolean providesResource ( Object obj ) {
      if ( obj instanceof Class ) {
        Class < ? > clazz = ( Class < ? > ) obj ;
        return IResource . class . isAssignableFrom ( providedBy ( clazz ) ) ;
      }
      return false ;
    }
        private void setOtherAttr(final Element element, final LDItems.LDItem item) {
            Enumeration enumeration = item.getAttributesHash().keys();
            for (; enumeration.hasMoreElements();) {
                //Get property name
                String key = (String)enumeration.nextElement();
                if (key.equals(key.toLowerCase())) {
                    element.setAttribute(key, item.getAttribute(key));
                } else {
    //            LDLogger.log("Skipping pseudo attribute " + key + "=" + item.getAttribute(key) + " for " + element.getTagName());
                }
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @SuppressWarnings("deprecation")
        protected Throwable getNestedException(Throwable t) {
            Throwable root = t;
            for (;;) {
                if (root instanceof RemoteException) {
                    RemoteException re = (RemoteException) root;
                    if (re.detail == null)
                        break;
                    root = re.detail;
                } else if (root instanceof NamingException) {
                    NamingException ne = (NamingException) root;
                    if (ne.getRootCause() == null)
                        break;
                    root = ne.getRootCause();
                } else if (root instanceof com.ibm.ws.exception.WsNestedException) { //d121522
                    com.ibm.ws.exception.WsNestedException ne = (com.ibm.ws.exception.WsNestedException) root;
                    if (ne.getCause() == null)
                        break;
                    root = ne.getCause();
                } else {
                    break;
                }
            }
            return root;
        }
        public void clearPassword() {
            if (password != null) {
                for (int i = 0; i < password.length; i++) {
                    password[i] = ' ';
                }
                password = null;
            }
        }
        private void afterSend() {
          // TODO refresh sent folder
          mediator.updateSentFolder();
          if (mode == MODE_EDITING_SAVED) {
             mediator.reselectFolder();
          }
          // TODO if ok then call cancelAction() else show sending/validation errors
          cancelAction();
       }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
    	protected void setOtherResourceBundles(HttpServletRequest request)
    	{
    		Locale locale = request.getLocale();
    
            if (errorBundleName != null)
            {
                ResourceBundle errorBundle = getLocalizationBundleFactory().getErrorMessageBundle(locale);
                Config.set(request, errorBundleName, new LocalizationContext(errorBundle, locale));
                LOGGER.debug("Loaded Stripes error message bundle ", errorBundle, " as ", errorBundleName);
            }
    
            if (fieldBundleName != null)
            {
                ResourceBundle fieldBundle = getLocalizationBundleFactory().getFormFieldBundle(locale);
                Config.set(request, fieldBundleName, new LocalizationContext(fieldBundle, locale));
                LOGGER.debug("Loaded Stripes field name bundle ", fieldBundle, " as ", fieldBundleName);
            }
    	}
        protected void showModels(Iterable<EpoxyModel<?>> models,boolean show){
      for (  EpoxyModel<?> model : models) {
        showModel(model,show);
      }
    }
        @Override
        public NonExceptionPostdominatorsAnalysis analyze(IAnalysisCache analysisCache, MethodDescriptor descriptor)
                throws CheckedAnalysisException {
            CFG cfg = getCFG(analysisCache, descriptor);
            ReverseDepthFirstSearch rdfs = getReverseDepthFirstSearch(analysisCache, descriptor);
            NonExceptionPostdominatorsAnalysis analysis = new NonExceptionPostdominatorsAnalysis(cfg, rdfs, getDepthFirstSearch(
                    analysisCache, descriptor));
            Dataflow<java.util.BitSet, PostDominatorsAnalysis> dataflow = new Dataflow<>(cfg,
                    analysis);
            dataflow.execute();
            return analysis;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void checkValidity() {
            if (invalid) {
                throw new IllegalStateException(
                    "Cannot execute desired operation " +
                    "because pooled connection has invalid state.");
            }
        }
        public String getQualifiedSwitchValue(String id) {
        	Object result = null;
        	List al = (List) allResults.get(id);
        	if ((al != null) && (al.size() == 2)) {
        		result = al.get(1);
        	}
        	return(String)result;
        }
        public static void interruptKernel ( Kernel self ) {
      if ( customInterrupt ) {
        mReading = false ;
        customInterruptRequested . emit ( ) ;
      }
      else if ( kernelManager . hasKernel ( ) ) {
        mReading = false ;
        kernelManager . interruptKernel ( ) ;
      }
      else {
        appendPlainText ( "Kernel process is either remote or " + "unspecified. Cannot interrupt.\n" ) ;
      }
    }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public QualityStats[] execute(Judge judge,SubmissionReport submitRep,PrintWriter qualityLog) throws Exception {
      int nQueries=Math.min(maxQueries,qualityQueries.length);
      QualityStats stats[]=new QualityStats[nQueries];
      for (int i=0; i < nQueries; i++) {
        QualityQuery qq=qualityQueries[i];
        Query q=qqParser.parse(qq);
        long t1=System.currentTimeMillis();
        TopDocs td=searcher.search(q,maxResults);
        long searchTime=System.currentTimeMillis() - t1;
        if (judge != null) {
          stats[i]=analyzeQueryResults(qq,q,td,judge,qualityLog,searchTime);
        }
        if (submitRep != null) {
          submitRep.report(qq,td,docNameField,searcher);
        }
      }
      if (submitRep != null) {
        submitRep.flush();
      }
      return stats;
    }
        public void removeTilesAt(double _x, double _y) {
            for(int i = 0; i < drawTiles.size(); i++) {
                if (drawTiles.elementAt(i).getGeneralPath().contains(_x, _y)) {
                        drawTiles.remove(i);
                }
                hTile = copyTiles.elementAt(type);
                repaint();
            }
        }
        private List updatedAttributes(DbEntity entity, Map updatedSnapshot) {
            List attributes = new ArrayList(updatedSnapshot.size());
            Map entityAttributes = entity.getAttributeMap();
    
            Iterator it = updatedSnapshot.keySet().iterator();
            while (it.hasNext()) {
                Object name = it.next();
                attributes.add(entityAttributes.get(name));
            }
    
            return attributes;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public IJavaModelStatus getJavaModelStatus() {
    	IStatus status = getStatus();
    	if (status instanceof IJavaModelStatus) {
    		return (IJavaModelStatus)status;
    	} else {
    		// A regular IStatus is created only in the case of a CoreException.
    		// See bug 13492 Should handle JavaModelExceptions that contains CoreException more gracefully
    		return new JavaModelStatus(this.nestedCoreException);
    	}
    }
        @Override
      public synchronized void stop() {
        if (this.stopStatus.isStopInProgress()) {
          return;
        }
    
        this.stopStatus.setStopInprogress(true);
    
        LOGGER.info("Stopping the Gobblin Cluster Manager");
    
        if (this.idleProcessThread != null) {
          try {
            this.idleProcessThread.join();
          } catch (InterruptedException ie) {
            Thread.currentThread().interrupt();
          }
        }
    
        // Send a shutdown request to all GobblinTaskRunners unless running in standalone mode.
        // In standalone mode a failing manager should not stop the whole cluster.
        if (!this.isStandaloneMode) {
          sendShutdownRequest();
        }
    
        stopAppLauncherAndServices();
    
        this.multiManager.disconnect();
      }
        private Node removeChildAfter(Node parent, @Nullable Node siblingBefore) {
        if (siblingBefore == null) {
          return parent.removeFirstChild();
        } else {
          return parent.removeChildAfter(siblingBefore);
        }
      }
    }
}

 }class Test{ 
class Test {
    public class Example {
    @Override
        public List<T> filter(final List<T> list) throws CouldNotPerformException {
            beforeFilter();
            return ListFilter.super.filter(list);
        }
        public Choice(String text,T value,String detailText){
      this.text=text;
      this.value=value;
      this.detailText=detailText;
    }
        public ResultSequence plus(ResultSequence arg) throws DynamicError {
                    AnyType at = get_single_arg(arg);
                    if( !(at instanceof XSInteger) )
                            DynamicError.throw_type_error();
                    XSInteger val = (XSInteger) at;
    
                    return ResultSequenceFactory.create_new(new XSInteger(int_value() + val.int_value()));
            }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void refreshPlayingTrack(){
      if (sequence == null) {
        return;
      }
      final Track[] tracks=sequence.getTracks();
      if (tracks.length > 0) {
        try {
          playingTrack=TrackUtils.mergeSequenceToTrack(SequencerImpl.this,recordEnable);
        }
     catch (    final InvalidMidiDataException ignored) {
        }
      }
    }
        @Override
        public Object getItem(int position) throws ArrayIndexOutOfBoundsException {
            Position adapterPosition = translatePosition(position);
            if (adapterPosition.mPosition == POSITION_FILLER
                    || adapterPosition.mPosition == POSITION_HEADER) {
                // Fake entry in view.
                return null;
            }
    
            return mDelegate.getItem(adapterPosition.mPosition);
        }
        private Document parseInputSource(InputSource s) throws JspException {
            try {
                DocumentBuilder db = XmlUtil.newDocumentBuilder();
                db.setEntityResolver(entityResolver);
                return db.parse(s);
            } catch (SAXException e) {
                throw new JspException(e);
            } catch (IOException e) {
                throw new JspException(e);
            }
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void alert(final String message) {
                
                UiApplication.getUiApplication().invokeLater(new Runnable() {
                    
                    public void run() {
                    
                        Dialog.ask(Dialog.D_OK, message);
                        
                        //Calling invalidate() on your screen forces the paint
                        //method to be called.
                        //appScreen.invalidate();
                    }
                });
            }
        public boolean doVerify(boolean atend) {
    	if (! verify) return false;
    	return ('1' == VERIFYFLAGS.charAt((testinsert?4:0)+
    					  (!isProject?2:0)+
    					  (atend?1:0)));
        }
        public void reset() {
    		this.currentTick = 0;
    		
    		this.setPaused(false);
    	}
    }
}

 }class Test{ 
class Test {
    public class Example {
    private void checkLogin() throws QcException {
    		if (!isLoggedIn()) {
    			throw new QcException("Not logged to Quality Center");
    		}
    	}
        private Response downloadArtifact(Node node) throws Exception
       {
          NodeRepresentation nodeRepresentation = nodeRepresentationService.getNodeRepresentation(node, null);
          if (node.canAddMixin("exo:mavencounter"))
          {
             node.addMixin("exo:mavencounter");
             node.getSession().save();
          }
          node.setProperty("exo:downloadcounter", node.getProperty("exo:downloadcounter").getLong() + 1l);
          node.getSession().save();
          long lastModified = nodeRepresentation.getLastModified();
          String contentType = nodeRepresentation.getMediaType();
          long contentLength = nodeRepresentation.getContentLenght();
          InputStream entity = nodeRepresentation.getInputStream();
          Response response =
             Response.ok(entity, contentType).header(HttpHeaders.CONTENT_LENGTH, Long.toString(contentLength))
                .lastModified(new Date(lastModified)).build();
          return response;
       }
        public Object pop() {
            if (size() == 0) {
                return null;
            }
            Object peek = item(0);
            itemto(0, item(size() - 1));
            cutOffLast();
            if (size() > 0) {
                up();
            }
            return peek;
        }
    }
}

 }class Test{ 
class Test {
    public class Example {
    public void select(JCustomizer customizer, Point point) {
            selectOnly(customizer);
            customizer.getStateManager().setStateBound(point);
            fireSelectionChanged();
        }
        public void destroy() throws DBException {
          // invoke destroy() on the delegate.
          executorService.shutdown();
          delegate.destroy();
          
          try {
             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
             ObjectName oname = new ObjectName("com.virtela.poller:type=DBDriver,name=" + name);
             mbs.unregisterMBean(oname);
          }
          catch (Exception e) {
             throw new DBException(e);   
          }
          
          initialized = false;
       }
        private Record getRecord() {
            final VoiceXmlNode node = getNode();
    
            if (node == null) {
                return null;
            }
    
            if (!(node instanceof Record)) {
                return null;
            }
    
            return (Record) node;
        }
    }
}

 }